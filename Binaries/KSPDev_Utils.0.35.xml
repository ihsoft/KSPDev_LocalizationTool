<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KSPDev_Utils.0.35</name>
    </assembly>
    <members>
        <member name="T:KSPDev.ConfigUtils.AbstractCollectionTypeProto">
             <summary>A base class for a proto of a collection of values.</summary>
             <remarks>Collection of collections is not supported. Though, descendands may use own
             (de)serialization approach to handle nested collections.
             <para>All descendants of this class must implement a constructor which accepts a single
             argument: the type of the collection. Constructor can throw <see cref="T:System.ArgumentException"/>
             if passed type is unacceptable.</para>
             </remarks>
             <example>As a good example of overriding of this class see
             <see cref="T:KSPDev.ConfigUtils.GenericCollectionTypeProto"/>. Though, it tries to be universal and, hence, works
             via reflection. You don't need to deal with reflections as long as your custom proto used for
             the fields of known types only.
             <code>
             class MyBooleanCollection {
               public void AddItem(bool itemValue) {
                 // ...some custom code...
               }
               public IEnumerable GetMyVeryCustomIterator() {
                 // ...some custom code...
                 return res;
               }
             }
            
             class MyBooleanCollectionProto : AbstractCollectionTypeProto {
               public MyBooleanCollectionProto() : base(typeof(bool)) {}
            
               public override Type GetItemType() {
                 return typeof(bool);
               }
               public override IEnumerable GetEnumerator(object instance) {
                 return (instance as MyBooleanCollection).GetMyVeryCustomIterator(); 
               }
               public override void AddItem(object instance, object item) {
                 (instance as MyBooleanCollection).AddItem((bool) item);
               }
             }
             </code>
             </example>
             <seealso cref="T:KSPDev.ConfigUtils.ConfigAccessor"/>
             <seealso cref="T:KSPDev.ConfigUtils.BasePersistentFieldAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.AbstractCollectionTypeProto.#ctor(System.Type)">
            <param name="containerType">A type of the collection (i.e. an immediate field's type).</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.AbstractCollectionTypeProto.GetItemType">
            <summary>Returns type of items in the collection.</summary>
            <returns>An item type.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.AbstractCollectionTypeProto.GetEnumerator(System.Object)">
            <summary>Returns enumerable object for the collection.</summary>
            <param name="instance">An instance to get the enumerable for.</param>
            <returns>
            An enumerable of objects. Type of the items is determined by the relevant
            <see cref="T:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto"/>.
            </returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.AbstractCollectionTypeProto.AddItem(System.Object,System.Object)">
            <summary>Adds an item into the collection.</summary>
            <param name="instance">A collection instance to add item into.</param>
            <param name="item">
            An item to add. The item must be of the same type as <see cref="M:KSPDev.ConfigUtils.AbstractCollectionTypeProto.GetItemType"/> specifies.
            </param>
        </member>
        <member name="M:KSPDev.ConfigUtils.AbstractCollectionTypeProto.ClearItems(System.Object)">
            <summary>Removes all items from the collection.</summary>
            <param name="instance">A collection instance to clear.</param>
        </member>
        <member name="T:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto">
            <summary>A base class for a proto of a single value.</summary>
            <remarks>All descendands of this class must implement a default constructor.</remarks>
            <example>See real overrides in <see cref="T:KSPDev.ConfigUtils.PrimitiveTypesProto"/> and
            <see cref="T:KSPDev.ConfigUtils.KspTypesProto"/>.
            <para>Here is how you could implement your own proto to persist string array as a string.</para>
            <code>
            class StringArrayProto : AbstractOrdinaryValueTypeProto {
              public override bool CanHandle(Type type) {
                return typeof(string[]) == type;
              }
              public override string SerializeToString(object value) {
                return string.Join(",", (value as string[]));
              }
              public override object ParseFromString(string value, Type type) {
                // Due to check in CanHandle we know the type is string[].
                return value.Split(',');
              }
            }
            </code>
            </example>
            <seealso cref="T:KSPDev.ConfigUtils.ConfigAccessor"/>
            <seealso cref="T:KSPDev.ConfigUtils.BasePersistentFieldAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto.#ctor">
            <summary>Default constructor must be the only constructor of the proto.</summary>
        </member>
        <member name="M:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto.CanHandle(System.Type)">
            <summary>Tells if proto can handle the specified type.</summary>
            <param name="type">A type in question.</param>
            <returns><c>true</c> if proto can (de)serialize values of the type.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto.SerializeToString(System.Object)">
            <summary>Serializes value into a string.</summary>
            <remarks>In general avoid using <c>ToString()</c> methods to produce the serialized value.
            Such methods are not designed to be unambiguous.</remarks>
            <param name="value">A value to serialize.</param>
            <returns>A string representation of the value. It doesn't need to be human readable.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto.ParseFromString(System.String,System.Type)">
            <summary>Makes a value from the string representation.</summary>
            <param name="value">A string produced by <see cref="M:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto.SerializeToString(System.Object)"/>.</param>
            <param name="type">A type to convert the value into.</param>
            <returns>A new and initialized instance of the requested type.</returns>
            <exception cref="T:System.ArgumentException">If value cannot be parsed.</exception>
        </member>
        <member name="T:KSPDev.ConfigUtils.BasePersistentFieldAttribute">
             <summary>A base for any persitent field annotation.</summary>
             <remarks>Descendands must initialize at least <see cref="P:KSPDev.ConfigUtils.BasePersistentFieldAttribute.ordinaryTypeProto"/> field. If
             <see cref="P:KSPDev.ConfigUtils.BasePersistentFieldAttribute.collectionTypeProto"/> is set then the field is considered a persistent
             collection of values.
             <para>See more examples in <see cref="T:KSPDev.ConfigUtils.PersistentFieldsFileAttribute"/>.</para>
             </remarks>
             <example>A "shortcut" attributes could be declared like this: 
             <code>
             class MyTypeAttribute : AbstractPersistentFieldAttribute {
               public MyTypeAttribute(string cfgPath) : base(cfgPath) {
                 ordinaryTypeProto = typeof(PrimitiveTypesProto);
               }
             }
            
             class MyTypesCollectionAttribute : AbstractPersistentFieldAttribute {
               public MyTypesCollectionAttribute(string cfgPath) : base(cfgPath) {
                 ordinaryTypeProto = typeof(PrimitiveTypesProto);
                 collectionTypeProto = typeof(GenericCollectionTypeProto);
               }
             }
             </code>
             </example>
             <seealso cref="T:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto"/>
             <seealso cref="T:KSPDev.ConfigUtils.AbstractCollectionTypeProto"/>
             <seealso cref="T:KSPDev.ConfigUtils.ConfigAccessor"/>
        </member>
        <member name="F:KSPDev.ConfigUtils.BasePersistentFieldAttribute.path">
            <summary>Relative path to the value or node. Case-insensitive.</summary>
            <remarks>Absolute path depends on the context.</remarks>
        </member>
        <member name="F:KSPDev.ConfigUtils.BasePersistentFieldAttribute.group">
            <summary>A tag for a group of fields.</summary>
            <remarks>
            Group can be used when reading/writing values via <see cref="T:KSPDev.ConfigUtils.ConfigAccessor"/> to process only
            a subset of the persistent fields of the class. It's case-insensitive.
            </remarks>
        </member>
        <member name="M:KSPDev.ConfigUtils.BasePersistentFieldAttribute.#ctor(System.String)">
            <param name="cfgPath">
            A path to the fields's value in the config. Components must be separated by symbol <c>/</c>.
            The path is relative, the absolute path is determined when doing actual (de)serialization.
            The path is case-insensitive.
            </param>
        </member>
        <member name="P:KSPDev.ConfigUtils.BasePersistentFieldAttribute.ordinaryTypeProto">
            <summary>A proto that (de)serializes field's value as a simple string.</summary>
            <remarks>
            This type must be a descendant of <see cref="T:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto"/>.
            </remarks>
            <value>The prototype's class type.</value>
        </member>
        <member name="P:KSPDev.ConfigUtils.BasePersistentFieldAttribute.collectionTypeProto">
            <summary>A proto that handles field's value as a collection of persistent values.</summary>
            <remarks>If it's <c>null</c> then field is assumed to be not a collection.</remarks>
            <para>
            This type must be a descendant of <see cref="T:KSPDev.ConfigUtils.AbstractCollectionTypeProto"/>.
            </para>
            <value>The prototype's class type.</value>
        </member>
        <member name="T:KSPDev.ConfigUtils.AbstractPersistentFieldsFileAttribute">
            <summary>A base for any persistent fields file annotation.</summary>
            <remarks>This attribute doesn't assume much logic so, you basically override it only to create
            "shortcuts".</remarks>
            <seealso cref="M:KSPDev.ConfigUtils.ConfigAccessor.ReadFieldsInType(System.Type,System.Object,System.String)"/>
            <seealso cref="M:KSPDev.ConfigUtils.ConfigAccessor.WriteFieldsFromType(System.Type,System.Object,System.String)"/>
        </member>
        <member name="F:KSPDev.ConfigUtils.AbstractPersistentFieldsFileAttribute.group">
            <summary>A group tag which is handled by this annotation.</summary>
        </member>
        <member name="F:KSPDev.ConfigUtils.AbstractPersistentFieldsFileAttribute.nodePath">
            <summary>A path to the node which will be the root for the fields in the group.</summary>
            <remarks>By setting different root for every group and/or type you may combine multiple
            settings in the same config file. When <see cref="F:KSPDev.ConfigUtils.AbstractPersistentFieldsFileAttribute.configFilePath"/> is empty this value is an
            absolute path on the game's database.</remarks>
        </member>
        <member name="F:KSPDev.ConfigUtils.AbstractPersistentFieldsFileAttribute.configFilePath">
            <summary>An optional relative path to the config file.</summary>
            <remarks>
            Absolute name is resolved via <see cref="M:KSPDev.FSUtils.KspPaths.MakeAbsPathForGameData(System.String[])"/>. If left
            empty then data is read from the game's database. Note, that database access is read-only.
            </remarks>
        </member>
        <member name="M:KSPDev.ConfigUtils.AbstractPersistentFieldsFileAttribute.#ctor(System.String,System.String,System.String)">
            <summary>Constructor for a persistent field.</summary>
            <param name="configFilePath">
            A relative or an absolute path to the file. It's resolved via
            <see cref="M:KSPDev.FSUtils.KspPaths.MakeAbsPathForGameData(System.String[])"/>. If empty then data is read from
            database.
            </param>
            <param name="nodePath">
            A root for the persistent fields when saving or loading via this annotation. If empty then
            root node of the file is used. Cannot be <c>null</c>
            </param>
            <param name="group">
            A group of the annotation. When saving or loading persistent fields only the fields of this
            group will be considered. Must not be <c>null</c>.
            </param>
        </member>
        <member name="T:KSPDev.ConfigUtils.IPersistentField">
             <summary>Interface for the simple types that need custom (de)serialization logic.</summary>
             <remarks>
             It's similar to <c>IConfigNode</c> interface in the compound types but with the following
             differences:
             <list type="bullet">
             <item>The value is (de)serialized from/to a simple string.</item>
             <item>
             If the field is initialized to an instance of the type, then this instance will be used to
             deserialize the value. If the field is not initialized but there is a value in the config file,
             then a new instance will be created. For this reason the type must implement a default
             constructor.
             </item>
             </list>
             <para>
             Note that the types that implement this interface will <i>never</i> be treated as compound. I.e.
             <see cref="T:KSPDev.ConfigUtils.ConfigAccessor"/> will not try to persist the members of such types even though there
             may be fields attributed with <see cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>.
             </para>
             </remarks>
             <example>
             Here is how a simple vector serialization may look like:
             <code><![CDATA[
             public class MyVector : IPeristentField {
               float x;
               float y;
            
               /// <inheritdoc/>
               public string SerializeToString() {
                 return string.Format("{0},{1}", x ,y);
               }
               /// <inheritdoc/>
               public void ParseFromString(string value) {
                 var elements = value.Split(',');
                 x = float.Parse(elements[0]);
                 y = float.Parse(elements[1]);
               }
             }
             ]]></code>
             <para>
             This example doesn't do any checking when parsing the string, but in general it's a good idea to
             do a sanity check of the string. It's OK to throw an exception from the parsing method when the
             data is invalid.
             </para>
             </example>
             <seealso cref="T:KSPDev.ConfigUtils.ConfigAccessor"/>
             <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.IPersistentField.SerializeToString">
            <summary>Returns the object's state as a plain string.</summary>
            <returns>Object's state.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.IPersistentField.ParseFromString(System.String)">
            <summary>Restores the object's state from a plain string.</summary>
            <param name="value">String value to restore from.</param>
            <remarks>It's OK to throw exceptions if the value cannot be parsed.</remarks>
        </member>
        <member name="T:KSPDev.ConfigUtils.PersistentFieldsDatabaseAttribute">
            <summary>
            A simple annotation to associate a persistent group with a game's database key.
            </summary>
            <remarks>
            <para>
            Each <c>.cfg</c> file in the mod's folders is scanned and indexed by the game on start. The
            data is stored in the database where it can be accessed from the game. The access is read-only,
            any changes to the node returned from the database won't affect the database state.
            </para>
            <para>
            The config file in the database is identified by a key which is made of three major parts:
            <list type="">
            <item>A file path relative to <c>GameData</c>. ATTENTION: the path must not contain "."!</item>
            <item>The config filename without extension.</item>
            <item>Node path inside the file starting from the root. I.e. the root node should have name as
            well.</item>
            </list>
            </para>
            <para>
            E.g. key <c>KIS/settings/KISConfig/Global</c> addresses a node <c>KISConfig/Global</c> in file
            stored at <c>GameData/KIS/settings.cfg</c>.
            </para>
            <para>
            Special case is subfolders <c>PluginData</c>, they are ignored during database scan. Put
            there configs that can change during the gameplay. Remember, that even a tiny change in the
            config will trigger database re-compilation on the next start which may significantly impact
            game loading time.
            </para>
            <para>
            Database is actively used by
            <see href="https://github.com/sarbian/ModuleManager">ModuleManager</see> (a.k.a. MM). Be wise
            when choosing if the fields should be read from a file or from the database. The module manager
            patches are only applied on the database, they don't affect the config files. E.g. if the part
            config is expected to be a target of the MM patches but never updated from the gameplay, then
            reading id via the database is the best choice. However, various mod's settings, that change
            during the game, will unlikely be a target for a MM patch - put the config into
            <c>PluginData</c> and read it as a file.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldsFileAttribute"/>
            <seealso cref="M:KSPDev.ConfigUtils.ConfigAccessor.ReadFieldsInType(System.Type,System.Object,System.String)"/>
            <seealso cref="M:KSPDev.ConfigUtils.ConfigAccessor.WriteFieldsFromType(System.Type,System.Object,System.String)"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentFieldsDatabaseAttribute.#ctor(System.String,System.String)">
            <param name="nodePath">
            An absolute path to the node in the game's database. Note that this must be a path to the
            config's <i>root</i>. This path is used to find the right settings <i>file</i>, not the right
            node within a file.
            </param>
            <param name="group">
            A group of the annotation. When saving or loading the persistent fields only the fields of
            this group will be considered. Must not be <c>null</c>.
            </param>
        </member>
        <member name="T:KSPDev.ConfigUtils.PersistentFieldsFileAttribute">
             <summary>
             A simple annotation to associate a persistent group with a configuration file.
             </summary>
             <remarks>Multiple annotations are allowed on the class. It's not required to have unique
             filename/nodePath/group set in every annontation but it's highly recommended.  
             <para>This assignment is ignored in the nested classes. Though, when using nested class as an
             immediate target of the call the annotation will be handled just fine.</para>
             </remarks>
             <example>
             <code>
             [PersistentFieldsFile("settings.cfg", "Root/Default")]
             [PersistentFieldsFile("settings-other.cfg", "", "abc")]
             [PersistentFieldsFile("settings-nested-bad.cfg", "", "nevermind")]
             class ClassWithPersistentFields {
               [PersistentField("field1")]
               private int intField = 0;
             
               [PersistentFieldsFile("settings-nested-good.cfg", "Root/Nested", "nevermind")]
               internal struct ComplexType {
                 [PersistentField("val1", group = "nevermind")]
                 public bool boolVal;
                 [PersistentField("val2", group = "nevermind")]
                 public Color colorVal;
               }
             
               [PersistentField("complexField1", group = "abc")]
               private ComplexType complexField;
             
               void SaveFields() {
                 // Save a default group of fields. 
                 ConfigAccessor.WriteFieldsFromType(instance: this);
                 /* File will be created at "GameData/settings.cfg":
                  * Root
                  * {
                  *   Default
                  *   {
                  *     field1: 0
                  *   }
                  * }
                  */
             
                 // Save group "abc". Note that the complex type only defines fields for group "nevermind"
                 // but it's ignored. The group is only honored on the immediate type, i.e.
                 // ClassWithPersistentFields in this case. 
                 ConfigAccessor.WriteFieldsFromType(instance: this, group: "abc");
                 /* File will be created at "GameData/settings-other.cfg".
                  * {
                  *   complexField1
                  *   {
                  *     val1: False
                  *     val2: 0,0,0,1
                  *   }
                  * }
                  */
             
                 // Try to use incorrect setup and save group "nevermind" for "this". 
                 // File will be created at "GameData/settings-nested-bad.cfg". And it will be empty since
                 // no fields for this group is defined in class ClassWithPersistentFields.
                 ConfigAccessor.WriteFieldsFromType(instance: this, group: "nevermind");
             
                 // Proper use of the nested complex type would be like this.
                 var test = new ComplexType() {
                     boolVal = true,
                     colorVal = Color.white
                 };
                 ConfigAccessor.WriteFieldsFromType(instance: test, group: "nevermind");
                 /* File will be created at "GameData/settings-nested-good.cfg".
                  * Root
                  * {
                  *   Nested
                  *   {
                  *     complexField1
                  *     {
                  *       val1: True
                  *       val2: 1,1,1,1
                  *     }
                  *   }
                  * }
                  */
            
                 // The following call makes the similar output but with different values.    
                 ConfigAccessor.WriteFieldsFromType(instance: complexField, group: "nevermind");
               }
             }
             </code>
             Note that this annotation only adds or re-creates the node specified by <c>nodePath</c>. If
             target file had other nodes they will not be overwritten. Though, you may expect the file
             structure to be re-ordered and comments (if any) lost. The file is actualy changed, it's read,
             updated, and saved.
             </example>
             <seealso cref="M:KSPDev.ConfigUtils.ConfigAccessor.ReadFieldsInType(System.Type,System.Object,System.String)"/>
             <seealso cref="M:KSPDev.ConfigUtils.ConfigAccessor.WriteFieldsFromType(System.Type,System.Object,System.String)"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentFieldsFileAttribute.#ctor(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:KSPDev.ConfigUtils.GenericCollectionTypeProto">
            <summary>A proto handler for a simple generic collection.</summary>
            <remarks>
            Generic must have exactly one arguent, implement method <c>Add</c> for adding new items, and
            implement <see cref="T:System.Collections.IEnumerable"/>.
            </remarks>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.GenericCollectionTypeProto.#ctor(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.ConfigUtils.GenericCollectionTypeProto.GetItemType">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.ConfigUtils.GenericCollectionTypeProto.GetEnumerator(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.ConfigUtils.GenericCollectionTypeProto.AddItem(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.ConfigUtils.GenericCollectionTypeProto.ClearItems(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:KSPDev.ConfigUtils.PrimitiveTypesProto">
            <summary>A proto for handling C# primitive types.</summary>
        </member>
        <member name="M:KSPDev.ConfigUtils.PrimitiveTypesProto.CanHandle(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.ConfigUtils.PrimitiveTypesProto.SerializeToString(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.ConfigUtils.PrimitiveTypesProto.ParseFromString(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:KSPDev.ConfigUtils.StandardOrdinaryTypesProto">
            <summary>Proto to handle all primitive C# types and common Unity/KSP types.</summary>
            <seealso cref="T:KSPDev.ConfigUtils.PrimitiveTypesProto"/>
            <seealso cref="T:KSPDev.ConfigUtils.KspTypesProto"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.StandardOrdinaryTypesProto.CanHandle(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.ConfigUtils.StandardOrdinaryTypesProto.SerializeToString(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.ConfigUtils.StandardOrdinaryTypesProto.ParseFromString(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:KSPDev.ConfigUtils.ConfigAccessor">
            <summary>A service class that simplifies accessing configuration files.</summary>
            <remarks>This class provides a lot of useful methods to deal with values in game's configuration
            files. There are low level methods that deal with nodes and values, and there are high level
            methods that use metadata from the annotated fields.</remarks>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldsFileAttribute"/>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldsDatabaseAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.StrToPath(System.String)">
            <summary>Transforms a URL-like string path into the nodes path.</summary>
            <param name="strPath">
            A list of path elements, separated by symbol "/". An empty string (no elements) addresses
            the root node.
            </param>
            <returns>
            The array of the path components. There will be no <c>null</c> or empty components.
            </returns>
            <seealso cref="M:KSPDev.ConfigUtils.ConfigAccessor.GetNodeByPath(ConfigNode,System.String[],System.Boolean)"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.ReadFieldsFromFile(System.String,System.Type,System.Object,System.String,System.String)">
            <summary>Reads values of the annotated persistent fields from a config file.</summary>
            <param name="filePath">
            A relative or an absolute path to the file. It's resolved via
            <see cref="M:KSPDev.FSUtils.KspPaths.MakeAbsPathForGameData(System.String[])"/>.
            </param>
            <param name="type">A type to load fields for.</param>
            <param name="instance">
            An instance of type <paramref name="type"/>. If it's <c>null</c> then
            only static fields will be loaded.
            </param>
            <param name="nodePath">
            An optional path in the file. All type's field will be read relative to this part.
            </param>
            <param name="group">A group tag (see <see cref="T:KSPDev.ConfigUtils.BasePersistentFieldAttribute"/>).</param>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.ReadFieldsFromDatabase(System.String,System.Type,System.Object,System.String)">
            <summary>Reads values of the annotated persistent fields from a config file.</summary>
            <param name="nodePath">An absolute path in the database. No leading "/".</param>
            <param name="type">A type to load fields for.</param>
            <param name="instance">An instance of type <paramref name="type"/>. If it's <c>null</c> then
            only static fields will be loaded.</param>
            <param name="group">A group tag (see <see cref="T:KSPDev.ConfigUtils.BasePersistentFieldAttribute"/>).</param>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.ReadFieldsFromNode(ConfigNode,System.Type,System.Object,System.String)">
            <summary>Reads the values of the annotated persistent fields from a config node.</summary>
            <param name="node">The config node to read data from.</param>
            <param name="type">
            The type to load fields for. In case of <paramref name="instance"/> is set and all the
            fields, that need to be read, are not private, it's OK to provide just the type of the
            instance. However, when reading the private and static fields, it's important to set the right
            type. That is, the type which actually defines the fields. Otherwise, they won't be found.
            </param>
            <param name="instance">
            The instance to look the fields in. If it's <c>null</c> then only the static fields will be
            loaded.
            </param>
            <param name="group">The group tag (see <see cref="T:KSPDev.ConfigUtils.BasePersistentFieldAttribute"/>).</param>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.ReadFieldsInType(System.Type,System.Object,System.String)">
            <summary>Reads the persistent fields from the URI specified by the class annotation.</summary>
            <param name="type">The type to load the fields for.</param>
            <param name="instance">
            The instance of type <paramref name="type"/>. If it's <c>null</c>, then only the static fields
            will be loaded.
            </param>
            <param name="group">
            The group to load the fields for. If <c>null</c>, then all the groups that are defined in the
            class annotation via <see cref="T:KSPDev.ConfigUtils.PersistentFieldsFileAttribute"/> will be loaded.</param>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldsFileAttribute"/>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldsDatabaseAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.ReadPartConfig(PartModule,ConfigNode)">
            <summary>Reads custom type fileds from the part's config.</summary>
            <remarks>
            <para>
            The consumer code must call this method from the <c>OnLoad</c> method to capture the
            PartLoader initalization. This method automatically detects the game loading phase, so it's
            safe to call it in every <c>OnLoad</c> inovacation.
            </para>
            </remarks>
            <param name="module">The module to load the data for.</param>
            <param name="cfgNode">The config node, passed by the game to the module.</param>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
            <seealso cref="F:KSPDev.ConfigUtils.StdPersistentGroups.PartConfigLoadGroup"/>
            <seealso cref="M:KSPDev.ConfigUtils.ConfigAccessor.CopyPartConfigFromPrefab(PartModule)"/>
            <example>
            <code source="Examples/ConfigUtils/ConfigAccessor-Examples.cs" region="ReadPartConfigExample"/>
            </example>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.CopyPartConfigFromPrefab(PartModule)">
            <summary>Copies the custom part fields from the prefab into the instance.</summary>
            <remarks>
            The consumer code must call this method from the <c>OnAwake</c> method to ensure the custom
            fields are properly intialized.
            </remarks>
            <param name="tgtModule">The module to copy the fields into.</param>
            <seealso cref="M:KSPDev.ConfigUtils.ConfigAccessor.ReadPartConfig(PartModule,ConfigNode)"/>
            <example>
            <code source="Examples/ConfigUtils/ConfigAccessor-Examples.cs" region="ReadPartConfigExample"/>
            </example>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.WriteFieldsIntoFile(System.String,System.Type,System.Object,System.String,System.Boolean,System.String)">
            <summary>Writes values of the annotated persistent fields into a file.</summary>
            <remarks>
            All persitent values are <b>added</b> into the file provided. I.e. if node had already had a
            value being persited then it either overwritten (ordinary fields) or extended (collection
            fields).
            </remarks>
            <param name="filePath">
            A relative or an absolute path to the file. It's resolved via
            <see cref="M:KSPDev.FSUtils.KspPaths.MakeAbsPathForGameData(System.String[])"/>.
            </param>
            <param name="rootNodePath">
            A path to the node in the file where the data should be written. If the node already exsists
            it will be deleted.
            </param>
            <param name="type">A type to write fields for.</param>
            <param name="instance">
            An instance of type <paramref name="type"/>. If it's <c>null</c> then only static fields will
            be written.
            </param>
            <param name="mergeMode">
            If <c>true</c> and the file already exists then only will be created.
            </param>
            <param name="group">A group tag (see <see cref="T:KSPDev.ConfigUtils.BasePersistentFieldAttribute"/>).</param>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.WriteFieldsIntoNode(ConfigNode,System.Type,System.Object,System.String)">
            <summary>Writes values of the annotated persistent fields into a config node.</summary>
            <remarks>All persitent values are <b>added</b> into the node provided. I.e. if node had
            already had a value being persited then it either overwritten (ordinary fields) or extended
            (collection fields).</remarks>
            <param name="node">A config node to write data into.</param>
            <param name="type">A type to write fields for.</param>
            <param name="instance">An instance of type <paramref name="type"/>. If it's <c>null</c> then
            only static fields will be written.</param>
            <param name="group">A group tag (see <see cref="T:KSPDev.ConfigUtils.BasePersistentFieldAttribute"/>).</param>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.WriteFieldsFromType(System.Type,System.Object,System.String)">
            <summary>
            Writes persistent fields into the config files specified by the class annotation.
            </summary>
            <remarks>Method updates the config file(s) by preserving top level nodes that are not
            specified as targets for the requested group.
            <para>Note, that fields cannot be writtent into database. Such annotations will be skipped
            during the save.</para>
            </remarks>
            <param name="type">A type to write fields for.</param>
            <param name="instance">An instance of type <paramref name="type"/>. If it's <c>null</c> then
            only static fields will be written.</param>
            <param name="group">A group to write fields for. If <c>null</c> then all groups that are
            defined in the class annotation via <see cref="T:KSPDev.ConfigUtils.PersistentFieldsFileAttribute"/> will be
            written.</param>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldsFileAttribute"/>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetValueByPath(ConfigNode,System.String)">
            <summary>Reads a value from config node by a path.</summary>
            <param name="node">A node to read data from.</param>
            <param name="path">A string path to the value. Path components should be separated by '/'
            symbol.</param>
            <returns>String value or <c>null</c> if path or value is not present in the
            <paramref name="node"/>.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetValueByPath(ConfigNode,System.String[])">
            <summary>Reads a value from config node by a path.</summary>
            <param name="node">A node to read data from.</param>
            <param name="pathKeys">An array of values that makes the full path. First node in the array is
            the top most component of the path.</param>
            <returns>String value or <c>null</c> if path or value is not present in the
            <paramref name="node"/>.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetValuesByPath(ConfigNode,System.String)">
            <summary>Reads repeated values from config node by a path.</summary>
            <param name="node">A node to read data from.</param>
            <param name="path">A string path to the values. Path components should be separated by '/'
            symbol.</param>
            <returns>Array of string values or <c>null</c> if path is not present in the
            <paramref name="node"/>.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetValuesByPath(ConfigNode,System.String[])">
            <summary>Reads repeated values from config node by a path.</summary>
            <param name="node">A node to read data from.</param>
            <param name="pathKeys">An array of values that makes the full path. First node in the array is
            the top most component of the path.</param>
            <returns>Array of string values or <c>null</c> if path is not present in the
            <paramref name="node"/>.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetNodeByPath(ConfigNode,System.String,System.Boolean)">
            <summary>Reads a node from config node by a path.</summary>
            <param name="node">A node to read data from.</param>
            <param name="path">A string path to the node. Path components should be separated by '/'
            symbol.</param>
            <param name="createIfMissing">If <c>true</c> than unknown nodes in the path will be
            created.</param>
            <returns>Config node or <c>null</c> if path or node is not present in the
            <paramref name="node"/>.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetNodeByPath(ConfigNode,System.String[],System.Boolean)">
            <summary>Reads a node from config node by a path.</summary>
            <param name="node">A node to read data from.</param>
            <param name="pathKeys">An array of values that makes the full path. First node in the array is
            the top most component of the path.</param>
            <param name="createIfMissing">If <c>true</c> than unknown nodes in the path will be
            created.</param>
            <returns>Config node or <c>null</c> if path or node is not present in the
            <paramref name="node"/>. Returns <paramref name="node"/> if path is empty array.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetNodesByPath(ConfigNode,System.String)">
            <summary>Reads repeated nodes from config node by a path.</summary>
            <param name="node">A node to read data from.</param>
            <param name="path">A string path to the nodes. Path components should be separated by '/'
            symbol.</param>
            <returns>Array of nodes or <c>null</c> if path is not present in the
            <paramref name="node"/>.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetNodesByPath(ConfigNode,System.String[])">
            <summary>Reads repeated nodes from config node by a path.</summary>
            <param name="node">A node to read data from.</param>
            <param name="pathKeys">An array of values that makes the full path. First node in the array is
            the top most component of the path.</param>
            <returns>Array of nodes or <c>null</c> if path is not present in the
            <paramref name="node"/>.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.SetValueByPath(ConfigNode,System.String,System.String)">
            <summary>Sets a value in config node by a path.</summary>
            <param name="node">A node to set data in.</param>
            <param name="path">A string path to the node. Path components should be separated by '/'
            symbol.</param>
            <param name="value">A string value to store.</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.SetValueByPath(ConfigNode,System.String[],System.String)">
            <summary>Sets a value in config node by a path.</summary>
            <param name="node">A node to set data in.</param>
            <param name="pathKeys">An array of values that makes the full path. First node in the array is
            the top most component of the path.</param>
            <param name="value">A string value to store.</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.SetNodeByPath(ConfigNode,System.String,ConfigNode)">
            <summary>Sets a node in config node by a path.</summary>
            <param name="node">A node to set data in.</param>
            <param name="path">A string path to the node. Path components should be separated by '/'
            symbol.</param>
            <param name="value">A config node to store.</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.SetNodeByPath(ConfigNode,System.String[],ConfigNode)">
            <summary>Sets a node in config node by a path.</summary>
            <param name="node">A node to set data in.</param>
            <param name="pathKeys">An array of values that makes the full path. First node in the array is
            the top most component of the path.</param>
            <param name="value">A config node to store.</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.AddValueByPath(ConfigNode,System.String,System.String)">
            <summary>Adds a repeated value in config node by a path.</summary>
            <param name="node">A node to set data in.</param>
            <param name="path">A string path to the nodes. Path components should be separated by '/'
            symbol.</param>
            <param name="value">A string value to add into the node.</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.AddValueByPath(ConfigNode,System.String[],System.String)">
            <summary>Adds a repeated value in config node by a path.</summary>
            <param name="node">A node to set data in.</param>
            <param name="pathKeys">An array of values that makes the full path. First node in the array is
            the top most component of the path.</param>
            <param name="value">A string value to add into the node.</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.AddNodeByPath(ConfigNode,System.String,ConfigNode)">
            <summary>Adds a repeated node in the config by a path.</summary>
            <param name="node">A node to set data in.</param>
            <param name="path">A string path to the nodes. Path components should be separated by '/'
            symbol.</param>
            <param name="value">A config node to add.</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.AddNodeByPath(ConfigNode,System.String[],ConfigNode)">
            <summary>Adds a repeated node in the config by a path.</summary>
            <param name="node">A node to set data in.</param>
            <param name="pathKeys">An array of values that makes the full path. First node in the array is
            the top most component of the path.</param>
            <param name="value">A config node to add.</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.SetValueByPath``1(ConfigNode,System.String,``0,KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto)">
            <summary>
            Stores a value of arbitrary type <typeparamref name="T"/> into a config node.
            </summary>
            <param name="node">A node to set data in.</param>
            <param name="path">A string path to the node. Path components should be separated by '/'
            symbol.</param>
            <param name="value">A value to store. The <paramref name="typeProto"/> handler must know how
            to convert the value into string.</param>
            <param name="typeProto">A proto capable to handle the type of <paramref name="value"/>. If not
            set then <see cref="T:KSPDev.ConfigUtils.StandardOrdinaryTypesProto"/> is used.</param>
            <typeparam name="T">The value type to store. Type proto must be able to handle it.
            </typeparam>
            <exception cref="T:System.ArgumentException">If type cannot be handled by the proto.</exception>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.SetValueByPath``1(ConfigNode,System.String[],``0,KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto)">
            <summary>
            Stores a value of arbitrary type <typeparamref name="T"/> into a config node.
            </summary>
            <param name="node">A node to set data in.</param>
            <param name="pathKeys">An array of values that makes the full path. First node in the array is
            the top most component of the path.</param>
            <param name="value">A value to store. The <paramref name="typeProto"/> handler must know how
            to convert value's type into string.</param>
            <param name="typeProto">A proto capable to handle the type of <paramref name="value"/>. If not
            set then <see cref="T:KSPDev.ConfigUtils.StandardOrdinaryTypesProto"/> is used.</param>
            <typeparam name="T">The value type to store. Type proto must be able to handle it.
            </typeparam>
            <exception cref="T:System.ArgumentException">If type cannot be handled by the proto.</exception>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetValueByPath``1(ConfigNode,System.String,``0@,KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto)">
            <summary>
            Reads a value of arbitrary type <typeparamref name="T"/> from a config node.
            </summary>
            <param name="node">A node to read data from.</param>
            <param name="path">A string path to the node. Path components should be separated by '/'
            symbol.</param>
            <param name="value">A variable to read value into. The <paramref name="typeProto"/> handler
            must know how to convert value's type from string.</param>
            <param name="typeProto">A proto capable to handle the type of <paramref name="value"/>. If not
            set then <see cref="T:KSPDev.ConfigUtils.StandardOrdinaryTypesProto"/> is used.</param>
            <returns><c>true</c> if value was successfully read and stored.</returns>
            <typeparam name="T">The value type to read. Type proto must be able to handle it.
            </typeparam>
            <exception cref="T:System.ArgumentException">If type cannot be handled by the proto.</exception>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetValueByPath``1(ConfigNode,System.String[],``0@,KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto)">
            <summary>
            Reads a value of arbitrary type <typeparamref name="T"/> from a config node.
            </summary>
            <param name="node">A node to read data from.</param>
            <param name="pathKeys">An array of values that makes the full path. First node in the array is
            the top most component of the path.</param>
            <param name="value">A variable to read value into. The <paramref name="typeProto"/> handler
            must know how to convert value's type from string.</param>
            <param name="typeProto">A proto capable to handle the type of <paramref name="value"/>. If not
            set then <see cref="T:KSPDev.ConfigUtils.StandardOrdinaryTypesProto"/> is used.</param>
            <returns><c>true</c> if value was successfully read and stored.</returns>
            <typeparam name="T">The value type to read. Type proto must be able to handle it.
            </typeparam>
            <exception cref="T:System.ArgumentException">If type cannot be handled by the proto.</exception>
        </member>
        <member name="M:KSPDev.ConfigUtils.ConfigAccessor.GetPersistentFieldsFiles(System.Type,System.String)">
            <summary>Gathers and returns persistent field fields annotations.</summary>
            <param name="type">A type to lookup for the field annotations.</param>
            <param name="group">A group tag (see <see cref="T:KSPDev.ConfigUtils.PersistentFieldsFileAttribute"/>). If
            <c>null</c> then all files defined in the type are returned.</param>
            <returns>Array of persistent fields.</returns>
        </member>
        <member name="T:KSPDev.ConfigUtils.PersistentFieldsFactory">
            <summary>A helper class to gather persistent field attributes.</summary>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentFieldsFactory.GetPersistentFields(System.Type,System.Boolean,System.Boolean,System.String)">
            <summary>Gathers persitent fields for a type.</summary>
            <remarks>It will only find the persistent fields of the same Utils version!</remarks>
            <param name="type">A type of to gather persistent fields for.</param>
            <param name="needStatic">Specifies if static fields need to be returned.</param>
            <param name="needInstance">Specifies if non-static fields need to be returned.</param>
            <param name="group">A filter group for the persitent fields. Note that group is ignored for
            the inner fields of a compound type.</param>
            <returns>List of persitent fields.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentFieldsFactory.FindAnnotatedFields(System.Reflection.IReflect,System.Boolean,System.Boolean,System.String)">
            <summary>Finds and returns peristent fields of the requested group.</summary>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentFieldsFactory.FieldFilter(System.Reflection.ICustomAttributeProvider,System.String)">
            <summary>Filters only persitent fields of the required group.</summary>
        </member>
        <member name="T:KSPDev.ConfigUtils.PersistentField">
            <summary>Descriptor of a persitent field.</summary>
        </member>
        <member name="F:KSPDev.ConfigUtils.PersistentField.fieldInfo">
            <summary>Annotated fields metadata.</summary>
        </member>
        <member name="F:KSPDev.ConfigUtils.PersistentField.cfgPath">
            <summary>Parsed configuration paths.</summary>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentField.#ctor(System.Reflection.FieldInfo,KSPDev.ConfigUtils.PersistentFieldAttribute)">
            <param name="fieldInfo">An annotated field metadata.</param>
            <param name="fieldAttr">An annotation of the field.</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentField.WriteToConfig(ConfigNode,System.Object)">
            <summary>Writes the field into a config node.</summary>
            <remarks>
            This method is not expected to fail since converting any type into string is expected to
            successful on any value.
            </remarks>
            <param name="node">The node to write the state to.</param>
            <param name="instance">
            The owner of the field. Can be <c>null</c> for the static fields.
            </param>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentField.ReadFromConfig(ConfigNode,System.Object)">
            <summary>Reads the field from a config node.</summary>
            <remarks>
            The readonly fields will be refused. In spite of they can be changed via reflections, there
            are the edge cases, which this code won't handle. 
            </remarks>
            <param name="node">The node to read the state from.</param>
            <param name="instance">
            The owner of the field. It can be <c>null</c> for the static fields.
            </param>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentField.SerializeCompoundFieldsToNode(System.Object)">
            <summary>Makes a config node from the compound type fields.</summary>
            <param name="instance">Owner of the fields. Can be <c>null</c> for static fields.</param>
            <returns>New configuration node with the data.</returns>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentField.DeserializeCompoundFieldsFromNode(ConfigNode,System.Object)">
            <summary>Sets a compound type field values from the config node.</summary>
            <param name="node">The node to read values from. Cannot be <c>null</c>.</param>
            <param name="instance">The owner of the fields. Cannot be <c>null</c>.</param>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentField.ReadCollectionFromConfig(ConfigNode,System.Object)">
            <summary>Restores a collection from the config node.</summary>
            <remarks>This method never throws.</remarks>
            <param name="node">The node to read the state from.</param>
            <param name="instance">
            The owner of the field. It can be <c>null</c> for the static fields.
            </param>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentField.ReadOrdinaryFromConfig(ConfigNode,System.Object)">
            <summary>
            Restores an ordinary value collection from the config node. The type can be compound.
            </summary>
            <remarks>This method never throws.</remarks>
            <param name="node">The node to read the state from.</param>
            <param name="instance">
            The owner of the field. It can be <c>null</c> for the static fields.
            </param>
        </member>
        <member name="T:KSPDev.ConfigUtils.PersistentFieldAttribute">
            <summary>A simple attribute for the fields that need (de)serialization.</summary>
            <remarks>
            <para>
            The readonly fields cannot be restored from a persistent state. However, they can be written
            out.
            </para>
            <para>
            By default the ordinal values are handled via <see cref="T:KSPDev.ConfigUtils.StandardOrdinaryTypesProto"/>
            and the collection fields via <see cref="T:KSPDev.ConfigUtils.GenericCollectionTypeProto"/>. These proto handlers can
            be changed in the annotation by assigning properties
            <see cref="P:KSPDev.ConfigUtils.BasePersistentFieldAttribute.ordinaryTypeProto"/> and/or
            <see cref="P:KSPDev.ConfigUtils.BasePersistentFieldAttribute.collectionTypeProto"/>.
            </para>
            </remarks>
            <example>
            Below is a simple usage of the attribute.
            <code><![CDATA[
            class ClassWithPersistentFields {
              [PersistentField("my/listField", isCollection = true)]
              private List<string> sampleList = new List<string>();
            
              internal struct ComplexType {
                [PersistentField("val1", group = "nevermind")]
                public bool boolVal;
                [PersistentField("val2")]
                public Color colorVal;
              }
            
              [PersistentField("my/setField", isCollection = true, group = "abc")]
              private HashSet<ComplexType> sampleSet = new HashSet<ComplexType>();
            
              void SaveConfigs() {
                // Save a default group of fields: only field "sampleList" qualifies.
                ConfigAccessor.WriteFieldsIntoFile("settings.cfg", instance: this);
                /* The following structure in the file will be created:
                 * {
                 *   my
                 *   {
                 *     listField: string1
                 *     listField: string2
                 *   }
                 * }
                 */
            
                // Save a specific group of fields: only field "sampleSet" belongs to group "abc".
                sampleSet.Add(new ComplexType() { boolVal = true, colorVal = Color.black });
                sampleSet.Add(new ComplexType() { boolVal = false, colorVal = Color.white });
                ConfigAccessor.WriteFieldsIntoFile("settings.cfg", instance: this, group: "abc");
                /* The following structure in the file will be created:
                 * {
                 *     setField
                 *     {
                 *       val1: True
                 *       val2: 0,0,0,1
                 *     }
                 *     setField
                 *     {
                 *       val1: false
                 *       val2: 1,1,1,1
                 *     }
                 *   }
                 * }
                 */
              }
            }
            ]]></code>
            <para>
            Note that the group is ignored in the nested types. I.e. in <c>ComplexType</c> in this case.
            However, if <c>ComplexType</c> was an immediate target of the <c>WriteFieldsIntoFile</c> call
            then the group would be considered.
            </para>
            <para>
            Visibility of the annotated field is also important. The persistent field attributes are only
            visible in the child class if they were public or protected in the parent. The private field
            annotations are not inherited and need to be handled at the level of the declaring class.
            </para>
            <code><![CDATA[
            class Parent {
              [PersistentField("parent_private")]
              private int field1 = 1;
            
              [PersistentField("parent_protected")]
              protected int field2 = 2;
            
              [PersistentField("parent_public")]
              public int field3 = 3;
            }
            
            class Child : Parent {
              [PersistentField("child_private")]
              private int field1 = 10;
            
              void SaveConfig() {
                // Save all fields in the inherited type. 
                ConfigAccessor.WriteFieldsIntoFile("settings.cfg", instance: this);
                /* The following structure in the file will be created:
                 * {
                 *     parent_protected: 2
                 *     parent_public: 3
                 *     child_private: 10
                 * }
                 */
            
                // Save all fields in the base type. 
                ConfigAccessor.WriteFieldsIntoFile("settings.cfg", instance: (Parent) this);
                /* The following structure in the file will be created:
                 * {
                 *     parent_private: 1
                 *     parent_protected: 2
                 *     parent_public: 3
                 * }
                 */
              }
            }
            ]]></code>
            <para>
            The code above implies that in a common case unsealed class should put the private fields in a
            group other than default to avoid settings collision.
            </para>
            <para>
            When the type of the field is different from a primitive C# type or a common Unity 4 type you
            may need to provide a custom value handler to deal with (de)serializing. E.g. for an ordinary
            type it may look like this:
            </para>
            <code><![CDATA[
            class CustomType {
              [PersistentField("my/custom/type", ordinaryTypeProto = typeof(MyTypeProto))]
              private MyType field1;
            }
            ]]></code>
            <para>
            Or your custom class can implement a KSP interface <see cref="T:IConfigNode"/>, and it will be
            invoked during the field saving and restoring.
            </para>
            <code><![CDATA[
            class NodeCustomType : IConfigNode {
              public virtual void Save(ConfigNode node) {
              }
              public virtual void Load(ConfigNode node) {
              }
            }
            ]]></code>
            <para>
            In case of your type is really simple, and you can serialize it into a plain string, you may
            choose to implement <see cref="T:KSPDev.ConfigUtils.IPersistentField"/> instead. It works in a similar way but the
            source/target of the persistense is a string instead of a config node.
            </para>
            <para>
            If your custom type is a collection that cannot be handled by the standard proto you can provide
            your own collection proto handler. Note that if you do then the annotated field will be treated
            as a collection. In fact, when you set <c>isCollection = true</c> what actually happens is just
            assigning <see cref="T:KSPDev.ConfigUtils.GenericCollectionTypeProto"/> as a collection proto handler.
            </para>
            <code><![CDATA[
            class CustomTypes {
              [PersistentField("my/custom/type", collectionTypeProto = typeof(MyCollectionProto))]
              private MyCollection field1;
            }
            ]]></code>
            For more examples on custom proto handlers see <see cref="T:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto"/> and
            <see cref="T:KSPDev.ConfigUtils.AbstractCollectionTypeProto"/>.
            </example>
            <seealso cref="T:KSPDev.ConfigUtils.ConfigAccessor"/>
            <seealso cref="T:KSPDev.ConfigUtils.AbstractOrdinaryValueTypeProto"/>
            <seealso cref="T:KSPDev.ConfigUtils.AbstractCollectionTypeProto"/>
            <seealso cref="T:KSPDev.ConfigUtils.IPersistentField"/>
            <seealso href="https://kerbalspaceprogram.com/api/interface_i_config_node.html">KSP: IConfigNode</seealso>
        </member>
        <member name="M:KSPDev.ConfigUtils.PersistentFieldAttribute.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:KSPDev.ConfigUtils.PersistentFieldAttribute.isCollection">
            <summary>Specifies if the annotated field is a collection of values.</summary>
            <value><c>true</c> if the field is a collection.</value>
        </member>
        <member name="T:KSPDev.ConfigUtils.KspTypesProto">
            <summary>A proto for handling all KSP specific types.</summary>
        </member>
        <member name="M:KSPDev.ConfigUtils.KspTypesProto.CanHandle(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.ConfigUtils.KspTypesProto.SerializeToString(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.ConfigUtils.KspTypesProto.ParseFromString(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:KSPDev.ConfigUtils.StdPersistentGroups">
            <summary>Group names that have special meaning.</summary>
            <seealso cref="T:KSPDev.ConfigUtils.ConfigAccessor"/>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="F:KSPDev.ConfigUtils.StdPersistentGroups.Default">
            <summary>A public group that can be saved/loaded on every game scene.</summary>
            <remarks>
            By the contract any caller can save/load this group at any time. If the class declares the
            persistent fields with a specific save/load logic, then they need to have a group different
            from the default.
            </remarks>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="F:KSPDev.ConfigUtils.StdPersistentGroups.PartPersistant">
            <summary>
            A public group that designates the fields that are saved/loaded during the vessel persistense.
            </summary>
            <remarks>
            The fields of this group are expected to be loaded/saved from the related <c>PartModule</c>
            methods: <c>OnSave</c> and <c>OnLoad</c>. Dealing with them outside of this logic is highly
            discouraged.
            </remarks>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="F:KSPDev.ConfigUtils.StdPersistentGroups.PartConfigLoadGroup">
            <summary>A public group for the feilds that needs to be loaded from a part config.</summary>
            <remarks>
            It's a very special group, never deal with it directly. The consumer code is only allowed to
            use this group when defining the persistent fields via annotations.  
            </remarks>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
            <seealso cref="M:KSPDev.ConfigUtils.ConfigAccessor.ReadPartConfig(PartModule,ConfigNode)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.StdSpecTags">
            <summary>Standard localization tag specification.</summary>
            <remarks>The specification tells which property of the localizable entity to affect.</remarks>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableItemAttribute"/>
            <seealso cref="M:KSPDev.GUIUtils.LocalizationLoader.LoadItemsInModule(PartModule)"/>
        </member>
        <member name="F:KSPDev.GUIUtils.StdSpecTags.Units">
            <summary>
            Specification for the <see cref="T:KSPField"/> <c>guiUnits</c> localization. 
            </summary>
            <remarks>
            Use it when specifying a <see cref="T:KSPDev.GUIUtils.LocalizableItemAttribute"/> for a field
            with the units.
            </remarks>
            <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemField_WithUnits"/></example>
            <item name="T:KSPField">
  <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_field.html">KSP: KSPField</seealso>
</item>
        </member>
        <member name="T:KSPDev.Extensions.DictExtensions">
            <summary>Helper extensions for the generic dictionary container.</summary>
            <example><code source="Examples/Extensions/DictExtensions-Examples.cs" region="SetDefaultAddToDict"/></example>
        </member>
        <member name="M:KSPDev.Extensions.DictExtensions.SetDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Returns a value from the dictionary by a key. If the key is not present yet, then a new
            default entry is created and returned.
            </summary>
            <param name="dict">The dictionary to get value from.</param>
            <param name="key">The key to lookup.</param>
            <typeparam name="K">The type of the dictionary key.</typeparam>
            <typeparam name="V">The type of the dictionary value.</typeparam>
            <returns>Either an existing value for the key or a default instance of the value.</returns>
            <example>
            If there is a dictionary which values are collections or a class, then a special code is
            always needed to properly access this dictionary:
            <code source="Examples/Extensions/DictExtensions-Examples.cs" region="ClassicAddToDict"/>
            With this extension the key can safely be accessed with just one call:   
            <code source="Examples/Extensions/DictExtensions-Examples.cs" region="SetDefaultAddToDict"/>
            </example>
        </member>
        <member name="T:KSPDev.Extensions.PosAndRotExtensions">
            <summary>Helper extensions to deal with <see cref="T:KSPDev.Types.PosAndRot"/> type.</summary>
            <example>
            <code source="Examples/Extensions/PosAndRotExtensions-Examples.cs" region="ToLocal"/>
            <code source="Examples/Extensions/PosAndRotExtensions-Examples.cs" region="ToWorld"/>
            </example>
        </member>
        <member name="M:KSPDev.Extensions.PosAndRotExtensions.InverseTransformPosAndRot(UnityEngine.Transform,KSPDev.Types.PosAndRot)">
            <summary>
            Transforms a pos&amp;rot object from the world space to the local space. The opposite to
            <see cref="M:KSPDev.Extensions.PosAndRotExtensions.TransformPosAndRot(UnityEngine.Transform,KSPDev.Types.PosAndRot)"/>.
            </summary>
            <param name="node">The node to use as a parent.</param>
            <param name="posAndRot">The object in world space.</param>
            <returns>A new pos&amp;rot object in the local space.</returns>
            <example>
            <code source="Examples/Extensions/PosAndRotExtensions-Examples.cs" region="ToLocal"/>
            </example>
        </member>
        <member name="M:KSPDev.Extensions.PosAndRotExtensions.TransformPosAndRot(UnityEngine.Transform,KSPDev.Types.PosAndRot)">
            <summary>
            Transforms a pos&amp;rot object from the local space to the world space. The opposite to
            <see cref="M:KSPDev.Extensions.PosAndRotExtensions.InverseTransformPosAndRot(UnityEngine.Transform,KSPDev.Types.PosAndRot)"/>.
            </summary>
            <param name="node">The node to use as a parent.</param>
            <param name="posAndRot">The object in local space.</param>
            <returns>A new pos&amp;rot object in the wold space.</returns>
            <example>
            <code source="Examples/Extensions/PosAndRotExtensions-Examples.cs" region="ToWorld"/>
            </example>
        </member>
        <member name="T:KSPDev.Extensions.RectExtensions">
            <summary>Helper extensions to handel Unity rectangles.</summary>
            <example><code source="Examples/Extensions/RectExtensions-Examples.cs" region="Intersect"/></example>
        </member>
        <member name="M:KSPDev.Extensions.RectExtensions.Intersect(UnityEngine.Rect,UnityEngine.Rect)">
            <summary>Returns the intersection of the specified rectangles.</summary>
            <param name="rect1">The first rectangle to compare.</param>
            <param name="rect2">The second rectangle to compare.</param>
            <returns>The intersection rectangle.</returns>
            <example><code source="Examples/Extensions/RectExtensions-Examples.cs" region="Intersect"/></example>
        </member>
        <member name="T:KSPDev.FSUtils.KspPaths">
            <summary>A helper class to deal with plugins file structure.</summary>
        </member>
        <member name="F:KSPDev.FSUtils.KspPaths.pluginsRootFolder">
            <summary>Standard plug-ins folder.</summary>
        </member>
        <member name="F:KSPDev.FSUtils.KspPaths.PluginFolderName">
            <summary>A standard directory name to place the mod's binary.</summary>
            <remarks>
            This name is not mandatory, and is not enforced by the game's core. It's a community adopted
            name.
            </remarks>
        </member>
        <member name="F:KSPDev.FSUtils.KspPaths.PluginDataFolderName">
            <summary>
            A standard name to place the configs that should be ignored by the game's core.
            </summary>
            <remarks>
            The files in this directory will be ignored by the game during the loading process. This
            is a common palce to put tghe mod's settings. A directory with such name can be placed
            anywhere within the <c>GameData</c> folder. However, it's usually a subfolder of
            <see cref="F:KSPDev.FSUtils.KspPaths.PluginFolderName"/>.
            </remarks>
        </member>
        <member name="M:KSPDev.FSUtils.KspPaths.MakeAbsPathForGameData(System.String[])">
            <summary>
            Makes full absolute path from the provided relative path in the game's <c>GameData</c> folder.
            </summary>
            <remarks>
            If joining of all the provided parts gives a full path then it's only normalized. In case of
            path is relative it's resolved against game's <c>GameData</c> folder.
            <para>Note that method doesn't care if the path exists.</para>
            </remarks>
            <param name="pathParts">Path parts for an absolute or relative path.</param>
            <returns>
            Absolute path. All relative casts (e.g. '..') will be resolved, and all
            directory separators will be translated to the platform format (e.g. '/' will become '\' on
            Windows). 
            </returns>
        </member>
        <member name="M:KSPDev.FSUtils.KspPaths.NormalizePath(System.String)">
            <summary>
            Normalizes path by resolving all upcasts. Works for both relative and absolute paths.
            </summary>
            <remarks>Note that method doesn't care if the path exists.</remarks>
            <param name="path">Path to normalize.</param>
            <returns>
            Path with no <c>.</c> or <c>..</c> casts. All directory separators will be translated to
            <c>/</c> regardless to the platform settings.
            </returns>
            <seealso cref="M:KSPDev.FSUtils.KspPaths.MakeRelativePathToGameData(System.String[])"/>
        </member>
        <member name="M:KSPDev.FSUtils.KspPaths.MakeRelativePathToGameData(System.String[])">
            <summary>Returns path relative to the game's GameData folder.</summary>
            <remarks>
            Note that method doesn't care if the path exists. The returned path will always use <c>/</c>
            as directory separator regardless to the platform.
            </remarks>
            <param name="pathParts">Path parts tp consutruct an absolute or relative path.</param>
            <returns>
            Relative path. All relative casts (e.g. '..') will be resolved, and all
            directory separators will be translated to <c>/</c> regardless to the platform settings.
            </returns>
            <example>
            Let's say mod's exact location is not known (e.g. as it is for MiniAVC) and the mod needs to
            load a texture. In order to do it the mod needs to know a <c>GameData</c> relative path which
            can be used as a prefix to the texture. Below is a sample code that figures it out.
            <code><![CDATA[
            var assembly = Assembly.GetExecutingAssembly();
            var relPath = KspPaths.MakeRelativePathToGameData(assembly.Location);
            Debug.LogWarningFormat("Assembly {0} is loaded from {1}", assembly.FullName, relPath);
            // Pretend the mod's DLL lives in 'Plugins' subfolder.
            var textureFolder = KspPaths.NormalizePath(Path.GetDirectoryName(relPath) + "/../Textures");
            // Get a texture from 'Textures' folder that lives in the mods's root.
            var texture = GameDatabase.Instance.GetTexture(textureFolder + "/MyTexture.png", false);
            ]]></code>
            </example>
            <seealso cref="M:KSPDev.FSUtils.KspPaths.NormalizePath(System.String)"/>
        </member>
        <member name="M:KSPDev.FSUtils.KspPaths.GetModsPath(System.Type)">
            <summary>Returns a relative game's path to the mod's root folder.</summary>
            <example>
            <para>
            Given the mod's assembly was loaded from
            <c>GameData/ModFolder1/ModFolder2/Plugins/mod.dll</c>, the returned path will be
            <c>GameData/ModFolder1/ModFolder2/</c> because of <c>Plugins</c> folder name is considered to
            be a common name for the mod's  binaries.
            </para>
            <para>
            If the mod's DLL is located in the folder other than <c>Plugins</c>, then just the parent
            folder is returned. E.g. for <c>GameData/ModFolder1/ModFolder2/MyDLLs/mod.dll</c>, the result
            would be <c>GameData/ModFolder1/ModFolder2/MyDLLs/</c>.
            </para>
            </example>
            <param name="target">The target to resolve the assembly for.</param>
            <returns>
            An absolute path. There is always a trailing directory separator symbol.
            </returns>
        </member>
        <member name="M:KSPDev.FSUtils.KspPaths.GetModsPath(System.Object)">
            <inheritdoc cref="M:KSPDev.FSUtils.KspPaths.GetModsPath(System.Type)"/>
        </member>
        <member name="M:KSPDev.FSUtils.KspPaths.GetModsDataFilePath(System.Object,System.String,System.Boolean,System.String)">
            <summary>Returns a relative game's path to the file located in the data folder.</summary>
            <param name="obj">The object instance to use to resolve the mod's assembly.</param>
            <param name="fileName">The data file name.</param>
            <param name="createMissingDirs">
            Instructs the method to create all the directories and subdirectories in the specified path,
            should they not already exist.
            </param>
            <param name="subFolder">The optional sub-folder name to add to the path.</param>
            <returns>An absolute path.</returns>
        </member>
        <member name="P:KSPDev.FSUtils.KspPaths.pluginsRoot">
            <summary>Returns full path to the plugins root folder (a.k.a. <c>GameData</c>).</summary>
            <value>The full path to the plugins folder.</value>
        </member>
        <member name="T:KSPDev.GUIUtils.GUILayoutButtons">
            <summary>Utility class to help building GUI layout buttons.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.GUILayoutButtons.Push(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[],System.Action,System.Action,KSPDev.GUIUtils.GuiActionsList)">
            <summary>Makes a button that fires a callback when pressed or released.</summary>
            <remarks>
            The callbacks are only fired once for every state change, and are guarnteed to not be called
            during the layout phase. The callback is called *after* the state is updated. 
            </remarks>
            <param name="btnState">The current press state of the button.</param>
            <param name="guiCnt">The GUI content to present as the button's caption.</param>
            <param name="style">The GUI style of the control.</param>
            <param name="options">
            The GUILayout options to apply to the control. It can be <c>null</c>.
            </param>
            <param name="fnPush">
            The callback to call when the button is pressed. Can be <c>null</c>.
            </param>
            <param name="fnRelease">
            The callback to call when the button is released. Can be <c>null</c>.
            </param>
            <param name="actionsList">
            The action list to add to use to fire a callback. If the list is onitted, then the callback is
            fired right away.
            </param>
            <returns>The new button press state.</returns>
            <seealso cref="T:KSPDev.GUIUtils.GuiActionsList"/>
        </member>
        <member name="M:KSPDev.GUIUtils.GUILayoutButtons.Toggle(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[],System.Action,System.Action,KSPDev.GUIUtils.GuiActionsList)">
            <summary>Makes a toggle control that fires a callback when the state changes.</summary>
            <remarks>
            The callbacks are only fired once for every state change, and are guaranteed to not be called
            during the layout phase. The callback is called *after* the state is updated.
            </remarks>
            <param name="btnState">The current toggle state.</param>
            <param name="guiCnt">The GUI content to present as the button's caption.</param>
            <param name="style">The GUI style of the control.</param>
            <param name="options">
            The GUILayout options to apply to the control. It can be <c>null</c>.
            </param>
            <param name="fnOn">
            The callback to call when the control is checked. Can be <c>null</c>.
            </param>
            <param name="fnOff">The callback to call when the control is checked. Can be <c>null</c>.
            </param>
            <param name="actionsList">
            The action list to add to use to fire a callback. If the list is onitted, then the callback is
            fired right away.
            </param>
            <returns>The new button toggle state.</returns>
            <seealso cref="T:KSPDev.GUIUtils.GuiActionsList"/>
        </member>
        <member name="T:KSPDev.GUIUtils.GUILayoutStringTable">
            <summary>Utility class to draw a simple table with the text colum contents.</summary>
            <remarks>
            <para>
            This table cannot hold non-string content. It keeps all the columns to be of the same, and the
            size is adjusted to the maximum column's size in the rows. There is a one frame delay between
            the content change and the column resizing, which may result in flickering if the content
            changes too frequently. The columns try to take as small space as possible, so defining the
            minimum size may be a good bet.
            </para>
            <para>
            This class is designed to be called on every frame. It's heavily performance optimized.
            </para>
            </remarks>
        </member>
        <member name="F:KSPDev.GUIUtils.GUILayoutStringTable.currentIndex">
            <summary>Index of the curently rendered column.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.GUILayoutStringTable.columnWidths">
            <summary>Current frame maximum widths of the columns.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.GUILayoutStringTable.lastFrameColumnWidths">
            <summary>The maximum widths of the columns from the previous frame.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.GUILayoutStringTable.#ctor(System.Int32)">
            <summary>Creates a table of the specified column width.</summary>
            <remarks>
            It's OK to render more columns than reserved. They won't resized, but it's not an error.
            </remarks>
            <param name="columns">The number of columns to track.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.GUILayoutStringTable.UpdateFrame">
            <summary>Updates the table state each frame toremember the best column size values.</summary>
            <remarks>
            This method is only interested in the <c>EventType.Layout</c> phase, so no need to call it on
            each GUI event when there is a cheap way to detect it.
            </remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.GUILayoutStringTable.StartNewRow">
            <summary>Tells that a new row is about to be rendered.</summary>
            <remarks>Call it before every new row.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.GUILayoutStringTable.AddTextColumn(System.String,UnityEngine.GUIStyle)">
            <summary>Adds a text column into the table.</summary>
            <param name="text">The text to add.</param>
            <param name="style">
            The style to apply to the text. If not set, then <c>GUI.skin.label</c> is used.
            </param>
        </member>
        <member name="M:KSPDev.GUIUtils.GUILayoutStringTable.AddTextColumn(System.String,KSPDev.GUIUtils.LocalizableMessage,UnityEngine.GUIStyle)">
            <summary>Adds a text column into the table.</summary>
            <param name="text">The text to add.</param>
            <param name="message">The localizable message to get the minimum size from.</param>
            <param name="style">
            The style to apply to the text. If not set, then <c>GUI.skin.label</c> is used.
            </param>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableMessage"/>
        </member>
        <member name="M:KSPDev.GUIUtils.GUILayoutStringTable.AddTextColumn(System.String,System.String,UnityEngine.GUIStyle)">
            <summary>Adds a text column into the table with a value tooltip.</summary>
            <param name="text">The text to add.</param>
            <param name="tooltip">
            The tooltip for the column value. Note, that the tooltip is not handled by the table, it gets
            rendered by the Unity GUI functionality, which may need to be configured.
            </param>
            <param name="style">
            The style to apply to the text. If not set, then <c>GUI.skin.label</c> is used.
            </param>
        </member>
        <member name="M:KSPDev.GUIUtils.GUILayoutStringTable.AddTextColumn(System.String,System.String,KSPDev.GUIUtils.LocalizableMessage,UnityEngine.GUIStyle)">
            <summary>Adds a text column into the table with a value tooltip.</summary>
            <param name="text">The text to add.</param>
            <param name="tooltip">
            The tooltip for the column value. Note, that the tooltip is not handled by the table, it gets
            rendered by the Unity GUI functionality, which may need to be configured.
            </param>
            <param name="message">The localizable message to get the minimum size from.</param>
            <param name="style">
            The style to apply to the text. If not set, then <c>GUI.skin.label</c> is used.
            </param>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableMessage"/>
        </member>
        <member name="M:KSPDev.GUIUtils.GUILayoutStringTable.AddTextColumn(UnityEngine.GUIContent,UnityEngine.GUIStyle,System.Single,System.Single)">
            <summary>Adds a content into the table column.</summary>
            <remarks>
            When possible, this method should be preferred over the other methods, which are simply the
            shortcuts to this one.</remarks>
            <param name="content">The text/tooltip content of the column to add.</param>
            <param name="style">The style to apply to the text.</param>
            <param name="minWidth">The minimum width of the column.</param>
            <param name="maxWidth">The maximum width of the column.</param>
        </member>
        <member name="T:KSPDev.GUIUtils.IHasGUI">
            <summary>Generic interface for the modules that implement a GUI events handling.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.IHasGUI.OnGUI">
            <summary>A callback which is called for every GUI event.</summary>
            <remarks>
            <para>
            On the every frame update Unity sends at least two events to every handler:
            <see cref="F:UnityEngine.EventType.Layout"/> and <see cref="F:UnityEngine.EventType.Repaint"/>. There can be more input
            events sent. The implementation must not change the number of controls in the view after the
            layout event.
            </para>
            <para>
            The modules don't need to implement this intefrace to be notified. It's called by the Unity
            core via messanging. However, implementing the interface make the inheritance and the overall
            code maintainability better.
            </para>
            </remarks>
        </member>
        <member name="T:KSPDev.GUIUtils.IsLocalizableModule">
            <summary>Generic interface for the modules that manage own localizable items.</summary>
            <remarks>
            The "item" can be anything. If the module pays special attention to deal with the "items", then
            it should implement this interface so that the notification could be sent when the language has
            changed (or updated). Here are some examples of the localizable items:
            <list type="bullet">
            <item>
            KSP events, actions or fields that are attributed with <see cref="T:KSPDev.GUIUtils.LocalizableItemAttribute"/>.
            The module would want to call the <see cref="M:KSPDev.GUIUtils.LocalizationLoader.LoadItemsInModule(PartModule)"/> method to
            have the strings updated.
            </item>
            <item>Cached strings. The module would want to refresh the cache.</item>
            <item>
            Dynamically created part menu items. The module would want to recreate them. If that's the case
            it's always better to implement <see cref="T:KSPDev.GUIUtils.IHasContextMenu"/>, and then just call the update
            method.
            </item>
            </list>
            </remarks>
            <example><code source="Examples/GUIUtils/LocalizationLoader-Examples.cs" region="LocalizationLoaderDemo2"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.IsLocalizableModule.LocalizeModule">
            <summary>A callback which is called when the localization vesion has changed.</summary>
            <remarks>
            Unless the implementing class is <i>sealed</i>, the method must be declared as <i>virtual</i>.
            The descendants may want to react on the callback as well.
            </remarks>
            <example><code source="Examples/GUIUtils/LocalizationLoader-Examples.cs" region="LocalizationLoaderDemo2"/></example>
        </member>
        <member name="T:KSPDev.GUIUtils.MessageLookup`1">
            <summary>Holds a mapping of a value to a localized message.</summary>
            <typeparam name="T">Type of the key. It must be non-nullable.</typeparam>
            <remarks>
            <para>
            Use it when a definite set of values of the same kind needs to be mapped to the localized
            strings. A good example of such mapping is a localization of the enum type values. However, for
            this class the key type doesn't need to be enum. It can be any number, or even a struct. It
            cannot be a string, though.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <example><code source="Examples/GUIUtils/MessageLookup-Examples.cs" region="MessageLookupDemo_Simple"/></example>
            <example><code source="Examples/GUIUtils/MessageLookup-Examples.cs" region="MessageLookupDemo_WithDefault"/></example>
            <example><code source="Examples/GUIUtils/MessageLookup-Examples.cs" region="MessageLookupDemo_WithStockDefault"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.MessageLookup`1.messages">
            <summary>Mapping of the key to the messages.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.MessageLookup`1.defaultMessage">
            <summary>Message to return when the requested key is not found.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.MessageLookup`1.#ctor(System.Collections.Generic.Dictionary{`0,KSPDev.GUIUtils.Message},KSPDev.GUIUtils.Message)">
            <summary>Constructs a lookup from the provided dictionary.</summary>
            <remarks>
            It's encouraged to construct the dictionary from a statically defined messages instead of
            creating them in place. The <c>LocalizationTool</c> can only find the static messages.
            </remarks>
            <param name="initDict">
            The dictionary to use as the lookup. If <c>null</c> when a new empty dictionary will be
            created for <see cref="F:KSPDev.GUIUtils.MessageLookup`1.messages"/>.
            </param>
            <param name="defaultMessage">
            The message to return from the <see cref="M:KSPDev.GUIUtils.MessageLookup`1.Lookup(`0)"/> method when no key found.
            </param>
            <seealso cref="M:KSPDev.GUIUtils.MessageLookup`1.Lookup(`0)"/>
            <example><code source="Examples/GUIUtils/MessageLookup-Examples.cs" region="MessageLookupDemo_Simple"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.MessageLookup`1.Lookup(`0)">
            <summary>Finds and returns a message for the provided key.</summary>
            <param name="key">The key to find a message for.</param>
            <returns>
            The relevant message if the <paramref name="key"/> is found. Otherwise, either the
            <see cref="F:KSPDev.GUIUtils.MessageLookup`1.defaultMessage"/> or a string represenation of the key. It's never <c>null</c>. 
            </returns>
            <example><code source="Examples/GUIUtils/MessageLookup-Examples.cs" region="MessageLookupDemo_WithDefault"/></example>
            <example><code source="Examples/GUIUtils/MessageLookup-Examples.cs" region="MessageLookupDemo_WithStockDefault"/></example>
            <seealso cref="F:KSPDev.GUIUtils.MessageLookup`1.defaultMessage"/>
        </member>
        <member name="T:KSPDev.GUIUtils.GuiColorScope">
            <summary>A utility class to render big disabled bloacks of GUI.</summary>
            <example><code source="Examples/GUIUtils/GuiColorScope-Examples.cs" region="GuiColorScopeDemo1"/></example>
            <example><code source="Examples/GUIUtils/GuiColorScope-Examples.cs" region="GuiColorScopeDemo2"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.GuiColorScope.#ctor(System.Nullable{UnityEngine.Color},System.Nullable{UnityEngine.Color},System.Nullable{UnityEngine.Color})">
            <summary>Stores the old state and sets a new one.</summary>
            <param name="color">The new color for <c>GUI.color</c>.</param>
            <param name="contentColor">The new color for <c>GUI.contentColor</c>.</param>
            <param name="backgroundColor">The new color for <c>GUI.backgroundColor</c>.</param>
            <example><code source="Examples/GUIUtils/GuiColorScope-Examples.cs" region="GuiColorScopeDemo1"/></example>
            <example><code source="Examples/GUIUtils/GuiColorScope-Examples.cs" region="GuiColorScopeDemo2"/></example>
            <seealso href="https://docs.unity3d.com/ScriptReference/GUI-color.html">Untiy3D: GUI.color</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/GUI-contentColor.html">Untiy3D: GUI.contentColor</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/GUI-backgroundColor.html">Untiy3D: GUI.backgroundColor</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.GuiColorScope.Dispose">
            <summary>Restores the colors that were set before the scope started.</summary>
        </member>
        <member name="T:KSPDev.GUIUtils.GuiEnabledStateScope">
            <summary>A utility class to render big disabled bloacks of GUI.</summary>
            <example><code source="Examples/GUIUtils/GuiEnabledStateScope-Examples.cs" region="GuiEnabledStateScopeDemo1_OnGUI"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.GuiEnabledStateScope.#ctor(System.Boolean)">
            <summary>Stores the old state and sets a new one.</summary>
            <param name="newState">The new state to set.</param>
            <example><code source="Examples/GUIUtils/GuiEnabledStateScope-Examples.cs" region="GuiEnabledStateScopeDemo1_OnGUI"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.GuiEnabledStateScope.Dispose">
            <summary>Restores the enabled state that was set before the scope started.</summary>
        </member>
        <member name="T:KSPDev.GUIUtils.GuiWindow">
            <summary>A utility class to deal with the GUI windows.</summary>
            <remarks>
            The stock window cancels dragging when the window layout is changed. It makes it useless when
            dealing with windows that can change their layout depending on the position. This method
            doesn't have this drawback. Moreover, it can tell if the window is being dragged, so that the
            code could postpone the layout update until the dragging is over. 
            </remarks>
            <example><code source="Examples/GUIUtils/GuiWindow-Examples.cs" region="GuiWindowDemo1"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.GuiWindow.dragPosition">
            <summary>Latest mouse position to which the dragged window position has updated.</summary>
            <remarks>When this field is <c>null</c>, it means no window is being dragged.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.GuiWindow.DragWindow(UnityEngine.Rect@,UnityEngine.Rect)">
            <summary>
            Makes the window movable. It's an improved version of the stock <c>GUI.DragWindow()</c>
            method.
            </summary>
            <param name="windowRect">
            The window rectangle. It must be the same instance which is passed to the
            <c>GUILayout.Window</c> method.
            </param>
            <param name="dragArea">
            The rectangle in the local windows's space that defines the dragging area. In case of it's
            out of bounds of the window rectangle, it will be clipped.
            </param>
            <returns><c>true</c> if the window is being dragged.</returns>
            <example><code source="Examples/GUIUtils/GuiWindow-Examples.cs" region="GuiWindowDemo1"/></example>
            <seealso href="https://docs.unity3d.com/ScriptReference/GUI.DragWindow.html">Untiy3D: GUI.DragWindow</seealso>
        </member>
        <member name="T:KSPDev.GUIUtils.IHasContextMenu">
            <summary>Generic interface for the modules that implement a UI context menu.</summary>
            <seealso href="https://kerbalspaceprogram.com/api/class_game_events.html#ae6daaa6f39473078514543a2f8485513">
            KPS: GameEvents.onPartActionUICreate</seealso>
            <seealso href="https://kerbalspaceprogram.com/api/class_game_events.html#a7ccbd16e2aee0176a4431f0b5f9d63e5">
            KPS: GameEvents.onPartActionUIDismiss</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.IHasContextMenu.UpdateContextMenu">
            <summary>
            A callback which is called every time the module's context menu items need to update. 
            </summary>
            <remarks>
            <para>
            When a part needs to update its context menu, it must not be doing it in the methods other
            this one. By doing the update in a single method, the part ensures there will be a
            consistency.
            </para>
            <para>
            It's very implementation dependent when and why the update is needed. However, at the very
            least this callback must be called from the <see cref="M:KSPDev.KSPInterfaces.IPartModule.OnLoad(ConfigNode)">OnLoad</see> method
            to let the module to update the state and the titles.
            </para>
            <para>
            The method implemenation must expect to be called at any arbitrary moment of the module's
            life. If there are members that can be null, then they must be checked in this method to not
            throw an NPE. A special attention should be paid in the implementations that depend on the
            other modules since this method can get called when they are not initialized or created yet.
            </para>
            <para>
            Unless the implementing class is <i>sealed</i>, the method must be declared as <i>virtual</i>.
            The descendants may want to react on the callback as well.
            </para>
            </remarks>
        </member>
        <member name="T:KSPDev.GUIUtils.LocalizableItemAttribute">
            <summary>Attribute for the various game items that support localization.</summary>
            <remarks>
            <para>
            Use this attribute to automatically localize the part's events, fields, and actions. The
            relevant strings will be loaded when the vessel or part is either created or loaded. The
            strings will also properly update when reloading the language definitiaion via
            <c>LocalizationTool</c>.
            </para>
            <para>
            See the "seealso" section for the types and methods that are aware of this attribute.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableMessage"/>
            <seealso cref="M:KSPDev.GUIUtils.LocalizationLoader.LoadItemsInModule(PartModule)"/>
            <seealso href="https://github.com/ihsoft/KSPDev/tree/master/Sources/LocalizationTool">KSPDev: LocalizationTool</seealso>
            <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemField"/></example>
            <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemEvent"/></example>
            <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemAction"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableItemAttribute.defaultTemplate">
            <inheritdoc cref="F:KSPDev.GUIUtils.LocalizableMessage.defaultTemplate"/>
            <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemField"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableItemAttribute.description">
            <inheritdoc cref="F:KSPDev.GUIUtils.LocalizableMessage.description"/>
            <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemField"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableItemAttribute.tag">
            <inheritdoc cref="F:KSPDev.GUIUtils.LocalizableMessage.tag"/>
            <remarks>
            It can be set to <c>null</c> to indicate that the attributed item doesn't need localization.
            Such attributes are NO-OP during the game, but for the localization tool it's a signal to not
            include the item into the localization config.
            </remarks>
            <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemField"/></example>
            <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemField_NullTag"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableItemAttribute.spec">
            <summary>
            A key to distinguish attributes when there are multiple of them attached to a member. 
            </summary>
            <remarks>The meaning of this key depends on the attributed member.</remarks>
            <seealso cref="M:KSPDev.GUIUtils.LocalizationLoader.LoadItemsInModule(PartModule)"/>
            <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemField_WithUnits"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableItemAttribute.localizedString">
            <summary>Cached localized message.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizableItemAttribute.GetLocalizedString">
            <summary>Returns the localized string.</summary>
            <remarks>
            This method is primary designed for the KSPDev localization code. There are no good use cases
            for the application code to invoke it.
            </remarks>
            <returns>
            The localized string of the <see cref="F:KSPDev.GUIUtils.LocalizableItemAttribute.defaultTemplate"/> if no localization content found.
            </returns>
        </member>
        <member name="T:KSPDev.GUIUtils.LocalizableMessage">
            <summary>Base class for the messages that support localization.</summary>
            <remarks>
            <para>
            This class is not intended for the use on its own. See the inheritance hierarchy for the classes
            that inherit it.
            </para>
            <para>
            This class is performance optimized. Once a string is resolved to the localized content, it's
            cached and reused in the subsequent calls. The cache can be reset by incrementing the
            <see cref="F:KSPDev.GUIUtils.LocalizableMessage.systemLocVersion"/>.
            </para>
            <para>
            The template of the messages supports special tags that may give a hint to the caller code on
            how the messages should be rendered. Those tags must be palced at the beginning of the template.
            For the available tags see <see cref="T:KSPDev.GUIUtils.LocalizableMessage.GuiTags"/>.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableItemAttribute"/>
            <seealso cref="F:KSPDev.GUIUtils.LocalizableMessage.systemLocVersion"/>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.systemLocVersion">
            <summary>Current version of the loaded localizations.</summary>
            <remarks>Increase it to have all the caches to invalidate.</remarks>
            <seealso cref="P:KSPDev.GUIUtils.LocalizableMessage.localizedTemplate"/>
            <seealso cref="F:KSPDev.GUIUtils.LocalizableMessage.loadedLocVersion"/>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.defaultTemplate">
            <summary>Template to use if no localized template found.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.description">
            <summary>Description for the message.</summary>
            <remarks>
            This string is not presented anywhere in the game, but it can be presented to the people who
            will be translating the template into a different language.
            </remarks>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.example">
            <summary>Example usage and the output.</summary>
            <remarks>
            This string is not presented anywhere in the game, but it can be presented to the people who
            will be translating the template into a different language.
            </remarks>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.tag">
            <summary>Tag to use when resolving the string via the Localizer.</summary>
            <remarks>
            It can be <c>null</c> to indicate that the localization is not needed. In this case the
            <see cref="F:KSPDev.GUIUtils.LocalizableMessage.defaultTemplate"/> will be used as text.
            </remarks>
            <item name="T:KSP.Localization.Localizer">
  <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_1_1_localization_1_1_localizer.html">KSP.Localization.Localizer</seealso>
</item>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.guiTags">
            <summary>GUI specific settings that suggest how to show the message.</summary>
            <remarks>
            Due to the lazzy update nature of the localized messages, these settings are <i>not</i>
            loaded until the message is used at least once. The caller code may ensure the values are
            updated by calling to <see cref="M:KSPDev.GUIUtils.LocalizableMessage.LoadLocalization"/>, or by simply getting the
            <see cref="P:KSPDev.GUIUtils.LocalizableMessage.localizedTemplate"/> value.
            </remarks>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.loadedLocVersion">
            <summary>Currently cached version of the localization content.</summary>
            <remarks>
            If this version is different from the <see cref="F:KSPDev.GUIUtils.LocalizableMessage.systemLocVersion"/>, then the message
            <see cref="P:KSPDev.GUIUtils.LocalizableMessage.localizedTemplate"/> will be reloaded from the config when accessed.
            </remarks>
            <seealso cref="P:KSPDev.GUIUtils.LocalizableMessage.localizedTemplate"/>
            <seealso cref="F:KSPDev.GUIUtils.LocalizableMessage.systemLocVersion"/>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizableMessage.LoadLocalization">
            <summary>Instructs the implementation to load a localized template.</summary>
            <remarks>If there is a value cached, it will be reloaded.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizableMessage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Constructs a localizable message.</summary>
            <param name="tag">
            The tag to use when getting the localized version of the template. If <c>null</c> then the
            message will alaways use <paramref name="defaultTemplate"/> as text.
            </param>
            <param name="defaultTemplate">
            <para>
            The template to use if no localizable content can be found. It can be in any language, but
            it's strongly encouraged to put it in English. For the template syntax see the documentation
            on the Lingoona website.
            </para>
            <para>
            If this parameter is omitted, then the <paramref name="tag"/> will be used as a default
            template. I.e. in case of the tag lookup failed, the tag string will be presented instead of
            a human readable string.
            </para>
            </param>
            <param name="description">
            A helper text for the translators to give them a context. Try to be reasonably verbose when
            specifying the circumstances of when this string is displayed. The context <i>does</i> matter!
            </param>
            <param name="example">
            An example of how the template can be used and what is the output in the langauge of the
            <paramref name="defaultTemplate"/>. Provide it to illustrate the non-obvious cases. 
            </param>
            <seealso href="http://lingoona.com/cgi-bin/grammar#l=en&amp;oh=1">Lingoona Grammar help</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizableMessage.HandleSpecialTags">
            <summary>Handles any special tags that can prefix the actual template.</summary>
        </member>
        <member name="P:KSPDev.GUIUtils.LocalizableMessage.localizedTemplate">
            <summary>Localized Lingoona Grammar template for the <c>tag</c>.</summary>
            <remarks>
            <para>
            The template is resolved via the Localizer only once. The resolved value is cached and
            re-sued.
            </para>
            <para>
            If there is no string defined for the tag, then a <see cref="F:KSPDev.GUIUtils.LocalizableMessage.defaultTemplate"/> will be used.
            A warning record will be logged to help tracking such issues.
            </para>
            <para>
            When current language is changed the cached version needs to be reloaded. Call
            the <see cref="M:KSPDev.GUIUtils.LocalizableMessage.LoadLocalization"/> method to force it. However, as of KSP 1.3.0 the langauge
            cannot be changed while the game is running.
            </para>
            </remarks>
            <value>
            A Lingoona Grammar template in the
            <see cref="P:KSP.Localization.Localizer.CurrentLanguage">current languge</see>.
            </value>
            <seealso cref="M:KSPDev.GUIUtils.LocalizableMessage.LoadLocalization"/>
            <item name="T:KSP.Localization.Localizer">
  <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_1_1_localization_1_1_localizer.html">KSP.Localization.Localizer</seealso>
</item>
        </member>
        <member name="T:KSPDev.GUIUtils.LocalizableMessage.GuiTags">
            <summary>Various values that give hints on how the messages should be presented in GUI.</summary>
            <remarks>
            It's up to the caller to handle theses settings. They improve the appearence, but are not
            required for the proper content presentation.
            </remarks>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.GuiTags.minWidth">
            <summary>Minimum width of the area in GUI.</summary>
            <remarks>Defined via tag: &lt;gui:min:width,heigth&gt;</remarks>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.GuiTags.minHeight">
            <summary>Minimum height of the area in GUI.</summary>
            <remarks>Defined via tag: &lt;gui:min:width,heigth&gt;</remarks>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.GuiTags.maxWidth">
            <summary>Maximum width of the area in GUI.</summary>
            <remarks>Defined via tag: &lt;gui:max:width,heigth&gt;</remarks>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizableMessage.GuiTags.maxHeight">
            <summary>Maximum height of the area in GUI.</summary>
            <remarks>Defined via tag: &lt;gui:max:width,heigth&gt;</remarks>
        </member>
        <member name="T:KSPDev.GUIUtils.LocalizationLoader">
            <summary>A utility class to localize the annotated members</summary>
            <remarks>
            <para>
            It also monitors if the
            <see cref="F:KSPDev.GUIUtils.LocalizableMessage.systemLocVersion">localization version</see> has changed. If this
            is the case, then all the localizable modules will be notified.
            </para>
            <para>This module is initialized from the KSPDev Utils loader.</para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableItemAttribute"/>
            <seealso cref="T:KSPDev.GUIUtils.IsLocalizableModule"/> 
            <example><code source="Examples/GUIUtils/LocalizationLoader-Examples.cs" region="LocalizationLoaderDemo1"/></example>
            <example><code source="Examples/GUIUtils/LocalizationLoader-Examples.cs" region="LocalizationLoaderDemo2"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizationLoader.cachedReadValueMethod">
            <summary>
            The stock method from ConfigNode to transform string values to the game supported types.
            </summary>
            <remarks>
            This method is private and we extract it via reflection. This is an error prone way (not to
            mention how bad it is from the coding practices standpoint), so there is a fallback strategy:
            if the method with the proper signature cannot be extracted, then only update the string
            values since don't need conversion.
            </remarks>
            <seealso cref="M:KSPDev.GUIUtils.LocalizationLoader.GetTransformValueMethod"/>
        </member>
        <member name="F:KSPDev.GUIUtils.LocalizationLoader.readValueMethodChecked">
            <summary>Tells if the transform method existence has already been checked.</summary>
            <remarks>For the performance purpose only.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizationLoader.LoadItemsInModule(PartModule)">
            <summary>Localizes the <see cref="T:PartModule"/> items.</summary>
            <remarks>
            <para>
            The localizable items must be declared as non-static public members. The following items are
            supported:
            <list type="bullet">
            <item>
            <see cref="T:KSPField"/>. This type may have multiple localization items: for <c>guiName</c>
            (spec=<c>null</c>) and for <c>guiUnits</c> (spec=<see cref="F:KSPDev.GUIUtils.StdSpecTags.Units"/>).
            </item>
            <item><see cref="T:KSPEvent"/>.</item>
            <item><see cref="T:KSPAction"/>.</item>
            </list>
            </para>
            <para>
            The original KSP attributes don't need to specify <c>guiName</c> field since it will be
            overwritten anyways. However, it's a good idea to give a default value just in case.
            </para>
            <para>
            This method can be called at any time during the module's life. However, the
            <see cref="M:KSPDev.GUIUtils.IsLocalizableModule.LocalizeModule"/> method looks the most appropriate.
            </para>
            </remarks>
            <param name="module">The module instance to localize.</param>
            <example><code source="Examples/GUIUtils/LocalizationLoader-Examples.cs" region="LocalizationLoaderDemo1"/></example>
            <example><code source="Examples/GUIUtils/LocalizationLoader-Examples.cs" region="LocalizationLoaderDemo2"/></example>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableItemAttribute"/>
            <seealso cref="T:KSPDev.GUIUtils.IsLocalizableModule"/>
            <item name="T:KSPField">
  <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_field.html">KSP: KSPField</seealso>
</item>
            <item name="T:KSPEvent">
  <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_event.html">KSP: KSPEvent</seealso>
</item>
            <item name="T:KSPAction">
  <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_action.html">KSP: KSPAction</seealso>
</item>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizationLoader.Awake">
            <summary>Installs the event listeners to do the automatic modules localization.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizationLoader.OnUpdateLocalizationVersion">
            <summary>Invalidates all the localization caches and updates the current vessels.</summary>
            <remarks>It updates all the currently loaded vessels.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizationLoader.UpdateLocalizationInPartHierarchy(Part)">
            <summary>Localizes the modules in the part and in all of its children parts.</summary>
            <param name="rootPart">The root part to start from.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizationLoader.UpdateLocalizationInPartModules(Part)">
            <summary>Updates all the localizable strings in a part.</summary>
            <param name="part">The part to load the data in.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizationLoader.IsModuleOfThisVersion(PartModule)">
            <summary>
            Checks if the module was built using the same version of the Utils assembly as this one.
            </summary>
            <param name="module">The module to check.</param>
            <returns><c>true</c> if the module refers our version of the Utils assembly.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizationLoader.LoadKSPFieldsFromNode(PartModule,ConfigNode)">
            <summary>Reloads the [KSPField] annotated fields from the provided config.</summary>
            <remarks>
            This method tries to reload all the fields in the module using the stock methods. However, the
            stock game libraries can change and become incompatible, in which case this method will only
            update the string fields. Updating only the strings is enough in 99% of the localization
            cases.
            </remarks>
            <param name="module">The module to reload the fields for.</param>
            <param name="node">The config node to geth te values from.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.LocalizationLoader.GetTransformValueMethod">
            <summary>Gets a method that transforms a string value into the provided type.</summary>
            <returns>
            The method which returns the converted value or <c>null</c> if the conversion is failed or not
            possible.
            </returns>
        </member>
        <member name="T:KSPDev.GUIUtils.ScreenMessaging">
            <summary>Helper class to present global UI messages.</summary>
            <remarks>The actual representation of the different priority messages depends on the KSP
            version. As a rule of thumb use the following reasons when deciding how to show a message:
            <list>
            <item>Important messages should be show as "priority". It's assumed that UI layout is build so
                what that such messages won't be missed.</item>
            <item>Messages that only give status update and can be safely ignored by the player should be
                reported as "info". They will show up in UI but not necessarily bring user's attention.
                </item>
            </list>
            </remarks>
            <example>
            <code>
            class MyMod : MonoBehaviour {
              void Update() {
                if (Input.GetKeyDown("1")) {
                  ScreenMessaging.ShowPriorityScreenMessage("Key pressed in frame #{0}", Time.frameCount);
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="F:KSPDev.GUIUtils.ScreenMessaging.DefaultMessageTimeout">
            <summary>Default timeout for a regular UI message.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.ScreenMessaging.DefaultErrorTimeout">
            <summary>Default timeout for a UI message that reports an error.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.ScreenMessaging.DefaultWarningTimeout">
            <summary>Default timeout for a UI message that warns about unusual conditions.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.ScreenMessaging.ErrorColor">
            <summary>Default color for the error messages.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.ScreenMessaging.WarningColor">
            <summary>Default color for the warning messages.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.ScreenMessaging.SetColorToRichText(System.String,UnityEngine.Color)">
            <summary>Wraps string into Unity rich-text tags to set a color.</summary>
            <remarks>Note, that Unity rich-text is not the same as RTF specification.</remarks>
            <param name="str">String to wrap.</param>
            <param name="color">Color to apply to the string.</param>
            <returns>Unity rich-text string.</returns>
            <seealso href="https://docs.unity3d.com/Manual/StyledText.html">
            Unity 3D: Rich-Text styled text</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.ScreenMessaging.ShowScreenMessage(ScreenMessageStyle,System.Single,System.String,System.Object[])">
            <summary>Shows a formatted message with the specified location and timeout.</summary>
            <param name="style">A <c>ScreenMessageStyle</c> specifier.</param>
            <param name="duration">Delay before hiding the message in seconds.</param>
            <param name="fmt"><c>string.Format()</c> formatting string.</param>
            <param name="args">Arguments for the formattign string.</param>
            <seealso href="https://kerbalspaceprogram.com/api/class_screen_messages.html">
            KSP: ScreenMessages</seealso>
            <seealso href="https://kerbalspaceprogram.com/api/_screen_messages_8cs.html#ac19a4c3800d327889475848ccbbf9317">
            KSP: ScreenMessageStyle</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.ScreenMessaging.ShowScreenMessage(ScreenMessageStyle,System.Single,UnityEngine.Color,System.String,System.Object[])">
            <summary>Shows a formatted message with the specified location and timeout.</summary>
            <param name="style"><see cref="T:ScreenMessageStyle"/> specifier.</param>
            <param name="duration">Delay before hiding the message in seconds.</param>
            <param name="color">Color to apply on the string.</param>
            <param name="fmt"><c>string.Format()</c> formatting string.</param>
            <param name="args">Arguments for the formattign string.</param>
            <seealso href="https://kerbalspaceprogram.com/api/class_screen_messages.html">
            KSP: ScreenMessages</seealso>
            <seealso href="https://kerbalspaceprogram.com/api/_screen_messages_8cs.html#ac19a4c3800d327889475848ccbbf9317">
            KSP: ScreenMessageStyle</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.ScreenMessaging.ShowPriorityScreenMessageWithTimeout(System.Single,System.String,System.Object[])">
            <summary>Shows an important message with the specified timeout.</summary>
            <remarks>It's no defined how exactly the message is shown. The only thing required is that
            player won't miss it.</remarks>
            <param name="duration">Delay before hiding the message in seconds.</param>
            <param name="fmt">A formatting string.</param>
            <param name="args">Arguments for the formatting string.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.ScreenMessaging.ShowPriorityScreenMessage(System.String,System.Object[])">
            <summary>Shows an important message with a default timeout.</summary>
            <remarks>It's not defined how exactly the message is shown. The only thing required is that
            player won't miss it.</remarks>
            <param name="fmt">A formatting string.</param>
            <param name="args">Arguments for the formatting string.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.ScreenMessaging.ShowInfoScreenMessageWithTimeout(System.Single,System.String,System.Object[])">
            <summary>Shows an info message with the specified timeout.</summary>
            <remarks>It's no defined how exactly the message is shown.</remarks>
            <param name="duration">Delay before hiding the message in seconds.</param>
            <param name="fmt"><c>string.Format()</c> formatting string.</param>
            <param name="args">Arguments for the formattign string.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.ScreenMessaging.ShowInfoScreenMessage(System.String,System.Object[])">
            <summary>Shows an info message with a default timeout.</summary>
            <remarks>It's no defined how exactly the message is shown.</remarks>
            <param name="fmt"><c>string.Format()</c> formatting string.</param>
            <param name="args">Arguments for the formattign string.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.ScreenMessaging.ShowErrorScreenMessage(System.String,System.Object[])">
            <summary>Shows an error message with a default timeout.</summary>
            <remarks>
            It's not defined how exactly the message is shown, but it's guaranteed that it will look like
            an "error", and the player will perceive it like that.
            </remarks>
            <param name="fmt">The <c>string.Format()</c> formatting string.</param>
            <param name="args">The arguments for the formattign string.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.ScreenMessaging.ShowWarningScreenMessage(System.String,System.Object[])">
            <summary>Shows a warning message with a default timeout.</summary>
            <remarks>
            It's no defined how exactly the message is shown, but it's guaranteed it looks like an error
            and player will perceive it like that.
            </remarks>
            <param name="fmt"><c>string.Format()</c> formatting string.</param>
            <param name="args">Arguments for the formattign string.</param>
        </member>
        <member name="T:KSPDev.GUIUtils.HintOverlay">
             <summary>A wrapper class to present a simple overlay window with some text.</summary>
             <remarks>
             <para>The overlay windows don't have a border or title. The main purpose of such windows is
             present the "hints". I.e. short a lived piece of information presented for the current context.
             The hint won't be shown in UI until explicitly requsted via a call to the <c>ShowAt*</c> method.
             </para>
             <para>
             Keep in mind that this window resources will be destroyed when the scene is re-loaded. I.e. the
             hint window must be re-created on every scene change.
             </para>
             </remarks>
             <example>
             In a common case, the initialization of the hint window is done on the game object awakening,
             and it's either shown or hidden in the <c>OnGUI</c> method.
             <code>
             class MyMod : MonoBehaviour {
               HintOverlay hint;
            
               void Awake() {
                 hint = new HintOverlay(12, 3, Color.white, new Color(0f, 0f, 0f, 0.5f));
               }
            
               void OnGUI() {
                 hint.text = string.Format("Current frame is: {0}", Time.frameCount);
                 hint.ShowAtCursor();
               }
             }
             </code>
             <para>In the example above text of the hint is set on every frame update since frame count is updated
             this frequently. Though, if your data is updated less frequently you may save some performance
             by updating text in the methods different from <c>OnGUI</c>.</para>
             </example>
        </member>
        <member name="F:KSPDev.GUIUtils.HintOverlay.BackgroundTextureSize">
            <summary>Size of the sample texture that fills hint window backgroud.</summary>
            <remarks>Small values may impact rendering performance. Large values will increase memory
            footpring. Choose it wise.</remarks>
        </member>
        <member name="F:KSPDev.GUIUtils.HintOverlay.RightSideMousePadding">
            <summary>Padding when showing hint on the right side of the mouse cursor.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.HintOverlay.LeftSideMousePadding">
            <summary>Padding when showing hint on the left side of the mouse cursor.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.HintOverlay.textSize">
            <summary>Precalculated UI text size for the currently assigned text.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.HintOverlay.hintWindowStyle">
            <summary>Precalculated style for the hint overlay window.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.HintOverlay.#ctor(System.Int32,System.Int32,UnityEngine.Color,UnityEngine.Color)">
            <summary>Constructs an overaly.</summary>
            <param name="fontSize">Size of the text font in the hint.</param>
            <param name="padding">Padding between the text and the window boundaries.</param>
            <param name="textColor">Color of the hint text.</param>
            <param name="backgroundColor">Color of the hint background. If alpha component is different
            from <c>1.0</c> then background will be semi-transparent.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.HintOverlay.ShowAtCursor">
            <summary>Shows hint text at the current mouse pointer.</summary>
            <remarks>When possible the window is shown on the right side of the cursor. Though, if part of
            the window goes out of the screen then it will be shown on the left side. If bottom boundary
            of the window hits bottom boundary of the screen then hint is aligned vertically so what the
            full content is visible. </remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.HintOverlay.ShowAtPosition(System.Single,System.Single)">
            <summary>Shows hint at the absolute screen position.</summary>
            <remarks>If hint content goes out of the screen it's clipped.</remarks>
            <param name="x">X position is screen coordinates.</param>
            <param name="y">Y position is screen coordinates.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.HintOverlay.CreateSampleTextureFromColor(UnityEngine.Color)">
            <summary>Creates a clear color texture to fill background with.</summary>
            <param name="color">A background color.</param>
            <returns>Texture of a default size.</returns>
        </member>
        <member name="P:KSPDev.GUIUtils.HintOverlay.text">
            <summary>The hint overlay text.</summary>
            <remarks>
            Linefeed symbols are correctly handled. Use them to make multiline content. Setting text is an
            expensive operation since it results in window size recalculation. Don't update it more
            frequently than the underlaying data does.
            </remarks>
            <value>The text to be show as a hint.</value>
        </member>
        <member name="T:KSPDev.GUIUtils.Message">
            <summary>A class to wrap a simple localizable UI string.</summary>
            <remarks>
            Messages of this type don't have placeholders and can be just casted to a string. 
            </remarks>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="MessageDemo"/></example>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
        </member>
        <member name="M:KSPDev.GUIUtils.Message.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:KSPDev.GUIUtils.LocalizableMessage.#ctor(System.String,System.String,System.String,System.String)"/>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableMessage"/>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="MessageDemo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message.op_Implicit(System.String)~KSPDev.GUIUtils.Message">
            <summary>Allows casting a localization tag to the message.</summary>
            <remarks>
            It can be used to create a message by simply assigning a localization tag. However, it's
            highly recommended to create a message via the constructor and provide all the arguments.
            </remarks>
            <param name="tag">The tag string to use for getting the localized content.</param>
            <returns>A message instance.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="MessageDemo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message.op_Implicit(KSPDev.GUIUtils.Message)~System.String">
            <summary>Allows casting messages to string.</summary>
            <param name="msg">A message to cast.</param>
            <returns>Message value.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="MessageDemo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message.Format">
            <summary>Returns the message string.</summary>
            <returns>A complete message string.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="MessageDemo"/></example>
        </member>
        <member name="T:KSPDev.GUIUtils.Message`1">
            <summary>A class to wrap a localizable UI string with parameter(s).</summary>
            <typeparam name="T1">Type of argument <![CDATA[<<1>>]]> in the Lingoona template.</typeparam>
            <remarks>
            <para>
            Define the parameter(s) type via the generic argument(s). When the string needs to be
            presented, use the <see cref="M:KSPDev.GUIUtils.Message`1.Format(`0)"/> method to get the final value.
            </para>
            <para>
            The arguments can be complex types that override the <c>ToString()</c> method. This approach
            can be used to customize the output format of the specific argument types. E.g. such values as
            "distance" can be formatted in a user friendly manner using <see cref="T:KSPDev.GUIUtils.DistanceType"/>.
            </para>
            </remarks>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message1Demo"/></example>
            <seealso cref="T:KSPDev.GUIUtils.Message"/>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <seealso href="http://lingoona.com/cgi-bin/grammar#l=en&amp;oh=1">Lingoona Grammar help</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`1.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:KSPDev.GUIUtils.LocalizableMessage.#ctor(System.String,System.String,System.String,System.String)"/>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableMessage"/>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message1Demo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`1.Format(`0)">
            <summary>Formats the message template string with the provided arguments.</summary>
            <remarks>
            The string parameter(s) can be template tags. If the type of the argument is <c>string</c>,
            and the value matches a tag, then the localized string of this tag is used instead. Keep it
            in mind when defining the tags to avoid the collisions.
            </remarks>
            <param name="arg1">The substitute for the <![CDATA[<<1>>]]> argument.</param>
            <returns>A complete and localized message string.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message1Demo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`1.op_Implicit(System.String)~KSPDev.GUIUtils.Message{`0}">
            <summary>Allows casting a string to a message.</summary>
            <remarks>
            It can be used to create a message by simply assigning a localization tag. However, it's
            highly recommended to create a message via the constructor and provide all the arguments.
            </remarks>
            <param name="tag">The tag string to use for getting the localized content.</param>
            <returns>A message instance.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message1Demo"/></example>
        </member>
        <member name="T:KSPDev.GUIUtils.Message`2">
            <summary>A class to wrap a localizable UI string with parameter(s).</summary>
            <typeparam name="T1">Type of argument <![CDATA[<<1>>]]> in the Lingoona template.</typeparam>
            <typeparam name="T2">Type of argument <![CDATA[<<2>>]]> in the Lingoona template.</typeparam>
            <remarks>
            <para>
            Define the parameter(s) type via the generic argument(s). When the string needs to be
            presented, use the <see cref="M:KSPDev.GUIUtils.Message`2.Format(`0,`1)"/> method to get the final value.
            </para>
            <para>
            The arguments can be complex types that override the <c>ToString()</c> method. This approach
            can be used to customize the output format of the specific argument types. E.g. such values as
            "distance" can be formatted in a user friendly manner using <see cref="T:KSPDev.GUIUtils.DistanceType"/>.
            </para>
            </remarks>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message2Demo"/></example>
            <seealso cref="T:KSPDev.GUIUtils.Message"/>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <seealso href="http://lingoona.com/cgi-bin/grammar#l=en&amp;oh=1">Lingoona Grammar help</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`2.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:KSPDev.GUIUtils.LocalizableMessage.#ctor(System.String,System.String,System.String,System.String)"/>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableMessage"/>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message2Demo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`2.Format(`0,`1)">
            <summary>Formats the message template string with the provided arguments.</summary>
            <remarks>
            The string parameter(s) can be template tags. If the type of the argument is <c>string</c>,
            and the value matches a tag, then the localized string of this tag is used instead. Keep it
            in mind when defining the tags to avoid the collisions.
            </remarks>
            <param name="arg1">The substitute for the <![CDATA[<<1>>]]> argument.</param>
            <param name="arg2">The substitute for the <![CDATA[<<2>>]]> argument.</param>
            <returns>A complete and localized message string.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message2Demo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`2.op_Implicit(System.String)~KSPDev.GUIUtils.Message{`0,`1}">
            <summary>Allows casting a string to a message.</summary>
            <remarks>
            It can be used to create a message by simply assigning a localization tag. However, it's
            highly recommended to create a message via the constructor and provide all the arguments.
            </remarks>
            <param name="tag">The tag string to use for getting the localized content.</param>
            <returns>A message instance.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message2Demo"/></example>
        </member>
        <member name="T:KSPDev.GUIUtils.Message`3">
            <summary>A class to wrap a localizable UI string with parameter(s).</summary>
            <typeparam name="T1">Type of argument <![CDATA[<<1>>]]> in the Lingoona template.</typeparam>
            <typeparam name="T2">Type of argument <![CDATA[<<2>>]]> in the Lingoona template.</typeparam>
            <typeparam name="T3">Type of argument <![CDATA[<<3>>]]> in the Lingoona template.</typeparam>
            <remarks>
            <para>
            Define the parameter(s) type via the generic argument(s). When the string needs to be
            presented, use the <see cref="M:KSPDev.GUIUtils.Message`3.Format(`0,`1,`2)"/> method to get the final value.
            </para>
            <para>
            The arguments can be complex types that override the <c>ToString()</c> method. This approach
            can be used to customize the output format of the specific argument types. E.g. such values as
            "distance" can be formatted in a user friendly manner using <see cref="T:KSPDev.GUIUtils.DistanceType"/>.
            </para>
            </remarks>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message3Demo"/></example>
            <seealso cref="T:KSPDev.GUIUtils.Message"/>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <seealso href="http://lingoona.com/cgi-bin/grammar#l=en&amp;oh=1">Lingoona Grammar help</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`3.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:KSPDev.GUIUtils.LocalizableMessage.#ctor(System.String,System.String,System.String,System.String)"/>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableMessage"/>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message3Demo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`3.Format(`0,`1,`2)">
            <summary>Formats the message template string with the provided arguments.</summary>
            <remarks>
            The string parameter(s) can be template tags. If the type of the argument is <c>string</c>,
            and the value matches a tag, then the localized string of this tag is used instead. Keep it
            in mind when defining the tags to avoid the collisions.
            </remarks>
            <param name="arg1">The substitute for the <![CDATA[<<1>>]]> argument.</param>
            <param name="arg2">The substitute for the <![CDATA[<<2>>]]> argument.</param>
            <param name="arg3">The substitute for the <![CDATA[<<3>>]]> argument.</param>
            <returns>A complete and localized message string.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message3Demo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`3.op_Implicit(System.String)~KSPDev.GUIUtils.Message{`0,`1,`2}">
            <summary>Allows casting a string to a message.</summary>
            <remarks>
            It can be used to create a message by simply assigning a localization tag. However, it's
            highly recommended to create a message via the constructor and provide all the arguments.
            </remarks>
            <param name="tag">The tag string to use for getting the localized content.</param>
            <returns>A message instance.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message3Demo"/></example>
        </member>
        <member name="T:KSPDev.GUIUtils.Message`4">
            <summary>A class to wrap a localizable UI string with parameter(s).</summary>
            <typeparam name="T1">Type of argument <![CDATA[<<1>>]]> in the Lingoona template.</typeparam>
            <typeparam name="T2">Type of argument <![CDATA[<<2>>]]> in the Lingoona template.</typeparam>
            <typeparam name="T3">Type of argument <![CDATA[<<3>>]]> in the Lingoona template.</typeparam>
            <typeparam name="T4">Type of argument <![CDATA[<<4>>]]> in the Lingoona template.</typeparam>
            <remarks>
            <para>
            Define the parameter(s) type via the generic argument(s). When the string needs to be
            presented, use the <see cref="M:KSPDev.GUIUtils.Message`4.Format(`0,`1,`2,`3)"/> method to get the final value.
            </para>
            <para>
            The arguments can be complex types that override the <c>ToString()</c> method. This approach
            can be used to customize the output format of the specific argument types. E.g. such values as
            "distance" can be formatted in a user friendly manner using <see cref="T:KSPDev.GUIUtils.DistanceType"/>.
            </para>
            </remarks>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message4Demo"/></example>
            <seealso cref="T:KSPDev.GUIUtils.Message"/>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <seealso href="http://lingoona.com/cgi-bin/grammar#l=en&amp;oh=1">Lingoona Grammar help</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`4.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:KSPDev.GUIUtils.LocalizableMessage.#ctor(System.String,System.String,System.String,System.String)"/>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableMessage"/>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message4Demo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`4.Format(`0,`1,`2,`3)">
            <summary>Formats the message template string with the provided arguments.</summary>
            <remarks>
            The string parameter(s) can be template tags. If the type of the argument is <c>string</c>,
            and the value matches a tag, then the localized string of this tag is used instead. Keep it
            in mind when defining the tags to avoid the collisions.
            </remarks>
            <param name="arg1">The substitute for the <![CDATA[<<1>>]]> argument.</param>
            <param name="arg2">The substitute for the <![CDATA[<<2>>]]> argument.</param>
            <param name="arg3">The substitute for the <![CDATA[<<3>>]]> argument.</param>
            <param name="arg4">The substitute for the <![CDATA[<<4>>]]> argument.</param>
            <returns>A complete and localized message string.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message4Demo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`4.op_Implicit(System.String)~KSPDev.GUIUtils.Message{`0,`1,`2,`3}">
            <summary>Allows casting a string to a message.</summary>
            <remarks>
            It can be used to create a message by simply assigning a localization tag. However, it's
            highly recommended to create a message via the constructor and provide all the arguments.
            </remarks>
            <param name="tag">The tag string to use for getting the localized content.</param>
            <returns>A message instance.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message4Demo"/></example>
        </member>
        <member name="T:KSPDev.GUIUtils.Message`5">
            <summary>A class to wrap a localizable UI string with parameter(s).</summary>
            <typeparam name="T1">Type of argument <![CDATA[<<1>>]]> in the Lingoona template.</typeparam>
            <typeparam name="T2">Type of argument <![CDATA[<<2>>]]> in the Lingoona template.</typeparam>
            <typeparam name="T3">Type of argument <![CDATA[<<3>>]]> in the Lingoona template.</typeparam>
            <typeparam name="T4">Type of argument <![CDATA[<<4>>]]> in the Lingoona template.</typeparam>
            <typeparam name="T5">Type of argument <![CDATA[<<5>>]]> in the Lingoona template.</typeparam>
            <remarks>
            <para>
            Define the parameter(s) type via the generic argument(s). When the string needs to be
            presented, use the <see cref="M:KSPDev.GUIUtils.Message`5.Format(`0,`1,`2,`3,`4)"/> method to get the final value.
            </para>
            <para>
            The arguments can be complex types that override the <c>ToString()</c> method. This approach
            can be used to customize the output format of the specific argument types. E.g. such values as
            "distance" can be formatted in a user friendly manner using <see cref="T:KSPDev.GUIUtils.DistanceType"/>.
            </para>
            </remarks>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message5Demo"/></example>
            <seealso cref="T:KSPDev.GUIUtils.Message"/>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <seealso href="http://lingoona.com/cgi-bin/grammar#l=en&amp;oh=1">Lingoona Grammar help</seealso>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`5.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:KSPDev.GUIUtils.LocalizableMessage.#ctor(System.String,System.String,System.String,System.String)"/>
            <seealso cref="T:KSPDev.GUIUtils.LocalizableMessage"/>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message5Demo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`5.Format(`0,`1,`2,`3,`4)">
            <summary>Formats the message template string with the provided arguments.</summary>
            <remarks>
            The string parameter(s) can be template tags. If the type of the argument is <c>string</c>,
            and the value matches a tag, then the localized string of this tag is used instead. Keep it
            in mind when defining the tags to avoid the collisions.
            </remarks>
            <param name="arg1">The substitute for the <![CDATA[<<1>>]]> argument.</param>
            <param name="arg2">The substitute for the <![CDATA[<<2>>]]> argument.</param>
            <param name="arg3">The substitute for the <![CDATA[<<3>>]]> argument.</param>
            <param name="arg4">The substitute for the <![CDATA[<<4>>]]> argument.</param>
            <param name="arg5">The substitute for the <![CDATA[<<5>>]]> argument.</param>
            <returns>A complete and localized message string.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message5Demo"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.Message`5.op_Implicit(System.String)~KSPDev.GUIUtils.Message{`0,`1,`2,`3,`4}">
            <summary>Allows casting a string to a message.</summary>
            <remarks>
            It can be used to create a message by simply assigning a localization tag. However, it's
            highly recommended to create a message via the constructor and provide all the arguments.
            </remarks>
            <param name="tag">The tag string to use for getting the localized content.</param>
            <returns>A message instance.</returns>
            <example><code source="Examples/GUIUtils/Message-Examples.cs" region="Message5Demo"/></example>
        </member>
        <member name="T:KSPDev.GUIUtils.GuiActionsList">
             <summary>A helper to accumulate GUI actions.</summary>
             <remarks>Unity may issue multiple GUI passes during a frame, and it requires the number of UI
             elements not to change between the passes. Unity expects the number of UI
             controls in every pass to be exactly the same as in the very first one:
             <see href="http://docs.unity3d.com/ScriptReference/EventType.Layout.html">EventType.Layout</see>.
             When the UI interactions affect the representation, all the changes must be postponed till the
             frame rendering is ended. This helper can be used to store the actions that will be executed at
             the beginning of the next frame.</remarks>
             <example>
             <code>
             public class MyUI : MonoBehaviour {
               private readonly GuiActionsList guiActions = new GuiActionsList();
               private bool showLabel = false;
            
               void OnGUI() {
                 if (guiActions.ExecutePendingGuiActions()) {
                   // ...do other stuff that affects UI... 
                 }
            
                 if (GUILayout.Button(new GUIContent("Test Button"))) {
                   // If "showLabel" is changed right here then Unity GUI will complain saying the number
                   // of UI controls has changed. So, postpone the change until current frame is ended.
                   guiActions.Add(() => {
                     showLabel = !showLabel;  // This will be done at the beginning of the next frame.
                   });
                 }
                 
                 if (showLabel) {
                   GUILayout.Label("Test label");
                 }
               }
             }
             </code>
             <para>If you were using simple approach and updated <c>showLabel</c> right away Unity would
             likely thrown an error like this:</para>
             <para><c>[EXCEPTION] ArgumentException: Getting control 1's position in a group with only 1
             controls when doing Repaint</c></para>
             <seealso href="http://docs.unity3d.com/Manual/GUIScriptingGuide.html"/>
             <seealso href="http://docs.unity3d.com/ScriptReference/EventType.html"/>
             </example>
        </member>
        <member name="F:KSPDev.GUIUtils.GuiActionsList.guiActions">
            <summary>A list of pending actions.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.GuiActionsList.Add(System.Action)">
            <summary>Adds an action to the pending list.</summary>
            <param name="actionFn">An action callback.</param>
        </member>
        <member name="M:KSPDev.GUIUtils.GuiActionsList.ExecutePendingGuiActions">
            <summary>Executes actions when it's safe to do the changes.</summary>
            <remarks>It's safe to call this method in every pass. It will detect when it's safe to apply
            the changes and apply the changes only once per a frame.</remarks>
            <returns><c>true</c> if actions have been applied.</returns>
        </member>
        <member name="T:KSPDev.GUIUtils.AngleType">
            <summary>
            Localized message formatting class for a numeric value that represents an <i>angle</i>. The
            resulted message may have a unit specification.
            </summary>
            <remarks>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/AngleType-Examples.cs" region="AngleTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/AngleType-Examples.cs" region="AngleTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/AngleType-Examples.cs" region="AngleTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.AngleType.unitName">
            <summary>Suffix for the "angle" units (degrees).</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.AngleType.value">
            <summary>A wrapped numeric value.</summary>
            <remarks>This is the original non-rounded and unscaled value.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.AngleType.#ctor(System.Double)">
            <summary>Constructs an angle type object.</summary>
            <param name="value">The numeric value in degrees.</param>
            <seealso cref="M:KSPDev.GUIUtils.AngleType.Format(System.Double,System.String)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/AngleType-Examples.cs" region="AngleTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/AngleType-Examples.cs" region="AngleTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/AngleType-Examples.cs" region="AngleTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.AngleType.op_Implicit(System.Double)~KSPDev.GUIUtils.AngleType">
            <summary>Coverts a numeric value into a type object.</summary>
            <param name="value">The numeric value to convert.</param>
            <returns>A type object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.AngleType.op_Implicit(KSPDev.GUIUtils.AngleType)~System.Double">
            <summary>Converts an angle type object into a numeric value.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A numeric value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.AngleType.Format(System.Double,System.String)">
            <summary>Formats the value into a human friendly string with a unit specification.</summary>
            <remarks>
            The method tries to keep the resulted string meaningful and as short as possible. For this
            reason the big values may be scaled down and/or rounded.
            </remarks>
            <param name="value">The numeric value to format.</param>
            <param name="format">
            The specific float number format to use. If the format is not specified, then it's choosen
            basing on the value.
            </param>
            <returns>A formatted and localized string</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/AngleType-Examples.cs" region="AngleTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/AngleType-Examples.cs" region="AngleTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.AngleType.ToString">
            <summary>Returns a string formatted as a human friendly angle specification.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.AngleType.Format(System.Double,System.String)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.CompactNumberType">
            <summary>
            Message formatting class for a numeric value. For the values below <c>1000</c> the resulted
            message is formatted so that it takes no more than 4 digits.
            </summary>
            <remarks>
            <para>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/CompactNumberType-Examples.cs" region="CompactNumberType1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/CompactNumberType-Examples.cs" region="CompactNumberType2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/CompactNumberType-Examples.cs" region="CompactNumberType2_FormatFixed"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.CompactNumberType.value">
            <summary>A wrapped numeric value.</summary>
            <remarks>This is the original non-rounded and unscaled value.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.CompactNumberType.#ctor(System.Double)">
            <summary>Constructs an object from a numeric value.</summary>
            <param name="value">The numeric value in the base units.</param>
            <seealso cref="M:KSPDev.GUIUtils.CompactNumberType.Format(System.Double,System.String)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/CompactNumberType-Examples.cs" region="CompactNumberType1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/CompactNumberType-Examples.cs" region="CompactNumberType2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/CompactNumberType-Examples.cs" region="CompactNumberType2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.CompactNumberType.op_Implicit(System.Double)~KSPDev.GUIUtils.CompactNumberType">
            <summary>Converts a numeric value into a type object.</summary>
            <param name="value">The numeric value to convert.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.CompactNumberType.op_Implicit(KSPDev.GUIUtils.CompactNumberType)~System.Double">
            <summary>Converts a type object into a numeric value.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A numeric value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.CompactNumberType.Format(System.Double,System.String)">
            <summary>Formats the value into a human friendly string.</summary>
            <remarks>
            When the value is below <c>1000</c>, the method tries to present the result in only four
            digits. If the value is greater, then the whole integer part is shown and the fractionap part
            is hidden.
            </remarks>
            <param name="value">The unscaled numeric value to format.</param>
            <param name="format">
            The specific float number format to use. If the format is not specified, then it's choosen
            basing on the value.
            </param>
            <returns>A formatted and localized string</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/CompactNumberType-Examples.cs" region="CompactNumberType2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/CompactNumberType-Examples.cs" region="CompactNumberType2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.CompactNumberType.ToString">
            <summary>Returns a string formatted as a human friendly distance specification.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.CompactNumberType.Format(System.Double,System.String)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.CostType">
            <summary>
            Localized message formatting class for a numeric value that represents a <i>cost</i>.
            </summary>
            <remarks>
            <para>
            Use it as a generic parameter when creating a <c>KSPDev.GUIUtils.LocalizableMessage</c>
            descendants.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/CostType-Examples.cs" region="CostTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/CostType-Examples.cs" region="CostTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/CostType-Examples.cs" region="CostTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.CostType.FundPrefix">
            <summary>The prefix to use to denote the "money" cost values.</summary>
            <remarks>This is an icon, so it's not localizable.</remarks>
        </member>
        <member name="F:KSPDev.GUIUtils.CostType.value">
            <summary>A wrapped numeric value.</summary>
            <remarks>This is the original non-rounded and unscaled value.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.CostType.#ctor(System.Double)">
            <summary>Constructs an object from a numeric value.</summary>
            <param name="value">The numeric value in the base units.</param>
            <seealso cref="M:KSPDev.GUIUtils.CostType.Format(System.Double,System.String)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/CostType-Examples.cs" region="CostTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/CostType-Examples.cs" region="CostTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/CostType-Examples.cs" region="CostTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.CostType.op_Implicit(System.Double)~KSPDev.GUIUtils.CostType">
            <summary>Coverts a numeric value into a type object.</summary>
            <param name="value">The numeric value to convert.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.CostType.op_Implicit(KSPDev.GUIUtils.CostType)~System.Double">
            <summary>Converts a type object into a numeric value.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A numeric value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.CostType.Format(System.Double,System.String)">
            <summary>Formats the value into a human friendly string.</summary>
            <remarks>
            <para>
            The method tries to keep the resulted string meaningful and as short as possible. For this
            reason the big values may be scaled down and/or rounded.
            </para>
            <para>
            There is no well established unit for measuring the costs in the game. However, there is a
            commonly used literal that denotes the costs: <c>√</c>. This literal is used as the base
            (and the only) unit name. It's assumed that the values below <c>0.01</c> don't makes sense
            from the financial perspective, so they are not attempted to be presented.
            </para>
            </remarks>
            <param name="value">The numeric value to format.</param>
            <param name="format">
            The specific float number format to use. If the format is not specified, then it's choosen
            basing on the value.
            </param>
            <returns>A formatted and localized string</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/CostType-Examples.cs" region="CostTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/CostType-Examples.cs" region="CostTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.CostType.ToString">
            <summary>Returns a string formatted as a human friendly volume specification.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.CostType.Format(System.Double,System.String)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.DistanceType">
            <summary>
            Localized message formatting class for a numeric value that represents a <i>distance</i>. The
            resulted message may have a unit specification.
            </summary>
            <remarks>
            <para>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </para>
            <para>
            The class uses the unit name localizations from the stock module <c>ModuleEnviroSensor</c>. In
            case of this module is deprecated or the tags are changed, the default English values will be
            used for the unit names.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo2_FormatWithScale"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.DistanceType.MeterLocTag">
            <summary>Localization tag for the "meter" units.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.DistanceType.KilometerLocTag">
            <summary>Localization tag for the "kilometer" units.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.DistanceType.meter">
            <summary>Localized suffix for the "meter" units. Scale x1.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.DistanceType.kilometer">
            <summary>Localized suffix for the "kilometer" untis. Scale x1000</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.DistanceType.value">
            <summary>A wrapped numeric value.</summary>
            <remarks>This is the original non-rounded and unscaled value.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.DistanceType.#ctor(System.Double)">
            <summary>Constructs an object from a numeric value.</summary>
            <param name="value">The numeric value in meters.</param>
            <seealso cref="M:KSPDev.GUIUtils.DistanceType.Format(System.Double,System.Nullable{System.Double},System.String)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo2_FormatWithScale"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.DistanceType.op_Implicit(System.Double)~KSPDev.GUIUtils.DistanceType">
            <summary>Coverts a numeric value into a type object.</summary>
            <param name="value">The numeric value to convert.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.DistanceType.op_Implicit(KSPDev.GUIUtils.DistanceType)~System.Double">
            <summary>Converts a type object into a numeric value.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A numeric value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.DistanceType.Format(System.Double,System.Nullable{System.Double},System.String)">
            <summary>Formats the value into a human friendly string with a unit specification.</summary>
            <remarks>
            The method tries to keep the resulted string meaningful and as short as possible. For this
            reason the big values may be scaled down and/or rounded.
            </remarks>
            <param name="value">The unscaled numeric value to format.</param>
            <param name="scale">
            The fixed scale to apply to the value before formatting. The formatting method can uderstand
            only a few scales:
            <list type="bullet">
            <item>Meters: scale=<c>1.0</c>. <i>It's a base distance unit in the game.</i></item>
            <item>Kilometers: scale=<c>1.0e+3</c>.</item>
            </list>
            <para>
            The unknown scales will be rounded <i>down</i> to the closest known scale. If this parameter
            is omitted, then the best scale for the value will be choosen automatically.
            </para>
            </param>
            <param name="format">
            The specific numeric number format to use. If this parameter is specified, then the method
            doesn't try to guess the right scale. Instead, it uses either the provided
            <paramref name="scale"/>, or <c>1.0</c> if nothing is provided. If the format is not
            specified, then it's choosen basing on the scale.
            </param>
            <returns>A formatted and localized string</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo2_FormatWithScale"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/DistanceType-Examples.cs" region="DistanceTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.DistanceType.ToString">
            <summary>Returns a string formatted as a human friendly distance specification.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.DistanceType.Format(System.Double,System.Nullable{System.Double},System.String)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.ForceType">
            <summary>
            Localized message formatting class for a numeric value that represents a <i>force</i>. The
            resulted message may have a unit specification.
            </summary>
            <remarks>
            <para>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </para>
            <para>
            The class uses the unit name localizations from the stock module <c>ModuleEnviroSensor</c>. In
            case of this module is deprecated or the tags are changed, the default English values will be
            used for the unit names.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/ForceType-Examples.cs" region="ForceTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ForceType-Examples.cs" region="ForceTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ForceType-Examples.cs" region="ForceTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.ForceType.KilonewtonLocTag">
            <summary>Localization tag for the "kilonewton" units.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.ForceType.kiloNewton">
            <summary>Localized suffix for the "kilonewton" units. Scale x1.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.ForceType.value">
            <summary>A wrapped numeric value.</summary>
            <remarks>This is the original non-rounded and unscaled value.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.ForceType.#ctor(System.Double)">
            <summary>Constructs an object from a numeric value.</summary>
            <param name="value">The numeric value in kilonewtons.</param>
            <seealso cref="M:KSPDev.GUIUtils.ForceType.Format(System.Double,System.String)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/ForceType-Examples.cs" region="ForceTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ForceType-Examples.cs" region="ForceTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ForceType-Examples.cs" region="ForceTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.ForceType.op_Implicit(System.Double)~KSPDev.GUIUtils.ForceType">
            <summary>Coverts a numeric value into a type object.</summary>
            <param name="value">The numeric value to convert.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.ForceType.op_Implicit(KSPDev.GUIUtils.ForceType)~System.Double">
            <summary>Converts a type object into a numeric value.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A numeric value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.ForceType.Format(System.Double,System.String)">
            <summary>Formats the value into a human friendly string with a unit specification.</summary>
            <remarks>
            <para>
            The method tries to keep the resulted string meaningful and as short as possible. For this
            reason the big values may be scaled down and/or rounded.
            </para>
            <para>
            The base force unit in the game is <i>kilonewton</i>. I.e. value <c>1.0</c> in the game
            units is <i>one kilonewton</i>. Keep it in mind when passing the argument.
            </para>
            </remarks>
            <param name="value">The numeric value to format.</param>
            <param name="format">
            The specific float number format to use. If the format is not specified, then it's choosen
            basing on the value.
            </param>
            <returns>A formatted and localized string</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/ForceType-Examples.cs" region="ForceTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ForceType-Examples.cs" region="ForceTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.ForceType.ToString">
            <summary>Returns a string formatted as a human friendly force specification.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.ForceType.Format(System.Double,System.String)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.KeyboardEventType">
            <summary>Localized message formatting class for a Unity keyboard event.</summary>
            <remarks>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/KeyboardEventType-Examples.cs" region="KeyboardEventTypeDemo1"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.KeyboardEventType.value">
            <summary>A wrapped event value.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.KeyboardEventType.#ctor(UnityEngine.Event)">
            <summary>Constructs an object from an event.</summary>
            <param name="value">The keyboard event.</param>
            <seealso cref="M:KSPDev.GUIUtils.KeyboardEventType.Format(UnityEngine.Event)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/KeyboardEventType-Examples.cs" region="KeyboardEventTypeDemo1"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.KeyboardEventType.op_Implicit(UnityEngine.Event)~KSPDev.GUIUtils.KeyboardEventType">
            <summary>Converts a numeric value into a type object.</summary>
            <param name="value">The event value to convert.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.KeyboardEventType.op_Implicit(KSPDev.GUIUtils.KeyboardEventType)~UnityEngine.Event">
            <summary>Converts a type object into an event value.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A numeric value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.KeyboardEventType.Format(UnityEngine.Event)">
            <summary>Formats the value into a human friendly string.</summary>
            <param name="value">The keyboard event value to format.</param>
            <returns>A formatted and localized string</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/KeyboardEventType-Examples.cs" region="KeyboardEventTypeDemo1"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.KeyboardEventType.ToString">
            <summary>Returns a string formatted as a human friendly key specification.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.KeyboardEventType.Format(UnityEngine.Event)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.MassType">
            <summary>
            Localized message formatting class for a numeric value that represents a <i>mass</i>. The
            resulted message may have a unit specification.
            </summary>
            <remarks>
            <para>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </para>
            <para>
            The class uses the unit name localizations from the stock module <c>ModuleEnviroSensor</c>. In
            case of this module is deprecated or the tags are changed, the default English values will be
            used for the unit names.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo2_FormatWithScale"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.MassType.GramLocTag">
            <summary>Localization tag for the "gram" units.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.MassType.KilogramLocTag">
            <summary>Localization tag for the "kilogram" units.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.MassType.TonLocTag">
            <summary>Localization tag for the "ton" units.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.MassType.gram">
            <summary>Localized suffix for the "gram" units. Scale <c>0.000001</c>.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.MassType.kilogram">
            <summary>Localized suffix for the "kilogram" untis. Scale <c>0.001</c></summary>
        </member>
        <member name="F:KSPDev.GUIUtils.MassType.ton">
            <summary>Localized suffix for the "ton" untis. Scale <c>1.0</c>.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.MassType.value">
            <summary>A wrapped numeric value.</summary>
            <remarks>This is the original non-rounded and unscaled value.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.MassType.#ctor(System.Double)">
            <summary>Constructs an object from a numeric value.</summary>
            <param name="value">The numeric value in meters.</param>
            <seealso cref="M:KSPDev.GUIUtils.MassType.Format(System.Double,System.Nullable{System.Double},System.String)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo2_FormatWithScale"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.MassType.op_Implicit(System.Double)~KSPDev.GUIUtils.MassType">
            <summary>Converts a numeric value into a type object.</summary>
            <param name="value">The numeric value to convert.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.MassType.op_Implicit(KSPDev.GUIUtils.MassType)~System.Double">
            <summary>Converts a type object into a numeric value.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A numeric value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.MassType.Format(System.Double,System.Nullable{System.Double},System.String)">
            <summary>Formats the value into a human friendly string with a unit specification.</summary>
            <remarks>
            The method tries to keep the resulted string meaningful and as short as possible. For this
            reason the big values may be scaled down and/or rounded.
            </remarks>
            <param name="value">The unscaled numeric value to format.</param>
            <param name="scale">
            The fixed scale to apply to the value before formatting. The formatting method can uderstand
            only a few scales:
            <list type="bullet">
            <item>Tons: scale=<c>1.0</c>. <i>It's a base mass unit in the game.</i></item>
            <item>Kilograms: scale=<c>1.0e-3</c>.</item>
            <item>Grams: scale=<c>1.0e-6</c>.</item>
            </list>
            <para>
            The unknown scales will be rounded <i>up</i> to the closest known scale. If this parameter
            is omitted, then the best scale for the value will be choosen automatically.
            </para>
            </param>
            <param name="format">
            The specific numeric number format to use. If this parameter is specified, then the method
            doesn't try to guess the right scale. Instead, it uses either the provided
            <paramref name="scale"/>, or <c>1.0</c> if nothing is provided. If the format is not
            specified, then it's choosen basing on the scale.
            </param>
            <returns>A formatted and localized string</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo2_FormatWithScale"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/MassType-Examples.cs" region="MassTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.MassType.ToString">
            <summary>Returns a string formatted as a human friendly distance specification.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.MassType.Format(System.Double,System.Nullable{System.Double},System.String)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.PercentType">
            <summary>
            Localized message formatting class for a numeric value that represents a <i>percentage</i>. The
            resulted message may have a unit specification.
            </summary>
            <remarks>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/PercentType-Examples.cs" region="PercentTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/PercentType-Examples.cs" region="PercentTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/PercentType-Examples.cs" region="PercentTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.PercentType.unitName">
            <summary>Suffix for the "percent" units (%).</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.PercentType.value">
            <summary>A wrapped numeric value.</summary>
            <remarks>This is the original non-rounded and unscaled value.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.PercentType.#ctor(System.Double)">
            <summary>Constructs a precentage type object.</summary>
            <param name="value">
            The numeric value which defines the ratio. Value <c>0.0</c> is <c>100%</c>.
            </param>
            <seealso cref="M:KSPDev.GUIUtils.PercentType.Format(System.Double,System.String)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/PercentType-Examples.cs" region="PercentTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/PercentType-Examples.cs" region="PercentTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/PercentType-Examples.cs" region="PercentTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.PercentType.op_Implicit(System.Double)~KSPDev.GUIUtils.PercentType">
            <summary>Coverts a numeric value into a type object.</summary>
            <param name="value">The numeric value to convert.</param>
            <returns>A type object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.PercentType.op_Implicit(KSPDev.GUIUtils.PercentType)~System.Double">
            <summary>Converts a type object into a numeric value.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A numeric value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.PercentType.Format(System.Double,System.String)">
            <summary>Formats the value into a human friendly string with a unit specification.</summary>
            <remarks>
            The method tries to keep the resulted string meaningful and as short as possible. For this
            reason the big values may be scaled down and/or rounded.
            </remarks>
            <param name="value">The numeric value to format.</param>
            <param name="format">
            The specific float number format to use. If the format is not specified, then it's choosen
            basing on the value. Note, that the <paramref name="value"/> is multiplied by <c>100.0</c>
            before formatting. 
            </param>
            <returns>A formatted and localized string</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/PercentType-Examples.cs" region="PercentTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/PercentType-Examples.cs" region="PercentTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.PercentType.ToString">
            <summary>Returns a string formatted as a human friendly percentage specification.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.PercentType.Format(System.Double,System.String)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.PressureType">
            <summary>
            Localized message formatting class for a numeric value that represents a <i>pressure</i>. The
            resulted message may have a unit specification.
            </summary>
            <remarks>
            <para>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </para>
            <para>
            The class uses the unit name localizations from the stock module <c>ModuleEnviroSensor</c>. In
            case of this module is deprecated or the tags are changed, the default English values will be
            used for the unit names.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/PressureType-Examples.cs" region="PressureTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/PressureType-Examples.cs" region="PressureTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/PressureType-Examples.cs" region="PressureTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.PressureType.KilopascalLocTag">
            <summary>Localization tag for the "kilopascal" units.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.PressureType.kiloPascal">
            <summary>Localized suffix for the "kilopascal" units. Scale x1.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.PressureType.value">
            <summary>A wrapped numeric value.</summary>
            <remarks>This is the original non-rounded and unscaled value.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.PressureType.#ctor(System.Double)">
            <summary>Constructs an object from a numeric value.</summary>
            <param name="value">The numeric value in the base units.</param>
            <seealso cref="M:KSPDev.GUIUtils.PressureType.Format(System.Double,System.String)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/PressureType-Examples.cs" region="PressureTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/PressureType-Examples.cs" region="PressureTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/PressureType-Examples.cs" region="PressureTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.PressureType.op_Implicit(System.Double)~KSPDev.GUIUtils.PressureType">
            <summary>Coverts a numeric value into a type object.</summary>
            <param name="value">The numeric value to convert.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.PressureType.op_Implicit(KSPDev.GUIUtils.PressureType)~System.Double">
            <summary>Converts a type object into a numeric value.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A numeric value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.PressureType.Format(System.Double,System.String)">
            <summary>Formats the value into a human friendly string with a unit specification.</summary>
            <remarks>
            <para>
            The method tries to keep the resulted string meaningful and as short as possible. For this
            reason the big values may be scaled down and/or rounded.
            </para>
            <para>
            The base pressure unit in the game is <i>kilopascal</i>. I.e. value <c>1.0</c> in the game
            units is <i>one kilopascal</i>. Keep it in mind when passing the argument.
            </para>
            </remarks>
            <param name="value">The numeric value to format.</param>
            <param name="format">
            The specific float number format to use. If the format is not specified, then it's choosen
            basing on the value.
            </param>
            <returns>A formatted and localized string</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/PressureType-Examples.cs" region="PressureTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/PressureType-Examples.cs" region="PressureTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.PressureType.ToString">
            <summary>Returns a string formatted as a human friendly pressure specification.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.PressureType.Format(System.Double,System.String)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.ResourceShortType">
            <summary>
            Localized message formatting class for a string value that represents an
            <i>abbreviated resource</i> type.
            </summary>
            <remarks>
            <para>
            This class resolves the resource type/ID into it's <i>short</i> localized name. It's usually 2
            letters long, but it's not mandatory.
            </para>
            <para>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceShortType-Examples.cs" region="ResourceShortTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceShortType-Examples.cs" region="ResourceShortTypeDemo2_FormatDefault"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.ResourceShortType.resourceId">
            <summary>A wrapped resource ID value.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceShortType.#ctor(System.String)">
            <summary>Constructs an object from a resource nane.</summary>
            <param name="resourceName">The resource type name.</param>
            <seealso cref="M:KSPDev.GUIUtils.ResourceShortType.Format(System.String)"/>
            <seealso cref="M:KSPDev.GUIUtils.ResourceShortType.Format(System.Int32)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceShortType-Examples.cs" region="ResourceShortTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceShortType-Examples.cs" region="ResourceShortTypeDemo2_FormatDefault"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceShortType.#ctor(System.Int32)">
            <summary>Constructs an object from a resource ID.</summary>
            <param name="resourceId">The resource ID.</param>
            <seealso cref="M:KSPDev.GUIUtils.ResourceShortType.Format(System.String)"/>
            <seealso cref="M:KSPDev.GUIUtils.ResourceShortType.Format(System.Int32)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceShortType-Examples.cs" region="ResourceShortTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceShortType-Examples.cs" region="ResourceShortTypeDemo2_FormatDefault"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceShortType.op_Implicit(System.String)~KSPDev.GUIUtils.ResourceShortType">
            <summary>Coverts a resource name value into a type object.</summary>
            <param name="value">The name to convert.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceShortType.op_Implicit(System.Int32)~KSPDev.GUIUtils.ResourceShortType">
            <summary>Coverts a resource ID value into a type object.</summary>
            <param name="value">The ID to convert.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceShortType.op_Implicit(KSPDev.GUIUtils.ResourceShortType)~System.String">
            <summary>Converts a type object into a resource name.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A string type value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceShortType.op_Implicit(KSPDev.GUIUtils.ResourceShortType)~System.Int32">
            <summary>Converts a type object into a resource ID.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A string type value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceShortType.Format(System.String)">
            <summary>Formats the value into a human friendly localized string.</summary>
            <param name="resourceName">The name of the resource to format.</param>
            <returns>A formatted and localized string.</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceShortType-Examples.cs" region="ResourceShortTypeDemo2_FormatDefault"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceShortType.Format(System.Int32)">
            <summary>Formats the value into a human friendly localized string.</summary>
            <param name="resourceId">The ID of the resource to format.</param>
            <returns>A formatted and localized string.</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceShortType-Examples.cs" region="ResourceShortTypeDemo2_FormatDefault"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceShortType.ToString">
            <summary>Returns a string formatted as a human friendly resource name.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.ResourceShortType.Format(System.Int32)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.ResourceType">
            <summary>
            Localized message formatting class for a string value that represents a <i>resource</i> type.
            </summary>
            <remarks>
            <para>This class resolves the resource type/ID into it's full localized name.</para>
            <para>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <seealso cref="T:KSPDev.ResourceUtils.StockResourceNames"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceType-Examples.cs" region="ResourceTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceType-Examples.cs" region="ResourceTypeDemo2_FormatDefault"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.ResourceType.resourceId">
            <summary>A wrapped resource ID value.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceType.#ctor(System.String)">
            <summary>Constructs an object from a resource nane.</summary>
            <param name="resourceName">The resource type name.</param>
            <seealso cref="M:KSPDev.GUIUtils.ResourceType.Format(System.Int32)"/>
            <seealso cref="M:KSPDev.GUIUtils.ResourceType.Format(System.String)"/>
            <seealso cref="T:KSPDev.ResourceUtils.StockResourceNames"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceType-Examples.cs" region="ResourceTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceType-Examples.cs" region="ResourceTypeDemo2_FormatDefault"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceType.#ctor(System.Int32)">
            <summary>Constructs an object from a resource ID.</summary>
            <param name="resourceId">The resource ID.</param>
            <seealso cref="M:KSPDev.GUIUtils.ResourceType.Format(System.Int32)"/>
            <seealso cref="M:KSPDev.GUIUtils.ResourceType.Format(System.String)"/>
            <seealso cref="T:KSPDev.ResourceUtils.StockResourceNames"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceType-Examples.cs" region="ResourceTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceType-Examples.cs" region="ResourceTypeDemo2_FormatDefault"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceType.op_Implicit(System.String)~KSPDev.GUIUtils.ResourceType">
            <summary>Coverts a resource name value into a type object.</summary>
            <param name="value">The name to convert.</param>
            <returns>An object.</returns>
            <seealso cref="T:KSPDev.ResourceUtils.StockResourceNames"/>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceType.op_Implicit(System.Int32)~KSPDev.GUIUtils.ResourceType">
            <summary>Coverts a resource ID value into a type object.</summary>
            <param name="value">The ID to convert.</param>
            <returns>An object.</returns>
            <seealso cref="T:KSPDev.ResourceUtils.StockResourceNames"/>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceType.op_Implicit(KSPDev.GUIUtils.ResourceType)~System.String">
            <summary>Converts a type object into a resource name.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A string type value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceType.op_Implicit(KSPDev.GUIUtils.ResourceType)~System.Int32">
            <summary>Converts a type object into a resource ID.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A string type value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceType.Format(System.String)">
            <summary>Formats the value into a human friendly localized string.</summary>
            <param name="resourceName">The name of the resource to format.</param>
            <returns>A formatted and localized string.</returns>
            <seealso cref="T:KSPDev.ResourceUtils.StockResourceNames"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceType-Examples.cs" region="ResourceTypeDemo2_FormatDefault"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceType.Format(System.Int32)">
            <summary>Formats the value into a human friendly localized string.</summary>
            <param name="resourceId">The ID of the resource to format.</param>
            <returns>A formatted and localized string.</returns>
            <seealso cref="T:KSPDev.ResourceUtils.StockResourceNames"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/ResourceType-Examples.cs" region="ResourceTypeDemo2_FormatDefault"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.ResourceType.ToString">
            <summary>Returns a string formatted as a human friendly resource name.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.ResourceType.Format(System.Int32)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.VelocityType">
            <summary>
            Localized message formatting class for a numeric value that represents a <i>velocity</i>. The
            resulted message may have a unit specification.
            </summary>
            <remarks>
            <para>
            Use it as a generic parameter when creating a <see cref="T:KSPDev.GUIUtils.LocalizableMessage"/> descendants.
            </para>
            <para>
            The class uses the unit name localizations from the stock module <c>ModuleEnviroSensor</c>. In
            case of this module is deprecated or the tags are changed, the default English values will be
            used for the unit names.
            </para>
            </remarks>
            <seealso cref="T:KSPDev.GUIUtils.Message`1"/><seealso cref="T:KSPDev.GUIUtils.Message`2"/><seealso cref="T:KSPDev.GUIUtils.Message`3"/><seealso cref="T:KSPDev.GUIUtils.Message`4"/><seealso cref="T:KSPDev.GUIUtils.Message`5"/><seealso cref="T:KSPDev.GUIUtils.MessageLookup`1"/>
            <seealso cref="T:KSPDev.GUIUtils.AngleType"/><seealso cref="T:KSPDev.GUIUtils.CompactNumberType"/><seealso cref="T:KSPDev.GUIUtils.CostType"/><seealso cref="T:KSPDev.GUIUtils.DistanceType"/><seealso cref="T:KSPDev.GUIUtils.ForceType"/><seealso cref="T:KSPDev.GUIUtils.KeyboardEventType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.PercentType"/><seealso cref="T:KSPDev.GUIUtils.PressureType"/><seealso cref="T:KSPDev.GUIUtils.ResourceShortType"/><seealso cref="T:KSPDev.GUIUtils.MassType"/><seealso cref="T:KSPDev.GUIUtils.ResourceType"/><seealso cref="T:KSPDev.GUIUtils.VelocityType"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/VelocityType-Examples.cs" region="VelocityTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/VelocityType-Examples.cs" region="VelocityTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/VelocityType-Examples.cs" region="VelocityTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.VelocityType.MeterPerSecondLocTag">
            <summary>Localization tag for the "meter per second" units.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.VelocityType.metrePerSecond">
            <summary>Localized suffix for the "metre per second" units. Scale x1.</summary>
        </member>
        <member name="F:KSPDev.GUIUtils.VelocityType.value">
            <summary>A wrapped numeric value.</summary>
            <remarks>This is the original non-rounded and unscaled value.</remarks>
        </member>
        <member name="M:KSPDev.GUIUtils.VelocityType.#ctor(System.Double)">
            <summary>Constructs an object from a numeric value.</summary>
            <param name="value">The numeric value in the base units.</param>
            <seealso cref="M:KSPDev.GUIUtils.VelocityType.Format(System.Double,System.String)"/>
            <example><code source="Examples/GUIUtils/TypeFormatters/VelocityType-Examples.cs" region="VelocityTypeDemo1"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/VelocityType-Examples.cs" region="VelocityTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/VelocityType-Examples.cs" region="VelocityTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.VelocityType.op_Implicit(System.Double)~KSPDev.GUIUtils.VelocityType">
            <summary>Coverts a numeric value into a type object.</summary>
            <param name="value">The numeric value to convert.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.VelocityType.op_Implicit(KSPDev.GUIUtils.VelocityType)~System.Double">
            <summary>Converts a type object into a numeric value.</summary>
            <param name="obj">The object type to convert.</param>
            <returns>A numeric value.</returns>
        </member>
        <member name="M:KSPDev.GUIUtils.VelocityType.Format(System.Double,System.String)">
            <summary>Formats the value into a human friendly string with a unit specification.</summary>
            <remarks>
            <para>
            The method tries to keep the resulted string meaningful and as short as possible. For this
            reason the big values may be scaled down and/or rounded.
            </para>
            <para>
            The base velocity unit in the game is <i>m/s</i>. I.e. value <c>1.0</c> in the game
            units is <i>one meter per second</i>. Keep it in mind when passing the argument.
            </para>
            </remarks>
            <param name="value">The numeric value to format.</param>
            <param name="format">
            The specific float number format to use. If the format is not specified, then it's choosen
            basing on the value.
            </param>
            <returns>A formatted and localized string</returns>
            <example><code source="Examples/GUIUtils/TypeFormatters/VelocityType-Examples.cs" region="VelocityTypeDemo2_FormatDefault"/></example>
            <example><code source="Examples/GUIUtils/TypeFormatters/VelocityType-Examples.cs" region="VelocityTypeDemo2_FormatFixed"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.VelocityType.ToString">
            <summary>Returns a string formatted as a human friendly pressure specification.</summary>
            <returns>A string representing the value.</returns>
            <seealso cref="M:KSPDev.GUIUtils.VelocityType.Format(System.Double,System.String)"/>
        </member>
        <member name="T:KSPDev.GUIUtils.UISoundPlayer">
            <summary>Helper class to play sounds in the game GUI. Such sounds are not 3D aligned.</summary>
            <remarks>
            <para>
            Use this player when the source of the sound is a GUI object (e.g. a GUI control). This class
            implements all the boilerplate to load and play the sound resources. All the sounds are cached
            within the scene, so repeating requests to the same sound won't add extra latency.
            </para>
            <para>
            If latency is ciritcal for the caller, then the sound resource can be pre-cached via the
            <see cref="M:KSPDev.GUIUtils.UISoundPlayer.CacheSound(System.String)"/> method. It will increase the scene loading time, though.
            </para>
            <para>This module is initialized from the KSPDev Utils loader.</para>
            </remarks>
            <example><code source="Examples/GUIUtils/UISoundPlayer-Examples.cs" region="UISoundPlayerDemo1"/></example>
        </member>
        <member name="F:KSPDev.GUIUtils.UISoundPlayer.audioCache">
            <summary>Global scene cache for all the sounds.</summary>
        </member>
        <member name="M:KSPDev.GUIUtils.UISoundPlayer.Play(System.String)">
            <summary>Plays the specified sound.</summary>
            <remarks>
            Every request is cached, so that the subsequent calls to play the same sound won't require the
            audio clip to load. However, the same cached sound cannot be played simultaneously from the
            different calls - each call will abort the previous play action of the sound.
            </remarks>
            <param name="audioPath">
            The file path relative to <c>GameData</c>. It can be empty, in which case nothing is played.
            </param>
            <example><code source="Examples/GUIUtils/UISoundPlayer-Examples.cs" region="UISoundPlayerDemo1"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.UISoundPlayer.CacheSound(System.String)">
            <summary>Loads the sound into cache but doesn't play it.</summary>
            <remarks>
            Use this method when the sound is expected to be frequently played in the scene. However, it
            it only makes sense to pre-cache a resource if the first usage of the sound is a latency
            critical. The latency difference is not hight enough to be significant for the GUI actions.
            </remarks>
            <param name="audioPath">File path relative to <c>GameData</c>.</param>
            <example><code source="Examples/GUIUtils/UISoundPlayer-Examples.cs" region="UISoundPlayerDemo1"/></example>
        </member>
        <member name="M:KSPDev.GUIUtils.UISoundPlayer.Awake">
            <summary>Initializes the <see cref="P:KSPDev.GUIUtils.UISoundPlayer.instance"/>.</summary>
            <remarks>It's expected to be called only once.</remarks>
            <seealso cref="T:KSPDev.LibraryLoader"/>
        </member>
        <member name="M:KSPDev.GUIUtils.UISoundPlayer.GetOrLoadAudio(System.String)">
            <summary>Loads the audio sample and plays it.</summary>
            <param name="audioPath">The file path relative to <c>GameData</c>.</param>
            <returns>An audio resource if loaded or found in the cache, otherwise <c>null</c>.</returns>
        </member>
        <member name="P:KSPDev.GUIUtils.UISoundPlayer.instance">
            <summary>Returns the instance of the player in the current scene.</summary>
            <value>Instance of the player.</value>
        </member>
        <member name="T:KSPDev.InputUtils.KeyModifiers">
            <summary>Flags to specify key modifiers combination.</summary>
            <remarks>Modifiers can be joined to get a combination. E.g. <c>AnyAlt | AnyShift</c>.</remarks>
            <seealso cref="M:KSPDev.InputUtils.EventChecker.IsModifierCombinationPressed(KSPDev.InputUtils.KeyModifiers)"/>
        </member>
        <member name="F:KSPDev.InputUtils.KeyModifiers.None">
            <summary>No modifier keys are pressed.</summary>
            <remarks>This value only makes sense when used alone. Combining it with any other value
            will result in ignoring value <c>None</c>.</remarks>
        </member>
        <member name="F:KSPDev.InputUtils.KeyModifiers.AnyAlt">
            <summary>Left or right ALT key pressed.</summary>
        </member>
        <member name="F:KSPDev.InputUtils.KeyModifiers.AnyShift">
            <summary>Left or right SHIFT key pressed.</summary>
        </member>
        <member name="F:KSPDev.InputUtils.KeyModifiers.AnyControl">
            <summary>Left or right CONTROL key pressed.</summary>
        </member>
        <member name="T:KSPDev.InputUtils.EventChecker">
            <summary>A helper to verify various event handling conditions.</summary>
        </member>
        <member name="M:KSPDev.InputUtils.EventChecker.IsModifierCombinationPressed(KSPDev.InputUtils.KeyModifiers)">
            <summary>Verifies that the requested key modifiers are pressed.</summary>
            <remarks>The check will succeed only if the exact set of modifier keys is pressed. If there
            are more or less modifiers pressed the check will fail. E.g. if there are <c>LeftAlt</c> and
            <c>LeftShift</c> pressed but the check is executed against
            <c>AnyShift</c> then it will fail. Though, checking for <c>AnyShift | AnyAlt</c> will succeed.
            <para>In case of checking for <c>None</c> the check will require no modifier keys to be
            pressed. If you deal with mouse button events it's a good idea to verify if no modifiers are
            pressed even if you don't care about other combinations. It will let other modders to use
            mouse buttons and not to interfere with your mod.</para>
            </remarks>
            <param name="modifiers">A combination of key modifiers to verify.</param>
            <returns><c>true</c> when exactly the requested combination is pressed.</returns>
            <seealso cref="T:KSPDev.InputUtils.KeyModifiers"/>
        </member>
        <member name="T:KSPDev.InputUtils.KeyboardInputSwitch">
             <summary>
             Wrapper around a keyboard key code that incapsulates the persiting and the handling logic into
             a single class.
             </summary>
             <remarks>
             <para>
             The fields of this type are correctly handled by the stock game persisting functionality
             (<see cref="T:KSPField"/>). It's also compatible with the KSPDev persisting logic
             (<see cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>).
             </para>
             <para>
             <i>Important!</i> This type will be correctly loaded or saved by the KSP core but it will
             <i>not</i> be correctly copied in the game's editor. It's not an issue when the field is static
             but in case of it's an instance member, the code must not be accessing it in the editor mode.
             </para>
             </remarks>
             <example>
             <para>
             To define a key binding just create a class with the key code as a parameter, and notify the
             switch about the frame updates so that it could update its state:
             </para>
             <code><![CDATA[
             class MyClass : MonoBehaviour {
               KeyboardInputSwitch mySwitch = new KeyboardInputSwitch(KeyCode.Alpha1);
            
               void Update() {
                 if (mySwitch.Update()) {
                   Debug.Log("The key is being hold");
                 }
               }
             }
             ]]></code>
             <para>
             In case of the switch state needs to be checked from the other methods use <see cref="P:KSPDev.InputUtils.KeyboardInputSwitch.isHold"/>
             property:
             </para>
             <code><![CDATA[
             class MyClass : MonoBehaviour {
               KeyboardInputSwitch mySwitch = new KeyboardInputSwitch(KeyCode.Alpha1);
            
               void Update() {
                 mySwitch.Update();
               }
            
               void FixedUpdate() {
                 if (mySwitch.isHold) {
                   Debug.Log("The key is being hold");
                 }
               }
             }
             ]]></code>
             <para>
             When the code needs to react to a switch state event, it can register a listener:
             </para>
             <code><![CDATA[
             class MyClass : MonoBehaviour {
               KeyboardInputSwitch mySwitch = new KeyboardInputSwitch(KeyCode.Alpha1);
            
               void Awake() {
                 mySwitch.OnStateChanged += OnSwitchStateChange;
                 mySwitch.OnPress += delegate{
                   Debug.Log("Key pressed");
                 };
                 mySwitch.OnRelease += delegate{
                   Debug.Log("Key is released");
                 };
                 mySwitch.OnClick += delegate{
                   Debug.Log("Key click registered");
                 };
               }
            
               void OnDestroy() {
                 // Do nothing since in this example the switch is an instance field, and it will be
                 // destroyed together with the owning class (and, hence, all the listeners).
                 // However, if it was a static field we would do something like this:
                 mySwitch.OnStateChanged -= OnSwitchStateChange;
                 // Anonymous functions cannot be unregistered, so don't use them on the static fields.
               }
            
               void OnSwitchStateChange() {
                 Debug.LogFormat("Switch state changed to: {0}", mySwitch.isHold);
               }
            
               void Update() {
                 mySwitch.Update();
               }
             }
             ]]></code>
             <para>
             In many cases you may want to load a key bining from a config file. It can be achieved by
             adding an attribute to the field of this type:
             </para>
             <code><![CDATA[
             [PersistentFieldsFile("my/mod/settings.cfg", "")]
             class MyClass : PartModule {
               // Note that KSPField attributed fields *must* be public.
               [KSPField]
               public KeyboardInputSwitch switchFromPart = new KeyboardInputSwitch(KeyCode.Alpha1);
            
               // Note that for a PersistentField attribute the field doesn't need to be public.
               // However, the private fields are handled a bit differently (read the docs!).
               [PersistentField("Keyboard/Bindings")]
               KeyboardInputSwitch switchFromSettings = new KeyboardInputSwitch(KeyCode.Alpha2);
            
               public override void OnLoad(ConfigNode node) {
                 // At this point `switchFromPart` is already loaded from the part's config.
                 base.OnLoad(node);
                 // Load `switchFromSettings` via KSPDev from "my/mod/settings.cfg".
                 KSPDev.ConfigUtils.ConfigAccessor.ReadFieldsInType(typeof(MyClass), this);
               }
             }
             ]]></code>
             </example>
             <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
             <item name="T:KSPField">
  <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_field.html">KSP: KSPField</seealso>
</item>
        </member>
        <member name="F:KSPDev.InputUtils.KeyboardInputSwitch.ClickDelay">
            <summary>Maximum delay to record a click event.</summary>
            <remarks>
            If the key is released later than this delay, then the click event will not be triggered. By
            default the switch uses the same value as defined in the core KSP <see cref="T:KeyBinding"/>.
            </remarks>
            <seealso cref="E:KSPDev.InputUtils.KeyboardInputSwitch.OnClick"/>
            <seealso href="https://kerbalspaceprogram.com/api/class_key_binding.html">KSP: KeyBinding</seealso>
        </member>
        <member name="F:KSPDev.InputUtils.KeyboardInputSwitch.keyCode">
            <summary>Key code for the switch.</summary>
            <remarks>
            It can be changed in runtime but if the hold state was <c>true</c> then it must be reset by
            the caller.
            </remarks>
        </member>
        <member name="F:KSPDev.InputUtils.KeyboardInputSwitch.keyboardEnabled">
            <summary>
            Determines if the switch should react on the keyboard events from the <see cref="M:KSPDev.InputUtils.KeyboardInputSwitch.Update"/>
            method.
            </summary>
            <remarks>
            If switch is disabled while the key was pressed then the hold state will <i>not</i> be reset.
            If the state needs to be reset then caller must do it explicitly.
            </remarks>
        </member>
        <member name="F:KSPDev.InputUtils.KeyboardInputSwitch.lastPressTime">
            <summary>Last press event timestamp.</summary>
        </member>
        <member name="M:KSPDev.InputUtils.KeyboardInputSwitch.Load(ConfigNode)">
            <summary>Loads a persisted switch binding.</summary>
            <param name="node">The node to get values from.</param>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
            <item name="T:KSPField">
  <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_field.html">KSP: KSPField</seealso>
</item>
        </member>
        <member name="M:KSPDev.InputUtils.KeyboardInputSwitch.Save(ConfigNode)">
            <summary>Saves the switch binding.</summary>
            <param name="node">The node to store the values into.</param>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
            <item name="T:KSPField">
  <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_field.html">KSP: KSPField</seealso>
</item>
        </member>
        <member name="M:KSPDev.InputUtils.KeyboardInputSwitch.#ctor">
            <summary>
            Creates a switch with a <see cref="F:UnityEngine.KeyCode.None"/> key binding. It's a default constructor
            needed for the <see cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/> functionality to work.
            </summary>
        </member>
        <member name="M:KSPDev.InputUtils.KeyboardInputSwitch.#ctor(UnityEngine.KeyCode)">
            <summary>Main constructor to create a switch for the provided key code.</summary>
            <param name="code">
            The key code to activate the switch. Can be <see cref="F:UnityEngine.KeyCode.None"/> in which case this
            switch can only be changed via the code.
            </param>
        </member>
        <member name="M:KSPDev.InputUtils.KeyboardInputSwitch.Update">
            <summary>Checks the keyboard status and updates the switch accordingly.</summary>
            <remarks>
            This method handles the game's pause and time warp modes, and disables the key handling in
            these modes. It also respects the UI locking mode set by the game.
            </remarks>
            <returns>The current hold state.</returns>
            <seealso cref="F:KSPDev.InputUtils.KeyboardInputSwitch.keyboardEnabled"/>
        </member>
        <member name="M:KSPDev.InputUtils.KeyboardInputSwitch.SetHoldState(System.Boolean)">
            <summary>Updates the hold state and triggers the event(s) if any.</summary>
            <remarks>This method can be used to simulate a click event.</remarks>
            <param name="newState">The new hold state.</param>
            <seealso cref="E:KSPDev.InputUtils.KeyboardInputSwitch.OnStateChanged"/>
            <seealso cref="E:KSPDev.InputUtils.KeyboardInputSwitch.OnClick"/>
        </member>
        <member name="P:KSPDev.InputUtils.KeyboardInputSwitch.isAnyKeyHold">
            <summary>Tells if any switch is being hold.</summary>
            <remarks>
            This value is a version specific. I.e. the multiple versions of the utils DLL will not see
            each other. So, if this property returns <c>true</c> then the only safe assumption is that any
            switch <i>within the running</i> mod is being hold. Ideally, when all the mods in the game run
            the same version of the utils DLL, this property will truly say if any in the <i>game</i> is
            in the hold state.
            </remarks>
            <value><c>true</c> if any <i>switch</i> key is being hold.</value>
        </member>
        <member name="P:KSPDev.InputUtils.KeyboardInputSwitch.isHold">
            <summary>Defines the current hold state of the switch.</summary>
            <remarks>
            This property may not represent the actual keyboard key hold state since it can be assigned
            from the code.
            </remarks>
            <value><c>true</c> if this switch is being hold.</value>
            <see cref="M:KSPDev.InputUtils.KeyboardInputSwitch.SetHoldState(System.Boolean)"/>
        </member>
        <member name="E:KSPDev.InputUtils.KeyboardInputSwitch.OnStateChanged">
            <summary>
            Event that notifies about the hold state change. The event is only called when the state has
            actually changed.
            </summary>
            <remarks>
            Remember to remove the listeners when their owner class is destroyed by the game. If it's not
            done then no NRE will happen, but the "ghost" listeners will continue to react on the events.  
            </remarks>
        </member>
        <member name="E:KSPDev.InputUtils.KeyboardInputSwitch.OnPress">
            <summary>
            Event that notifies that the switch key has been pressed.
            </summary>
            <remarks>
            Remember to remove the listeners when their owner class is destroyed by the game. If it's not
            done then no NRE will happen, but the "ghost" listeners will continue to react on the events.  
            </remarks>
        </member>
        <member name="E:KSPDev.InputUtils.KeyboardInputSwitch.OnRelease">
            <summary>
            Event that notifies that the switch key has been released.
            </summary>
            <remarks>
            Remember to remove the listeners when their owner class is destroyed by the game. If it's not
            done then no NRE will happen, but the "ghost" listeners will continue to react on the events.  
            </remarks>
        </member>
        <member name="E:KSPDev.InputUtils.KeyboardInputSwitch.OnClick">
            <summary>
            Event that notifies about the click event.
            </summary>
            <remarks>
            <para>
            In order for the click event to trigger the key release event must happen within the
            <see cref="F:KSPDev.InputUtils.KeyboardInputSwitch.ClickDelay"/> delay after the preceding press event.
            </para>
            <para>
            Remember to remove the listeners when their owner class is destroyed by the game. If it's not
            done then no NRE will happen, but the "ghost" listeners will continue to react on the events.  
            </para>  
            </remarks>
            <seealso cref="F:KSPDev.InputUtils.KeyboardInputSwitch.ClickDelay"/>
        </member>
        <member name="T:KSPDev.KSPInterfaces.IJointEventsListener">
            <summary>Declares callbacks that are called when a joint between two parts is changed.</summary>
            <remarks>
            Events of this inteface are triggered by Unity engine via reflections. It's not required for the
            module to implement the interface to be notified but by implementing it the code becomes more
            consistent and less error prone.
            </remarks>
            <example>
            <code><![CDATA[
            public class MyModule : PartModule, IJointEventsListener {
              /// <inheritdoc/>
              public void OnJointBreak(float breakForce) {
                Debug.LogInfoFormat("OnJointBreak: {0}", breakForce);
              }
            }
            ]]></code>
            </example>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnJointBreak.html">
            Unity 3D: OnJointBreak</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IJointEventsListener.OnJointBreak(System.Single)">
            <summary>Triggers when connection is broken due to too strong force applied.</summary>
            <param name="breakForce">Actual force that has been applied.</param>
        </member>
        <member name="T:KSPDev.KSPInterfaces.IKSPDevJointLockState">
            <summary>A documented version of the KSP <c>IJointLockState</c> interface.</summary>
            <remarks>
            Inherit from <see cref="T:IJointLockState"/> to let the game know if this part's joint can be
            unlocked. This interface is a full equivalent of <see cref="T:IJointLockState"></see> except it's
            documented. The modules that inherit both interfaces get better code documentation.
            </remarks>
            <example>
            <code><![CDATA[
            public class MyModule : PartModule, IJointLockState, IKSPDevJointLockState {
              /// <inheritdoc/>
              public override bool IsJointUnlocked() {
                return true;
              }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IKSPDevJointLockState.IsJointUnlocked">
            <summary>Tells if the parts can move relative to each other.</summary>
            <remarks>
            <para>
            It's important to override this method when the joint is not rigid. For the rigid joints the
            game may create autostruts when appropriate, which will adhere the parts to each other.
            </para>
            <para>This method is called on the child part to check it's joint state to the parent.</para>
            </remarks>
            <returns><c>true</c> if the joint are not fixed relative to each other.</returns>
        </member>
        <member name="T:KSPDev.KSPInterfaces.IKSPActivateOnDecouple">
            <summary>A documented version of the <see cref="T:IActivateOnDecouple"/> interface.</summary>
            <remarks>
            Inherit from <see cref="T:IActivateOnDecouple"/> to be able reacting on the parts decoupling.
            This interface is a full equivalent of <see cref="T:IActivateOnDecouple"/> except it's documented.
            The modules that inherit both interfaces get better code documentation.
            </remarks>
            <example>
            <code><![CDATA[
            public class MyModule : PartModule, IActivateOnDecouple, IKSPActivateOnDecouple {
              /// <inheritdoc/>
              public virtual void DecoupleAction(string nodeName, bool weDecouple) {
                Debug.LogInfo("DecoupleAction");
              }
            }
            ]]></code>
            </example>
            <seealso href="https://kerbalspaceprogram.com/api/interface_i_activate_on_decouple.html">
            KSP: IActivateOnDecouple</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IKSPActivateOnDecouple.DecoupleAction(System.String,System.Boolean)">
            <summary>Called when two parts decouple.</summary>
            <remarks>
            The callback is only called on the part if it has an attach node that connects it to the other
            part. For this event to fire a decoupling logic must be executed. A simple removal from the
            vessel hierarchy won't trigger the event.
            </remarks>
            <param name="nodeName">The attach node name that has been detached.</param>
            <param name="weDecouple">
            If <c>true</c> then the part being notified was a child in the relation to the detached part.
            </param>
        </member>
        <member name="T:KSPDev.KSPInterfaces.IKSPDevModuleInfo">
            <summary>Documented analogue of IModuleInfo interface.</summary>
            <remarks>
            Inherit from <see cref="T:IModuleInfo"/> to be able customizing module descriptions for the
            editor. <see cref="T:KSPDev.KSPInterfaces.IKSPDevModuleInfo"/> is a full equivalent except it's documented. Inheriting
            modules from both interfaces gives better code documentation.
            </remarks>
            <example>
            <code><![CDATA[
            public class MyModule : PartModule, IPartModule, IModuleInfo, IKSPDevModuleInfo {
              /// <inheritdoc/>
              public override string GetInfo() {
                return "<size=20><color=#ff0000ff><b>BLAH!</b></color></size>";
              }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IKSPDevModuleInfo.GetInfo">
            <summary>Returns description for the editor part's browser.</summary>
            <remarks>
            Declared as virtual in <see cref="T:PartModule"/> and, hence, almost always needs to be
            overridden. Though, it's also a part of <see cref="T:IModuleInfo"/>.
            </remarks>
            <returns>
            Rich text to show the in GUI. Regular Unity rich text styles are supported.
            <para>
            Be careful when using &lt;size&gt;. It specifies size of the font in pixels which is an
            absolute value. As of KSP v1.1.3 normal info font size is 11px but in the future versions it
            may change.
            </para>
            </returns>
            <seealso href="https://docs.unity3d.com/Manual/StyledText.html">Unity 3D: Rich text</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IKSPDevModuleInfo.GetModuleTitle">
            <summary>Returns module title to show in the editor part's details panel.</summary>
            <returns>Title of the module.</returns>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IKSPDevModuleInfo.GetDrawModulePanelCallback">
            <summary>Returns a method delegate to draw a custom panel.</summary>
            <returns>Delegate or <c>null</c> if not necessary.</returns>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IKSPDevModuleInfo.GetPrimaryField">
            <summary>Return a string to be displayed in the main information box on the tooltip.</summary>
            <returns>String or <c>null</c> if nothing is that important to be up there.</returns>
        </member>
        <member name="T:KSPDev.KSPInterfaces.IPartModule">
             <summary>Interface for KSP part module.</summary>
             <remarks>
             <para>
             Naturally, KSP doesn't declare any part module interface (unfortunately), and all modder's
             modules just inherit from <see cref="T:PartModule"/>. This interface is introduced for the better
             OOP approach. It reveals methods that a regular module can override, and provides documentation
             for each of them.
             </para>
             <para>
             Some methods of the module interface look familiar to the ones from Unity but they are not
             behaving in the same way in every scene. Moreover, not all methods get called in every scene.
             </para>
            
             <para>In the <i>loading scene</i> the callbacks are executed in the following order:</para>
             <list type="table">
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnAwake"/></term>
             <description>
             Notifies about creating new module. If it's a clone operation then all <see cref="T:KSPField"/>
             annotated fields have values from the part's config. Otherwise, all the fields are in the
             initial states.
             </description>
             </item>
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnLoad(ConfigNode)"/></term>
             <description>
             The provided config node is the original configuration from the part's definition. All the
             annotated fields are populated before this method gets control.
             </description>
             </item>
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnStart(PartModule.StartState)"/></term>
             <description>
             Is <b>not called</b> since the parts being created are prefabs and icon models. They are not
             real parts that behave on a vessel.
             </description>
             </item>
             </list>
            
             <para>In the <i>editor</i> the callbacks are executed in the following order:</para>
             <list type="table">
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnAwake"/></term>
             <description>
             Notifies about creating new module. If it's a clone operation then all <see cref="T:KSPField"/>
             annotated fields have values from the part's config. Otherwise, all the fields are in the
             initial states.
             <para>
             New parts in the editor are created via the clone operation. I.e. each time a part is dragged
             from the toolbar it's get cloned from the prefab.
             </para>
             </description>
             </item>
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnLoad(ConfigNode)"/></term>
             <description>Is <b>not called</b> for the new parts since they are clonned. When a saved vessel
             is loaded in the editor every part on the vessel gets this method called with the values from
             the save file. The annotated fields are populated from the file <i>before</i> this method gets
             control, so it's safe to use them.
             </description>
             </item>
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnInitialize"/></term>
             <description>Hard to say what it means for the edtior, but important difference from the flight
             scenes is that this method is called before <see cref="M:KSPDev.KSPInterfaces.IPartModule.OnStart(PartModule.StartState)"/>.
             </description>
             </item>
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnStart(PartModule.StartState)"/></term>
             <description>The code must check if the current scene is editor, and do the behavior changes as
             needed. In the editor parts must not have active behavior.
             </description>
             </item>
             </list>
            
             <para>In the <i>fligth scenes</i> the callbacks are executed in the following order:</para>
             <list type="table">
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnAwake"/></term>
             <description>Notifies about creating new module. All <see cref="T:KSPField"/> annotated fields
             have initial values.
             </description>
             </item>
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnLoad(ConfigNode)"/></term>
             <description>The provided config node is the config from the save file. The annotated fields are
             populated from the file <i>before</i> this method gets control, so it's safe to use them.
             </description>
             </item>
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnStart(PartModule.StartState)"/></term>
             <description>This method is called when all parts in the vessel are created and loaded. The code
             must check if the current scene is flight, and do the behavior changes as needed.
             </description>
             </item>
             <item>
             <term><see cref="M:KSPDev.KSPInterfaces.IPartModule.OnInitialize"/></term>
             <description>Indicates that part should start handling physics if any. It may be called multiple
             times during the part's life. First time it's called when vessel is completely loaded in the
             secene and all parts are started. Other calls may happen when game returns from a physics
             suspended state (e.g. from a warp mode back to x1 time speed).
             <para>
             Code must check if editor scene is loaded since this method is called differently in the editor.
             </para>
             </description>
             </item>
             </list>
            
             </remarks>
             <example>
             <code><![CDATA[
             public class MyModule : PartModule, IPartModule {
               /// <inheritdoc/>
               public override void OnAwake() {
               }
             }
             ]]></code>
             </example>
             <seealso href="https://kerbalspaceprogram.com/api/class_part_module.html">
             KSP: PartModule</seealso>
             <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_field.html">
             KSP: KSPField</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IPartModule.OnAwake">
            <summary>Initializes a new instance of the module on the part.</summary>
            <remarks>
            Called on a newly created part. Note, that this method is a bad place to interact with the
            other modules on the part since module initialization order is not defined.
            <para>See more details on the calling sequence in <see cref="T:KSPDev.KSPInterfaces.IPartModule"/>.</para>
            </remarks>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IPartModule.OnLoad(ConfigNode)">
            <summary>Notifies that the part's config is loaded.</summary>
            <remarks>
            All the fields annotated by <see cref="T:KSPField"/> are already loaded at this moment. Use the
            node from this method to handle special values that are not supported by KSP.
            <para>See more details on the calling sequence in <see cref="T:KSPDev.KSPInterfaces.IPartModule"/>.</para>
            </remarks>
            <param name="node">Either the part's config node or a configuration from a save file.</param>
            <seealso href="https://kerbalspaceprogram.com/api/class_config_node.html">
            KSP: ConfigNode</seealso>
            <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_field.html">
            KSP: KSPField</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IPartModule.OnStart(PartModule.StartState)">
            <summary>Initializes module's state after all other modules have been created.</summary>
            <remarks>
            Note, that this is not the right place to start physics on the part. This callback is good to
            acquire references to the the other modules on the part, and for establishing the internal
            state of the module.
            </remarks>
            <para>See more details on the calling sequence in <see cref="T:KSPDev.KSPInterfaces.IPartModule"/>.</para>
            <param name="state">State that specifies the situation of the vessel.</param>
            <seealso href="https://kerbalspaceprogram.com/api/class_part_module.html#ac6597127392e002b92f7427cf50244d3">
            KSP: PartModule.StartState</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IPartModule.OnStartFinished(PartModule.StartState)">
            <summary>Notifies that all the modules on the part have been started.</summary>
            <remarks>
            This is the right place to <i>interact</i> with the other modules on the part. At this moment
            they all are assumed to be properly setup.
            </remarks>
            <param name="state">State that specifies the situation of the vessel.</param>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IPartModule.OnInitialize">
            <summary>
            Called on a vessel when it's time to start the physics on it.
            </summary>
            <remarks>It can be called multiple times during the part's life.</remarks>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IPartModule.OnUpdate">
            <summary>Notifies about a frame update.</summary>
            <remarks>
            Be very careful about placing functionality into this callback even if it's bare "if/else"
            statement. This callback is called on <b>every</b> frame update. It means that even a simple
            piece of code will be called for every part that implements the module. Too many parts with
            such modules may significantly drop FPS.
            </remarks>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html">
            Unity 3D: Update</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IPartModule.OnFixedUpdate">
            <summary>Notifies about a physics frame update.</summary>
            <remarks>
            Physics in Unity is updated every <c>20ms</c> which gives 50 calls per a second. Be
            <i>extremly</i> careful about placing functionality into this callback. All fixed updates are
            required to complete, so if 50 updates take longer than one second then the game's speed will
            degrade.
            <para>In general, don't even override this callback unless it's absolutely required.</para>
            </remarks>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html">
            Unity 3D: FixedUpdate</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IPartModule.OnSave(ConfigNode)">
            <summary>Notifies about saving module state.</summary>
            <remarks>
            This isn't required to be saving into a real file. This method is a generic way to save module
            state when it's needed. Note, that saving <c>null</c> is usually a problem for KSP, so always
            give default non-null values to every persisted field.
            <para>
            Persistent fields annotated woth <see cref="T:KSPField"/> are saved before this callback is
            called. Only save values that need special handling. 
            </para>
            </remarks>
            <param name="node">Config node to save data into.</param>
            <seealso href="https://kerbalspaceprogram.com/api/class_config_node.html">
            KSP: ConfigNode</seealso>
            <seealso href="https://kerbalspaceprogram.com/api/class_k_s_p_field.html">
            KSP: KSPField</seealso>
        </member>
        <member name="T:KSPDev.KSPInterfaces.IsDestroyable">
            <summary>Interface for modules that need to know if script object is destroyed.</summary>
            <remarks>
            Events of this inteface are triggered by Unity engine via reflections. It's not required for the
            module to implement the interface to be notified but by implementing it the code becomes more
            consistent and less error prone.
            </remarks>
            <example>
            <code><![CDATA[
            public class MyModule : PartModule, IsDestroyable {
              /// <inheritdoc/>
              public void OnDestory() {
                Debug.LogInfo("OnDestory");
              }
            }
            ]]></code>
            </example>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnDestroy.html">
            Unity 3D: OnDestroy</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IsDestroyable.OnDestroy">
            <summary>Triggers when Unity object is about to destroy.</summary>
        </member>
        <member name="T:KSPDev.KSPInterfaces.IsPackable">
            <summary>Interface to track the physics state changes in the part's module.</summary>
            <remarks>
            Events of this inteface are triggered by KSP engine via Unity messaging mechanism. It's not
            required for the module to implement the interface to be notified but by implementing it the
            code becomes more consistent and less error prone.
            </remarks>
            <example>
            <code><![CDATA[
            public class MyModule : PartModule, IsPackable {
              /// <inheritdoc/>
              public void OnPartPack() {
                Debug.Log("OnPartPack");
              }
              /// <inheritdoc/>
              public void OnPartUnpack() {
                Debug.Log("OnPartUnpack);
              }
            }
            ]]></code>
            </example>
            <seealso href="https://docs.unity3d.com/ScriptReference/GameObject.SendMessage.html">
            Unity 3D: GameObject.SendMessage</seealso>
            <seealso href="https://kerbalspaceprogram.com/api/class_part.html">KSP: Part</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IsPackable.OnPartPack">
            <summary>Triggers when physics stops on the part.</summary>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IsPackable.OnPartUnpack">
            <summary>Triggers when physics starts on the part.</summary>
        </member>
        <member name="T:KSPDev.KSPInterfaces.IsPartDeathListener">
            <summary>Interface to notify about the part's forced destruction.</summary>
            <remarks>
            Events of this inteface are triggered by the KSP engine via Unity messaging mechanism. It's not
            required for the module to implement the interface to be notified but by implementing it the
            code becomes more consistent and less error prone.
            </remarks>
            <example>
            <code><![CDATA[
            public class MyModule : PartModule, IsPartDeathListener {
              /// <inheritdoc/>
              public virtual void OnPartDie() {
                Debug.LogFromat("OnPartDie: {0}", part.name);
              }
            }
            ]]></code>
            </example>
            <seealso href="https://docs.unity3d.com/ScriptReference/GameObject.SendMessage.html">
            Unity 3D: GameObject.SendMessage</seealso>
            <seealso href="https://kerbalspaceprogram.com/api/class_part.html">KSP: Part</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IsPartDeathListener.OnPartDie">
            <summary>Triggers when part ois destroyed by the game's logic.</summary>
            <remarks>
            At the moment of this callback call the part is already decoupled from the vessel.
            </remarks>
        </member>
        <member name="T:KSPDev.KSPInterfaces.IsPhysicalObject">
            <summary>Interface for the modules that need handling physics.</summary>
            <remarks>
            The events of this interface are triggered by the Unity engine via reflections. It's not
            required for the module to implement the interface to be notified, but by implementing it, the
            code becomes more consistent and less error prone.
            </remarks>
            <example>
            <code><![CDATA[
            public class MyModule : PartModule, IsPhysicalObject {
              /// <inheritdoc/>
              public void FixedUpdate() {
                // Do the physics stuff.
              }
            }
            ]]></code>
            </example>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html">
            Unity 3D: FixedUpdate</seealso>
        </member>
        <member name="M:KSPDev.KSPInterfaces.IsPhysicalObject.FixedUpdate">
            <summary>Notifies that the fixed rate frame is being handled.</summary>
            <remarks>
            This method is called by Unity via reflections, so it's not required to implement the
            interface to get notified. Though, it's a good idea to implement this interface in the
            objects and modules that need the physics updates. It makes the code more readable.
            </remarks>
        </member>
        <member name="T:KSPDev.LibraryLoader">
            <summary>
            Initialization class that installs the game event listeners needed by the library.
            </summary>
            <remarks>
            It only acts on the very first invocation since the same versions of the library can be copied
            in multiple folders. This class also logs the version and the location from which the library is
            loaded. It helps understanding which libraries are actually loaded in case of there are multiple
            libraries/versions in the game.
            </remarks>
        </member>
        <member name="F:KSPDev.LibraryLoader.loaded">
            <summary>Tells if the loader has already initialized.</summary>
        </member>
        <member name="P:KSPDev.LibraryLoader.assemblyVersionStr">
            <summary>Loaded library indentifier.</summary>
        </member>
        <member name="T:KSPDev.LogUtils.DbgFormatter">
            <summary>A set of tools to format various game enities for debugging purposes.</summary>
        </member>
        <member name="M:KSPDev.LogUtils.DbgFormatter.PartId(Part)">
            <summary>Returns a user friendly unique description of the part.</summary>
            <param name="p">Part to get ID string for.</param>
            <returns>ID string.</returns>
        </member>
        <member name="M:KSPDev.LogUtils.DbgFormatter.Vector(UnityEngine.Vector3)">
            <summary>Returns a string represenation of a vector with more precision.</summary>
            <param name="vec">Vector to dump.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:KSPDev.LogUtils.DbgFormatter.Quaternion(UnityEngine.Quaternion)">
            <summary>Returns a string represenation of a quaternion with more precision.</summary>
            <param name="rot">Quaternion to dump.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:KSPDev.LogUtils.DbgFormatter.TranformPath(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>Returns a full string path for the tranform.</summary>
            <param name="obj">Object to make the path for.</param>
            <param name="parent">Optional parent to use a root.</param>
            <returns>Full string path to the root.</returns>
        </member>
        <member name="M:KSPDev.LogUtils.DbgFormatter.TranformPath(UnityEngine.GameObject,UnityEngine.Transform)">
            <summary>Returns a full string path for the game object.</summary>
            <param name="obj">Object to make the path for.</param>
            <param name="parent">Optional parent to use a root.</param>
            <returns>Full string path to the root.</returns>
        </member>
        <member name="M:KSPDev.LogUtils.DbgFormatter.C2S``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>Flatterns collection items into a comma separated string.</summary>
            <remarks>This method's name is a shorthand for "Collection-To-String". Given a collection
            (e.g. list, set, or anything else implementing <c>IEnumarable</c>) this method transforms it
            into a human readable string.</remarks>
            <param name="collection">A collection to represent as a string.</param>
            <param name="predicate">A predicate to use to extract string representation of an item. If
            <c>null</c> then standard <c>ToString()</c> is used.</param>
            <param name="separator">String to use to glue the parts.</param>
            <returns>Human readable form of the collection.</returns>
            <typeparam name="TSource">Collection's item type.</typeparam>
        </member>
        <member name="M:KSPDev.LogUtils.DbgFormatter.Nullable``1(System.Nullable{``0},System.String)">
            <summary>Prints out a content if the nullable type.</summary>
            <typeparam name="T">Type of the nullable value.</typeparam>
            <param name="value">The value to print.</param>
            <param name="nullStr">A string to present when the value is <c>null</c>.</param>
            <returns>The content of a non-null value or <paramref name="nullStr"/>.</returns>
        </member>
        <member name="T:KSPDev.LogUtils.DebugEx">
            <summary>An extended version of the logging capabilities in the game.</summary>
            <remarks>
            One of the benefit of this logging class is that it can better resolve the arguments of the
            certain types. E.g. when logging out a value referring a <see cref="T:UnityEngine.Transform"/> type, the
            resulted record will represent a full hierrachy path instead of just the object name. See
            <see cref="M:KSPDev.LogUtils.DebugEx.ObjectToString(System.Object)"/> for the full list of the supported types.
            </remarks>
            <seealso cref="T:KSPDev.LogUtils.HostedDebugLog"/>
        </member>
        <member name="M:KSPDev.LogUtils.DebugEx.Info(System.String,System.Object[])">
            <summary>
            Logs a formatted INFO message giving a better context on the objects in the parameters.
            </summary>
            <remarks>
            The arguments are not just transformed into the strings by using their <c>ToString</c> method.
            Instead, this method tries to make a best guess of what the object is, and gives more context
            when possible. Read the full list of the supported objects in the
            <see cref="M:KSPDev.LogUtils.DebugEx.ObjectToString(System.Object)"/> method docs.
            </remarks>
            <param name="format">The format string for the log message.</param>
            <param name="args">The arguments for the format string.</param>
            <seealso cref="M:KSPDev.LogUtils.DebugEx.ObjectToString(System.Object)"/>
            <seealso cref="M:KSPDev.LogUtils.DebugEx.Log(UnityEngine.LogType,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.DebugEx.Fine(System.String,System.Object[])">
            <summary>
            Logs a formatted INFO message when the <i>verbose</i> logging mode is enabled.
            </summary>
            <inheritdoc cref="M:KSPDev.LogUtils.DebugEx.Info(System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.DebugEx.Warning(System.String,System.Object[])">
            <summary>Logs a formatted WARNING message with a host identifier.</summary>
            <inheritdoc cref="M:KSPDev.LogUtils.DebugEx.Info(System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.DebugEx.Error(System.String,System.Object[])">
            <summary>Logs a formatted ERROR message with a host identifier.</summary>
            <inheritdoc cref="M:KSPDev.LogUtils.DebugEx.Info(System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.DebugEx.Log(UnityEngine.LogType,System.String,System.Object[])">
            <summary>Generic method to emit a log record.</summary>
            <remarks>
            It also catches the improperly declared formatting strings, and reports the error instead of
            throwing.
            </remarks>
            <param name="type">The type of the log record.</param>
            <param name="format">The format string for the log message.</param>
            <param name="args">The arguments for the format string.</param>
            <seealso cref="M:KSPDev.LogUtils.DebugEx.ObjectToString(System.Object)"/>
        </member>
        <member name="M:KSPDev.LogUtils.DebugEx.ObjectToString(System.Object)">
            <summary>Helper method to make a user friendly object name for the logs.</summary>
            <remarks>
            This method is much more intelligent than a regular <c>ToString()</c>, it can detect some
            common types and give more context on them while keeping the output short. The currently
            supported object types are:
            <list type="bullet">
            <item>The primitive types and strings are returned as is.</item>
            <item><see cref="T:Part"/>. The string will have the part ID.</item>
            <item><see cref="T:PartModule"/>. The string will have a part ID and the module index.</item>
            <item>
            <see cref="T:UnityEngine.Component"/>. The string will have the full path in the game objects hirerachy.
            </item>
            </list>
            <para>
            The other types are stringified via a regular <c>ToString()</c> call, but the value is
            prefixed with the type name.
            </para>
            </remarks>
            <param name="obj">The object to stringify. It can be <c>null</c>.</param>
            <returns>A human friendly string or the original object.</returns>
            <item name="T:Part">
  <seealso href="https://kerbalspaceprogram.com/api/class_part.html">KSP: Part</seealso>
</item>
            <item name="T:PartModule">
  <seealso href="https://kerbalspaceprogram.com/api/class_part_module.html">KSP: PartModule</seealso>
</item>
            <item name="T:UnityEngine.Transform">
  <seealso href="https://docs.unity3d.com/ScriptReference/Transform.html">Untiy3D: Transform</seealso>
</item>
            <item name="T:UnityEngine.GameObject">
  <seealso href="https://docs.unity3d.com/ScriptReference/GameObject.html">Untiy3D: GameObject</seealso>
</item>
        </member>
        <member name="T:KSPDev.LogUtils.HostedDebugLog">
            <summary>Helper class to log a record which is bound to a specific object.</summary>
            <remarks>
            <para>
            It may be useful when there are situations that relate to a specific instance of a common
            KSP object. Like <see cref="T:Part"/>, <see cref="T:PartModule"/>, <see cref="T:UnityEngine.Transform"/>, etc.
            With the hosted logging, there will be no need to manually designate for which object the
            record is being logged.
            </para>
            <para>
            Another benefit of this logging class is that it can better resolve the arguments of the certain
            types. E.g. when logging out a value referring a <see cref="T:UnityEngine.Transform"/> type, the resulted
            record will represent a full hierrachy path instead of just the object name. See
            <see cref="M:KSPDev.LogUtils.DebugEx.ObjectToString(System.Object)"/> for the full list of the supported types.
            </para>
            </remarks>
            <example><code source="Examples/LogUtils/HostedDebugLog-Examples.cs" region="HostedDebugLog1"/></example>
            <seealso cref="T:KSPDev.LogUtils.DebugEx"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Info(Part,System.String,System.Object[])">
            <summary>Logs a formatted INFO message with a host identifier.</summary>
            <param name="host">
            The host object which is bound to the log record. It can be <c>null</c>.
            </param>
            <param name="format">The format string for the log message.</param>
            <param name="args">The arguments for the format string.</param>
            <example><code source="Examples/LogUtils/HostedDebugLog-Examples.cs" region="HostedDebugLog1"/></example>
            <seealso cref="M:KSPDev.LogUtils.DebugEx.ObjectToString(System.Object)"/>
            <seealso cref="M:KSPDev.LogUtils.HostedDebugLog.Log(UnityEngine.LogType,System.Object,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Info(PartModule,System.String,System.Object[])">
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Info(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Info(UnityEngine.Transform,System.String,System.Object[])">
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Info(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Fine(Part,System.String,System.Object[])">
            <summary>
            Logs a formatted INFO message with a host identifier when the <i>verbose</i> logging mode is
            enabled.
            </summary>
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Info(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Fine(PartModule,System.String,System.Object[])">
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Info(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Fine(UnityEngine.Transform,System.String,System.Object[])">
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Info(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Warning(Part,System.String,System.Object[])">
            <summary>Logs a formatted WARNING message with a host identifier.</summary>
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Info(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Warning(PartModule,System.String,System.Object[])">
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Warning(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Warning(UnityEngine.Transform,System.String,System.Object[])">
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Warning(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Error(Part,System.String,System.Object[])">
            <summary>Logs a formatted ERROR message with a host identifier.</summary>
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Info(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Error(PartModule,System.String,System.Object[])">
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Error(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Error(UnityEngine.Transform,System.String,System.Object[])">
            <inheritdoc cref="M:KSPDev.LogUtils.HostedDebugLog.Error(Part,System.String,System.Object[])"/>
        </member>
        <member name="M:KSPDev.LogUtils.HostedDebugLog.Log(UnityEngine.LogType,System.Object,System.String,System.Object[])">
            <summary>Generic method to emit a hosted log record.</summary>
            <param name="type">The type of the log record.</param>
            <param name="host">
            The host object which is bound to the log record. It can be <c>null</c>.
            </param>
            <param name="format">The format string for the log message.</param>
            <param name="args">The arguments for the format string.</param>
            <seealso cref="M:KSPDev.LogUtils.DebugEx.ObjectToString(System.Object)"/>
        </member>
        <member name="T:KSPDev.MathUtils.Mathd">
            <summary>
            Gives some common methods for handling dobule values in the game.
            </summary>
        </member>
        <member name="F:KSPDev.MathUtils.Mathd.Epsilon">
            <summary>Value which can be safely considered to be <c>0</c>.</summary>
        </member>
        <member name="M:KSPDev.MathUtils.Mathd.Approximately(System.Double,System.Double)">
            <summary>Tells if the two double values look the same in the geme's units.</summary>
            <remarks>
            This method gives the same logic as <c>Mathf.Approximately</c>, but for the double values.
            </remarks>
            <param name="a">The first value to test.</param>
            <param name="b">The second value to test.</param>
            <returns>
            <c>true</c> if the values difference is negligible from the game's perspective.
            </returns>
        </member>
        <member name="M:KSPDev.MathUtils.Mathd.AreSame(System.Double,System.Double)">
            <summary>Tells if the two double are the same, allowing some small error.</summary>
            <remarks>
            This method requires the difference between the values to be negligible. The absolute values
            are not counted.
            </remarks>
            <param name="a">The first value to test.</param>
            <param name="b">The second value to test.</param>
            <returns>
            <c>true</c> if the values difference is negligible.
            </returns>
        </member>
        <member name="T:KSPDev.ModelUtils.AlignTransforms">
            <summary>Helper methods to align transformations relative to each other.</summary>
        </member>
        <member name="M:KSPDev.ModelUtils.AlignTransforms.SnapAlign(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Aligns the source node so that it's located at the target, and the source and target are
            "looking" at the each other.
            </summary>
            <remarks>
            The object's "look" direction is a <see cref="P:UnityEngine.Transform.forward"/> direction. The resulted
            <see cref="P:UnityEngine.Transform.up"/> direction of the source will be the opposite to the target.
            </remarks>
            <param name="source">The node to align.</param>
            <param name="sourceChild">The child node of the source to use as the align point.</param>
            <param name="target">The target node to align with.</param>
            <seealso href="https://docs.unity3d.com/ScriptReference/Transform.html">Untiy3D: Transform</seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.AlignTransforms.SnapAlignVessel(Vessel,UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Aligns the vessel so that its node is located <i>against</i> the target's node. I.e. they are
            "looking" at the each other.
            </summary>
            <remarks>
            This method only does the positioning, and it ignores any physical properties. To avoid the
            physical consequences, the caller must take care of the physical differences (e.g. angular or
            linear speed).
            </remarks>
            <param name="vessel">The vessel to align.</param>
            <param name="vesselNode">The node at the vessel to align the target against.</param>
            <param name="targetNode">The node at the target to allign the vessel against.</param>
            <seealso cref="M:KSPDev.ModelUtils.AlignTransforms.PlaceVessel(Vessel,UnityEngine.Vector3,UnityEngine.Quaternion,Vessel)"/>
        </member>
        <member name="M:KSPDev.ModelUtils.AlignTransforms.SnapAlignNodes(AttachNode,AttachNode)">
            <summary>Aligns two vessels via the attach nodes.</summary>
            <remarks>
            The source vessel is positioned and rotated so that its attach node matches the target vessel
            attach node, and the nodes are "looking" at each other. 
            </remarks>
            <param name="srcAttachNode">The node of the source vessel.</param>
            <param name="tgtAttachNode">The node of the traget vessel.</param>
        </member>
        <member name="M:KSPDev.ModelUtils.AlignTransforms.PlaceVessel(Vessel,UnityEngine.Vector3,UnityEngine.Quaternion,Vessel)">
            <summary>Places the vessel at the new position and resets the momentum on it.</summary>
            <remarks>If the vessel had any angular velocity, it will be reset to zero.</remarks>
            <param name="movingVessel">The vessel to place.</param>
            <param name="newPosition">The new position of the vessel.</param>
            <param name="newRotation">The new rotation of the vessel.</param>
            <param name="refVessel">
            The vessel to alignt the velocity with. If it's <c>null</c>, then the velocity on the moving
            vessel will just be zeroed.
            </param>
        </member>
        <member name="T:KSPDev.ModelUtils.Colliders">
            <summary>Various tools to deal with procedural colliders.</summary>
        </member>
        <member name="M:KSPDev.ModelUtils.Colliders.SetSimpleCollider(UnityEngine.GameObject,UnityEngine.PrimitiveType,System.Boolean)">
            <summary>
            Drops the colliders in all the children objects, and adds one big collider to the parent.
            </summary>
            <remarks>
            The main purpose of this method is to create one fast collider at the cost of precision. All
            the meshes in the object (the parent and the children) are processed to produce a single
            boundary box. Then, this box is applied to the requested primitive type that defines the shape
            of the final collider.
            <para>
            Note, that radius of the sphere and the capsule colliders is the same on both X and Y axis.
            If the combined boundary box has any of the dimensions significantly different then it makes
            sense to choose a different collider type. Or break down the hirearchy into more colliders.
            </para>
            </remarks>
            <param name="parent">Parent object.</param>
            <param name="type">
            Type of the primitive which describes the parent object most precise in terms of the shape.
            Only <see cref="F:UnityEngine.PrimitiveType.Cube"/>, <see cref="F:UnityEngine.PrimitiveType.Sphere"/>,
            <see cref="F:UnityEngine.PrimitiveType.Cylinder"/>, and <see cref="F:UnityEngine.PrimitiveType.Capsule"/> are supported.
            The two latter types produce in the same collider type - the capsule.
            </param>
            <param name="inscribeBoundaryIntoCollider">
            When calculating the total volume of the object, all its meshes produce a single box boundary.
            Then, the collider either wraps this box entirely, or sits inside it entirely. If this
            parameter is <c>true</c> then the collider will cover the boundary box.
            </param>
            <seealso href="https://docs.unity3d.com/ScriptReference/GameObject.html">
            Unity 3D: GameObject</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/PrimitiveType.html">
            Unity 3D: PrimitiveType</seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Colliders.UpdateColliders(UnityEngine.GameObject,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>Sets the specified values to colliders of all the objects in the part's model.
            </summary>
            <param name="parent">Game object to start searching for renderers from.</param>
            <param name="isPhysical">
            If <c>true</c> then collider will trigger physical effects. If <c>false</c> then it will only
            trigger collision events. When it's <c>null</c> the collider setting won't be changed.
            </param>
            <param name="isEnabled">
            Defines if colliders should be enabled or disabled. When it's <c>null</c> the collider setting
            won't be changed.
            </param>
            <seealso href="https://docs.unity3d.com/ScriptReference/Collider.html">Unity3D: Collider
            </seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Colliders.AdjustCollider(UnityEngine.GameObject,UnityEngine.Vector3,KSPDev.ModelUtils.Colliders.PrimitiveCollider,System.Nullable{UnityEngine.PrimitiveType})">
            <summary>Adds or adjusts a primitive collider on the mesh.</summary>
            <remarks>
            Type of the primitive collider is chosen basing on the primitive type.
            </remarks>
            <param name="primitive">Primitive game object to adjust.</param>
            <param name="meshSize">Size of the collider in local units.</param>
            <param name="colliderType">Determines how a collider type should be selected.</param>
            <param name="shapeType">
            Type of the primitive when <paramref name="colliderType"/> is
            <see cref="F:KSPDev.ModelUtils.Colliders.PrimitiveCollider.Shape"/>. It will determine the type of the collider. Only
            <see cref="F:UnityEngine.PrimitiveType.Cylinder"/>, <see cref="F:UnityEngine.PrimitiveType.Sphere"/>, and
            <see cref="F:UnityEngine.PrimitiveType.Cube"/> are supported.
            </param>
        </member>
        <member name="M:KSPDev.ModelUtils.Colliders.SetCollisionIgnores(UnityEngine.Transform,UnityEngine.Transform,System.Boolean)">
            <summary>Disables/enables all the colliders between the objects.</summary>
            <remarks>
            All colliders in all the children of the both objects are explicitly set to not collide with
            each other. The ignore state is reset to <c>false</c> on every scene load.
            </remarks>
            <param name="obj1">Source object.</param>
            <param name="obj2">Target object.</param>
            <param name="ignore">
            If <c>true</c> then the collisions between the objects will be ignored. Otherwise, the
            collisions will be handled.
            </param>
            <seealso href="https://docs.unity3d.com/ScriptReference/Collider.html">
            Unity3D: Collider</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/Physics.IgnoreCollision.html">
            Unity3D: Physics.IgnoreCollision</seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Colliders.SetCollisionIgnores(Part,Part,System.Boolean)">
            <summary>Disables/enables all the colliders between the parts.</summary>
            <remarks>The ignore state is reset to <c>false</c> on every scene load.</remarks>
            <param name="part1">Source part.</param>
            <param name="part2">Target part.</param>
            <param name="ignore">
            If <c>true</c> then the collisions between the parts will be ignored. Otherwise, the
            collisions will be handled.
            </param>
            <seealso href="https://docs.unity3d.com/ScriptReference/Collider.html">
            Unity3D: Collider</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/Physics.IgnoreCollision.html">
            Unity3D: Physics.IgnoreCollision</seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Colliders.SetCollisionIgnores(Part,Vessel,System.Boolean)">
            <summary>Disables/enables all the collidres between the part and a vessel.</summary>
            <param name="part">The part to adjust colliders for.</param>
            <param name="vessel">The vessel to start/stop colliding with.</param>
            <param name="ignore">The desired state of the collision check.</param>
        </member>
        <member name="T:KSPDev.ModelUtils.Colliders.PrimitiveCollider">
            <summary>Defines how collisions should be checked on a primitive.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.Colliders.PrimitiveCollider.None">
            <summary>No collisions check.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.Colliders.PrimitiveCollider.Mesh">
            <summary>Check collisions basing on the mesh. It's performance expensive.</summary>
            <seealso href="https://docs.unity3d.com/ScriptReference/MeshCollider.html">
            Unity3D: MeshCollider</seealso>
        </member>
        <member name="F:KSPDev.ModelUtils.Colliders.PrimitiveCollider.Shape">
            <summary>Simple collider which fits the primitive type. It's performance optimized.</summary>
            <seealso href="https://docs.unity3d.com/ScriptReference/PrimitiveType.html">
            Unity3D: PrimitiveType</seealso>
        </member>
        <member name="F:KSPDev.ModelUtils.Colliders.PrimitiveCollider.Bounds">
            <summary>Simple collider which wraps all mesh vertexes. It's performance optimized.</summary>
        </member>
        <member name="T:KSPDev.ModelUtils.Hierarchy">
            <summary>Various tools to deal with game object hierarchy.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.Hierarchy.ReSplitEscapedPath">
            <summary>Regex to split an escaped path.</summary>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.MoveToParent(UnityEngine.Transform,UnityEngine.Transform,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{UnityEngine.Vector3})">
            <summary>Changes transform's parent keeping local postion, rotation and scale.</summary>
            <remarks>
            Normally, Unity preserves world position, rotation and scale when changing parent. It's
            convinient when managing objects in a prefab but is not desired when constructing a new model.
            </remarks>
            <param name="child">Transform to change parent for.</param>
            <param name="parent">Transform to change parent to.</param>
            <param name="newPosition">Local position to set instead of the original one.</param>
            <param name="newRotation">Local rotation to set instead of the original one.</param>
            <param name="newScale">Local scale to set instead of the original one.</param>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.PatternMatch(System.String,System.String)">
            <summary>
            Checks target string against a simple pattern which allows prefix, suffix, and contains match.
            The match is case-sensitive.
            </summary>
            <param name="pattern">
            Pattern to match for:
            <list type="bullet">
            <item>If pattern ends with <c>*</c> then it's a match by prefix.</item>
            <item>If pattern starts with <c>*</c> then it's a match by suffix.</item>
            <item>
            If pattern starts and ends with <c>*</c> then pattern is searched anywhere in the target.
            </item>
            </list>
            </param>
            <param name="target">The target string to check.</param>
            <returns><c>true</c> if pattern matches the target.</returns>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.FindTransformInChildren(UnityEngine.Transform,System.String)">
            <summary>Finds a transform by name down the hierarchy.</summary>
            <remarks>
            Implements breadth-first search approach to minimize depth of the found transform.
            </remarks>
            <param name="parent">The transfrom to start from.</param>
            <param name="name">The name of the transfrom.</param>
            <returns>A transform or <c>null</c> if nothing is found.</returns>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.FindTransformByPath(UnityEngine.Transform,System.String,UnityEngine.Transform)">
            <summary>Finds a transform in the hirerachy by the provided path.</summary>
            <remarks>
            See the path format in <see cref="M:KSPDev.ModelUtils.Hierarchy.FindTransformByPath(UnityEngine.Transform,System.String[],UnityEngine.Transform)"/>.
            </remarks>
            <param name="parent">The transfrom to start looking from.</param>
            <param name="path">
            The path to the target. The name components must be escaped if they contain the special
            symbols.
            </param>
            <param name="defValue">
            An object to return if the path is not found. This situation will be treated as a danger, and
            a warning log record will be made.
            </param>
            <returns>A transform or <c>null</c> if nothing found.</returns>
            <seealso cref="M:KSPDev.ModelUtils.Hierarchy.EscapeName(System.String)"/>
            <seealso href="https://docs.unity3d.com/ScriptReference/Transform.html">Untiy3D: Transform</seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.FindTransformByPath(UnityEngine.Transform,System.String[],UnityEngine.Transform)">
            <summary>Finds a transform in the hirerachy by the provided path.</summary>
            <remarks>
            Every element of the path may specify an exact transform name or a partial match pattern:
            <list type="bullet">
            <item>
            <c>*</c> - any name matches. Such patterns can be nested to specify the desired level of
            nesting. E.g. <c>*/*/a</c> will look for name <c>a</c> in the grandchildren.
            </item>
            <item>
            <c>*</c> as a prefix - the name is matched by suffix. E.g. <c>*a</c> matches any name that
            ends with <c>a</c>.
            </item>
            <item>
            <c>*</c> as a suffix - the name is matched by prefix. E.g. <c>a*</c> matches any name that
            starts with <c>a</c>.
            </item>
            <item>
            <c>**</c> - any <i>path</i> matches. What will eventually be found depends on the pattern to
            the right of <c>**</c>. E.g. <c>**/a/b</c> will go through all the nodes starting from the
            parent until path <c>a/b</c> is found. If multiple paths have matched the pattern, then the
            shortest path will be returned. Be careful with this pattern since in case of not matching
            anything it will walk thought the <i>whole</i> hirerachy, starting from
            <paramref name="parent"/>.
            </item>
            </list>
            <para>
            All patterns except <c>**</c> may have a matching index. It can be used to resolve matches
            when there are multiple objects found with the same name and at the <i>same level</i>. E.g. if
            there are two objects with name "a" at the root level then the first one can be accessed by
            pattern <c>a:0</c>, and the second one by pattern <c>a:1</c>.
            </para>
            <para>
            Path search is <i>slow</i> since it needs walking though the hierarchy nodes. In the worst
            case all the nodes will be visited. Don't use this method in the performance demanding
            methods.
            </para>
            </remarks>
            <param name="parent">The transfrom to start looking from.</param>
            <param name="path">The path elements. All the special symbols must be unescaped.</param>
            <param name="defValue">
            An object to return if the path is not found. This situation will be treated as a danger, and
            a warning log record will be made.
            </param>
            <returns>Transform or <c>null</c> if nothing found.</returns>
            <example>
            Given the following hierarchy:
            <code><![CDATA[
            // a
            // + b
            // | + c
            // | | + c1
            // | | + d
            // | + c
            // |   + d
            // |     + e
            // |       + e1
            // + abc
            ]]></code>
            <para>Here are some matching examples:</para>
            <code><![CDATA[
            // a/b/c/d/e/e1 => a/b/c/d/e/e1
            // a/b/c/c1 => a/b/c/c1
            // a/b/*/d/e/e1 => a/b/c/d/e/e1
            // a/b/*/*/e/e1 => a/b/c/d/e/e1
            // a/b/* => a/b/c, branch a/b/c/c1/d (the first match)
            // a/b/*:0 => a/b/c, branch a/b/c/c1/d
            // a/b/*:1 => a/b/c, branch a/b/c/d/e/e1
            // a/b/c:1/d => a/b/c/d, branch a/b/c/d/e/e1
            // **/e1 => a/b/c/d/e/e1
            // **/c1 => a/b/c/c1
            // **/c/d => a/b/c/d, branch a/b/c/d
            // **/*c => a/abc. The other matched branch (a/b/c) will be refused due to the length. 
            // a/**/e1 => a/b/c/d/e/e1
            // *bc => a/abc
            // ab* => a/abc
            // *b* => a/abc
            ]]></code>
            </example>
            <seealso cref="M:KSPDev.ModelUtils.Hierarchy.UnescapeName(System.String)"/>
            <seealso href="https://docs.unity3d.com/ScriptReference/Transform.html">Untiy3D: Transform</seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.FindPartModelByPath(Part,System.String,UnityEngine.Transform)">
            <inheritdoc cref="M:KSPDev.ModelUtils.Hierarchy.FindTransformByPath(UnityEngine.Transform,System.String,UnityEngine.Transform)"/>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.FindPartModelByPath(Part,System.String[],UnityEngine.Transform)">
            <inheritdoc cref="M:KSPDev.ModelUtils.Hierarchy.FindTransformByPath(UnityEngine.Transform,System.String,UnityEngine.Transform)"/>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.GetPartModelTransform(Part)">
            <summary>Returns part's model transform.</summary>
            <param name="part">The part to get model for.</param>
            <returns>
            The part's model transform if one was found. Or the root part's transform otherwise.
            </returns>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.ListHirerahcy(UnityEngine.Transform,System.String)">
            <summary>
            Returns the paths to all the transformations in the object. Each item is a full path to the
            transformation starting from the <paramref name="parent"/>.
            </summary>
            <param name="parent">The object to start from.</param>
            <param name="pathPrefix">The prefix to add to every path in the result.</param>
            <returns>The paths to all the objects in the hirerachy separated by a LF symbol.</returns>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.GetFullPath(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>Returns a full path to the object starting from the specified parent.</summary>
            <param name="obj">The object to find path for.</param>
            <param name="parent">
            The object at which the path must stop. If <c>null</c> then the path is gathered to the root
            object.
            </param>
            <returns>A full path name components. The names are not escaped.</returns>
            <seealso cref="M:KSPDev.ModelUtils.Hierarchy.FindTransformByPath(UnityEngine.Transform,System.String[],UnityEngine.Transform)"/>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.SplitAndUnescapePath(System.String)">
            <summary>Splits a path and unescapes the name elements.</summary>
            <remarks>
            The path elements must be separted by a <c>'/'</c> symbol. The name elements must be escaped
            in case of they contain a separator symbol in the content. 
            </remarks>
            <param name="escapedPath">The escaped path to split.</param>
            <returns>An array of unescaped names.</returns>
            <seealso cref="M:KSPDev.ModelUtils.Hierarchy.UnescapeName(System.String)"/>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.MakePath(System.String[])">
            <summary>Escapes the element names and builds a path.</summary>
            <param name="unescapedNames">The raw name elements of the path.</param>
            <returns>An escaped path built of the provided elements.</returns>
            <seealso cref="M:KSPDev.ModelUtils.Hierarchy.EscapeName(System.String)"/>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.UnescapeName(System.String)">
            <summary>Unescapes all the special symbols in the name.</summary>
            <param name="escapedName">The name where all the special symbols are escaped.</param>
            <returns>An unescaped name.</returns>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.EscapeName(System.String)">
            <summary>Escapes all the special symbols in the name.</summary>
            <remarks>
            For now the only specil symbol is <c>/</c> (slash) because of it's used as a name separator
            in the hierarchy paths. The escaped separator symbol is simply doubled. I.e. string <c>a/b</c>
            transforms into <c>a//b</c>.
            </remarks>
            <param name="unescapedName">The raw name with any symbols.</param>
            <returns>A name where all the special symbols are properly escaped.</returns>
        </member>
        <member name="M:KSPDev.ModelUtils.Hierarchy.FindTransformByPathInternal(UnityEngine.Transform,System.String[],System.Int32,System.Int32@,UnityEngine.Transform@)">
            <summary>Searches thru the nodes, implementing the BFS algorithm.</summary>
        </member>
        <member name="T:KSPDev.ModelUtils.KspLayer">
            <summary>Defines various layers used in the game.</summary>
            <remarks>
            It's not a full set of the layers. More investigation is needed to reveal all of them.
            </remarks>
            <seealso cref="T:KSPDev.ModelUtils.KspLayerMask"/>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayer.Part">
            <summary>The layer for a regular part.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayer.Service">
            <summary>The layer to set bounds of a celestial body.</summary>
            <remarks>
            It's a very rough boundary of a planet, moon or asteroid. Used for macro objects detection.
            </remarks>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayer.SurfaceCollider">
            <summary>The "zero" level collider of a static structure on the surface.</summary>
            <remarks>E.g. a launchpad.</remarks>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayer.Kerbal">
            <summary>The layer for the kerbonaut models.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayer.TriggerCollider">
            <summary>The layer for the various interaction colliders.</summary>
            <remarks>
            The meshes on this layer are not rendered. They are only used to trigger collision events when
            a kerbal model is in range.
            </remarks>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayer.Fx">
            <summary>The layer for FX objects.</summary>
            <remarks>E.g. <c>PadFXReceiver</c> on the Kerbins VAB launchpad.</remarks>
        </member>
        <member name="T:KSPDev.ModelUtils.KspLayerMask">
            <summary>A convinience type to deal with the <see cref="T:KSPDev.ModelUtils.KspLayer">layers</see>.</summary>
            <seealso cref="T:KSPDev.ModelUtils.KspLayer"/>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayerMask.None">
            <summary>Just a default value that doesn't match any layer.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayerMask.Part">
            <summary>Mask for the <see cref="F:KSPDev.ModelUtils.KspLayer.Part"/> layer.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayerMask.Service">
            <summary>Mask for the <see cref="F:KSPDev.ModelUtils.KspLayer.Service"/> layer.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayerMask.SurfaceCollider">
            <summary>Mask for the <see cref="F:KSPDev.ModelUtils.KspLayer.SurfaceCollider"/> layer.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayerMask.Kerbal">
            <summary>Mask for the <see cref="F:KSPDev.ModelUtils.KspLayer.Kerbal"/> layer.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayerMask.TriggerCollider">
            <summary>Mask for the <see cref="F:KSPDev.ModelUtils.KspLayer.TriggerCollider"/> layer.</summary>
        </member>
        <member name="F:KSPDev.ModelUtils.KspLayerMask.Fx">
            <summary>Mask for the <see cref="F:KSPDev.ModelUtils.KspLayer.Fx"/> layer.</summary>
        </member>
        <member name="T:KSPDev.ModelUtils.Meshes">
            <summary>Various tools to deal with procedural meshes.</summary>
        </member>
        <member name="M:KSPDev.ModelUtils.Meshes.RescaleTextureToLength(UnityEngine.GameObject,System.Single,UnityEngine.Renderer)">
            <summary>
            Rescales texture so what one sample covers exactly one unit of the primitive length.
            </summary>
            <remarks>
            Normally one texture sample covers the whole primitive regardless to its length. By calling
            this method you ensure that one sample keeps its ratio comparing to a linear unit. If
            primitive is too short to fit the texture then the texture is truncated. If primitive is too
            long to be covered by one sample then the texture will be tiled to fill the space.
            <para>
            This methods assumes UV data on the primitive was created for a length of 1m. With this
            assumption in mind the Z axis of the local scale is cosidered "the length".
            <see cref="M:KSPDev.ModelUtils.Meshes.CreatePrimitive(UnityEngine.PrimitiveType,UnityEngine.Vector3,UnityEngine.Material,UnityEngine.Transform)"/> method guarantees that newly created primitive always has length
            of one meter but if primitive was created by other means its default length can be different.
            </para>
            </remarks>
            <param name="obj">Game object to adjust material on. Z axis scale gives the length.</param>
            <param name="lengthUnit">Length to be completly covered by one sample of the texture.
            </param>
            <param name="renderer">Specific renderer to adjust texture in. If <c>null</c> then first
            renderer on the object will be updated. Note, that getting renderer from the object is an
            expensive operation. When performance is the key it makes sense caching the renderer, and
            passing it in every rescale call.</param>
            <seealso href="https://docs.unity3d.com/ScriptReference/Renderer.html">Unity3D: Renderer
            </seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Meshes.UpdateMaterials(UnityEngine.GameObject,System.String,System.Nullable{UnityEngine.Color})">
            <summary>
            Sets the specified values to material of all the renderers in the part's model.
            </summary>
            <remarks>
            Shared material is affected, so if there are unrelated meshes that use the same material then
            they will be affected as well. In general, it's a bad idea to share material between several
            parts. And it's a good practice to share materials within the same part.
            </remarks>
            <param name="parent">Game object to start searching for renderers from.</param>
            <param name="newShaderName">
            New shader name. If <c>null</c> then it will not be changed.
            </param>
            <param name="newColor">Color to set. If <c>null</c> then it will not be changed.</param>
            <seealso href="https://docs.unity3d.com/ScriptReference/Shader.html">Unity3D: Shader</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/Material.html">Unity3D: Material
            </seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Meshes.CreateCylinder(System.Single,System.Single,UnityEngine.Material,UnityEngine.Transform,KSPDev.ModelUtils.Colliders.PrimitiveCollider)">
            <summary>Creates a cylinder.</summary>
            <param name="diameter">XY of the cylinder.</param>
            <param name="length">Z-axis of the cylinder.</param>
            <param name="material">Material for the primitive.</param>
            <param name="parent">Parent transfrom to atatch primitive to.</param>
            <param name="colliderType">Type of the collider to create on the primitive.</param>
            <returns>Sphere game object.</returns>
            <seealso href="https://docs.unity3d.com/ScriptReference/Material.html">Unity3D: Material
            </seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/Transform.html">Unity3D: Transform
            </seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Meshes.CreateBox(System.Single,System.Single,System.Single,UnityEngine.Material,UnityEngine.Transform,KSPDev.ModelUtils.Colliders.PrimitiveCollider)">
            <summary>Creates a box.</summary>
            <param name="width">X-axis of the box.</param>
            <param name="height">Y-axis of the box.</param>
            <param name="length">Z-axis of the box.</param>
            <param name="material">Material for the primitive.</param>
            <param name="parent">Parent transfrom to atatch primitive to.</param>
            <param name="colliderType">Type of the collider to create on the primitive.</param>
            <returns>Sphere game object.</returns>
            <seealso href="https://docs.unity3d.com/ScriptReference/Material.html">Unity3D: Material
            </seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/Transform.html">Unity3D: Transform
            </seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Meshes.CreateSphere(System.Single,UnityEngine.Material,UnityEngine.Transform,KSPDev.ModelUtils.Colliders.PrimitiveCollider)">
            <summary>Creates an ideal sphere.</summary>
            <param name="diameter">Diameter of the sphere.</param>
            <param name="material">Material for the primitive.</param>
            <param name="parent">Parent transfrom to atatch primitive to.</param>
            <param name="colliderType">Type of the collider to create on the primitive.</param>
            <returns>Sphere game object.</returns>
            <seealso href="https://docs.unity3d.com/ScriptReference/Material.html">Unity3D: Material
            </seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/Transform.html">Unity3D: Transform
            </seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Meshes.CreatePrimitive(UnityEngine.PrimitiveType,UnityEngine.Vector3,UnityEngine.Material,UnityEngine.Transform)">
            <summary>Creates a primitive mesh and attaches it to the model.</summary>
            <remarks>
            For <see cref="F:UnityEngine.PrimitiveType.Cylinder"/> Z and Y axis will be swapped to make Z "the length".
            <para>
            Collider on the primitive will be destroyed. Consider using
            <see cref="M:KSPDev.ModelUtils.Colliders.AdjustCollider(UnityEngine.GameObject,UnityEngine.Vector3,KSPDev.ModelUtils.Colliders.PrimitiveCollider,System.Nullable{UnityEngine.PrimitiveType})"/> to setup the right collider when needed.
            </para>
            </remarks>
            <param name="type">Type of the primitive.</param>
            <param name="meshScale">
            Scale to bring all mesh vertices to. New primitive have base size of 1m but some shapes may
            have exceptions (e.g. height of a cylinder is 2m). The scale is applied on the mesh, i.e. it's
            applied on the vertices, not the transform.</param>
            <param name="material">Material to use for the primitive.</param>
            <param name="parent">Parent transform to attach primitive to.</param>
            <returns>Game object of the new primitive.</returns>
            <seealso href="https://docs.unity3d.com/ScriptReference/GameObject.CreatePrimitive.html">
            Unity3D: GameObject.CreatePrimitive</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/Material.html">Unity3D: Material
            </seealso>
        </member>
        <member name="M:KSPDev.ModelUtils.Meshes.TranslateMesh(UnityEngine.GameObject,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{UnityEngine.Vector3})">
            <summary>Translates meshes's verticies.</summary>
            <remarks>
            This is different from setting postion, rotation and scale to the transform. This method
            <i>actually</i> changes vetricies in the mesh. It's not performance effective, so avoid doing
            it frequiently.
            </remarks>
            <param name="model">Model object to change the mesh in.</param>
            <param name="offset">
            Offset for the verticies. If not specified then the offset is zero. The offset is added
            <i>after</i> the scale and the rotation have been applied.  
            </param>
            <param name="rotation">
            Rotation for the verticies. If not set then no rotation is added.
            </param>
            <param name="scale">
            Scale for the vertex positions. If not specified then the scale is not affected.
            </param>
        </member>
        <member name="T:KSPDev.PartUtils.PartModel">
            <summary>Helper methods to deal with the part models.</summary>
        </member>
        <member name="M:KSPDev.PartUtils.PartModel.UpdateHighlighters(UnityEngine.Transform)">
            <summary>Refreshes the highlighters on the part that owns the provided model.</summary>
            <remarks>
            When a part is highlighted (e.g. due to the mouse hover event), it highlights its models via a
            pre-cached set of the highlighter components. This cache is constructed on the part creation.
            If a model is added or removed from the part in runtime, the cache needs to be updated. This
            method does it by finding the part from the game objects hirerachy. If there is a part found,
            then its highlighters are updated.
            </remarks>
            <param name="modelObj">The game object which needs an update. It can be <c>null</c>.</param>
        </member>
        <member name="M:KSPDev.PartUtils.PartModel.UpdateHighlighters(Part)">
            <summary>Refreshes the highlighters on the part.</summary>
            <remarks>
            It goes thru the highlighters cache and drops all the renderers that are no more in the part's
            model hierarchy. Then, it gets all the renderers in the hierarchy and enusrrs all of them are
            in the cache. It's not a cheap operation performance wise.
            </remarks>
            <param name="part">The part to refresh the highlighters for. It can be <c>null</c>.</param>
        </member>
        <member name="T:KSPDev.PartUtils.PartModuleUtils">
            <summary>
            Utility class to deals with the attributed fields and methods of the KPS part modules.
            </summary>
            <example><code source="Examples/PartUtils/PartModuleUtils-Examples.cs" region="PartModuleUtils_SetupEvent"/></example>
            <example><code source="Examples/PartUtils/PartModuleUtils-Examples.cs" region="PartModuleUtils_GetEvent"/></example>
        </member>
        <member name="M:KSPDev.PartUtils.PartModuleUtils.GetEvent(PartModule,System.Action)">
            <summary>Returns an event for the requested method.</summary>
            <remarks>
            This method requests a KPS event of the part's module by its signature instead of a string
            literal name. The same result could be achieved by accessing the <c>Events</c> field of the
            <c>PartModule</c> object. However, in case of using a string literal the refactoring and the
            source tracking tools won't be able to track the reference. The main goal of this method is to
            provide a compile time checking mechanism for the cases when the exact method is known at the
            compile time (e.g. in the class descendants).
            </remarks>
            <param name="partModule">The module to get the event for.</param>
            <param name="eventFn">The signature of the event in scope of the module.</param>
            <returns>An event, or <c>null</c> if nothing found for the method provided.</returns>
            <seealso cref="M:KSPDev.PartUtils.PartModuleUtils.SetupEvent(PartModule,System.Action,System.Action{BaseEvent})"/>
            <example><code source="Examples/PartUtils/PartModuleUtils-Examples.cs" region="PartModuleUtils_GetEvent"/></example>
        </member>
        <member name="M:KSPDev.PartUtils.PartModuleUtils.SetupEvent(PartModule,System.Action,System.Action{BaseEvent})">
            <summary>Applies a setup function on a KSP part module event.</summary>
            <param name="partModule">The module to find the event in.</param>
            <param name="eventFn">The event's method signature.</param>
            <param name="setupFn">The function to apply to the event if the one is found.</param>
            <returns>
            <c>true</c> if the event was found and the function was applied, <c>false</c> otherwise.
            </returns>
            <seealso cref="M:KSPDev.PartUtils.PartModuleUtils.GetEvent(PartModule,System.Action)"/>
            <example><code source="Examples/PartUtils/PartModuleUtils-Examples.cs" region="PartModuleUtils_SetupEvent"/></example>
        </member>
        <member name="M:KSPDev.PartUtils.PartModuleUtils.GetAction(PartModule,System.Action{KSPActionParam})">
            <summary>Returns an action for the requested method.</summary>
            <remarks>
            This method requests a KPS action of the part's module by its signature instead of a string
            literal name. The same result could be achieved by accessing the <c>Actions</c> field of the
            <c>PartModule</c> object. However, in case of using a string literal the refactoring and the
            source tracking tools won't be able to track the reference. The main goal of this method is to
            provide a compile time checking mechanism for the cases when the exact method is known at the
            compile time (e.g. in the class descendants).
            </remarks>
            <param name="partModule">The module to find the action in.</param>
            <param name="actionFn">The actions's method signature.</param>
            <returns>An action, or <c>null</c> if nothing found for the method provided.</returns>
            <seealso cref="M:KSPDev.PartUtils.PartModuleUtils.SetupAction(PartModule,System.Action{KSPActionParam},System.Action{BaseAction})"/>
        </member>
        <member name="M:KSPDev.PartUtils.PartModuleUtils.SetupAction(PartModule,System.Action{KSPActionParam},System.Action{BaseAction})">
            <summary>Applies a setup function on a KSP part module action.</summary>
            <param name="partModule">The module to find the action in.</param>
            <param name="actionFn">The actions's method signature.</param>
            <param name="setupFn">The function to apply to the action if the one is found.</param>
            <returns>
            <c>true</c> if the action was found and the function was applied, <c>false</c> otherwise.
            </returns>
            <seealso cref="M:KSPDev.PartUtils.PartModuleUtils.GetAction(PartModule,System.Action{KSPActionParam})"/>
        </member>
        <member name="M:KSPDev.PartUtils.PartModuleUtils.InvalidateContextMenu(Part)">
            <summary>Forces the context menu of the part to refresh itself.</summary>
            <remarks>Use it when the GUI fields/events list is changed.</remarks>
            <param name="part">The part to refresh the menu for.</param>
        </member>
        <member name="M:KSPDev.PartUtils.PartModuleUtils.AddEvent(PartModule,BaseEvent)">
            <summary>Add an event into a part module.</summary>
            <remarks>
            <para>
            This method will not add the same event twice. So it's safe to call it multiple times for the
            same event object.
            </para>
            <para>
            The name of the event may be used by the other modules to get the event. So keeping it unique
            may be needed to not break the behavior of the part.
            </para>
            </remarks>
            <param name="module">The part module to add the event into.</param>
            <param name="partEvent">The event object.</param>
        </member>
        <member name="M:KSPDev.PartUtils.PartModuleUtils.InjectEvent(PartModule,System.Action,PartModule)">
            <summary>Injects an event from one part to another.</summary>
            <remarks>
            <para>
            This method will not add the same event twice. So it's safe to call it multiple times for the
            same event object.
            </para>
            <para>
            The name of the event in the target part will be the same as in the original part. It may make
            troubles in case of the name conflict.
            </para>
            </remarks>
            <param name="srcModule">The module that originally owns the event.</param>
            <param name="srcEventFn">The event signature in the owner's module.</param>
            <param name="tgtModule">The part to inject the event into.</param>
            <returns><c>true</c> if the event has been successfully injected.</returns>
        </member>
        <member name="M:KSPDev.PartUtils.PartModuleUtils.DropEvent(PartModule,BaseEvent)">
            <summary>Removes the specified event from the part module.</summary>
            <remarks>
            It's ok if the event being removed doesn't exist on the part. The call will just silently
            return.
            </remarks>
            <param name="module">The part module to remove the event from.</param>
            <param name="partEvent">The event to remove.</param>
        </member>
        <member name="M:KSPDev.PartUtils.PartModuleUtils.WithdrawEvent(PartModule,System.Action,PartModule)">
            <summary>Removes an event that was previously injected.</summary>
            <remarks>
            It's ok if the event being removed doesn't exist on the part. The call will just silently
            return.
            </remarks>
            <param name="srcModule">The module that originally owns the event.</param>
            <param name="srcEventFn">The event signature in the owner's module.</param>
            <param name="tgtModule">The part to withdraw the event from.</param>
        </member>
        <member name="T:KSPDev.ProcessingUtils.AsyncCall">
            <summary>Set of tools to execute a delayed code.</summary>
            <remarks>
            Use these tools when the code needs to be executed with some delay or at the specific moment
            of time.
            </remarks>
        </member>
        <member name="M:KSPDev.ProcessingUtils.AsyncCall.CallOnEndOfFrame(UnityEngine.MonoBehaviour,System.Action,System.Int32)">
            <summary>Delays execution of the delegate till the end of the frame.</summary>
            <remarks>
            The delegate will trigger at the end of the selected frame update.
            If <paramref name="skipFrames"/> is set to <c>0</c>, then the delegate will be
            called at the end of the current frame. Calling this method in the "end of frame" callback
            will <i>not</i> schedule the callback on the next frame, the execution will just be placed at
            the end of the current frame execution queue. This behavior can be used to execute a logic
            that depends on some other delayed logic. In order to schedule the execution on the frame
            different from the current, specify the <paramref name="skipFrames"/> parameter.
            </remarks>
            <param name="mono">
            The Unity object to run the coroutine on. If this object dies, then the async call will not be
            invoked.
            </param>
            <param name="action">The delegate to execute.</param>
            <param name="skipFrames">The number of frames to skip.</param>
            <returns>The coroutine instance.</returns>
            <seealso href="https://docs.unity3d.com/Manual/Coroutines.html">Unity 3D: Coroutines</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/WaitForEndOfFrame.html">
            Unity 3D: WaitForEndOfFrame</seealso>
            <example><code source="Examples/ProcessingUtils/AsyncCall-Examples.cs" region="EndOfFrame"/></example>
        </member>
        <member name="M:KSPDev.ProcessingUtils.AsyncCall.CallOnTimeout(UnityEngine.MonoBehaviour,System.Single,System.Action)">
            <summary>Delays execution of the delegate for the specified amount of time.</summary>
            <remarks>The delegate will be called when the timeout is expired.</remarks>
            <param name="mono">
            The Unity object to run the coroutine on. If this object dies, then the async call will not be
            invoked.
            </param>
            <param name="seconds">The timeout in seconds.</param>
            <param name="action">The delegate to execute.</param>
            <returns>The coroutine instance.</returns>
            <seealso href="https://docs.unity3d.com/Manual/Coroutines.html">Unity 3D: Coroutines</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/WaitForSeconds.html">
            Unity 3D: WaitForSeconds</seealso>
            <example><code source="Examples/ProcessingUtils/AsyncCall-Examples.cs" region="CallOnTimeout"/></example>
        </member>
        <member name="M:KSPDev.ProcessingUtils.AsyncCall.CallOnFixedUpdate(UnityEngine.MonoBehaviour,System.Action,System.Int32)">
            <summary>Delays execution of the delegate till the next fixed update.</summary>
            <remarks>
            The delegate will be called during the following fixed (physics) update.
            </remarks>
            <param name="mono">
            The Unity object to run the coroutine on. If this object dies, then the async call will not be
            invoked.
            </param>
            <param name="action">The delegate to execute.</param>
            <param name="skipFrames">The number of fixed frames to skip.</param>
            <returns>The coroutine instance.</returns>
            <seealso href="https://docs.unity3d.com/Manual/Coroutines.html">Unity 3D: Coroutines</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/WaitForFixedUpdate.html">
            Unity 3D: WaitForFixedUpdate</seealso>
            <example><code source="Examples/ProcessingUtils/AsyncCall-Examples.cs" region="FixedFrame"/></example>
        </member>
        <member name="M:KSPDev.ProcessingUtils.AsyncCall.WaitForPhysics(UnityEngine.MonoBehaviour,System.Int32,System.Func{System.Boolean},System.Action,System.Action,System.Action{System.Int32})">
            <summary>
            Delays execution until the specified condition is reached. Waiting is limited by the specified
            number of fixed frame updates.
            </summary>
            <remarks>
            Can be used when the code expects some specific physical state of the game. The method
            allows to define for how long to wait, what to do while waiting, and what to execute when
            target state is reached or missed.
            </remarks>
            <param name="mono">
            The Unity object to run the coroutine on. If this object dies, then the async call will not be
            invoked.
            </param>
            <param name="maxFrames">The number of fixed frame updates to wait before giving up.</param>
            <param name="waitUntilFn">
            The state checking function. It should return <c>true</c> once the target state is reached.
            The very first execution happens immediately on the method call, <i>before</i> exiting from
            the method. If this execution returns <c>true</c>, then the successful callback is also called
            immediately.
            </param>
            <param name="success">
            The callback to execute when the state has been successfully reached.
            </param>
            <param name="failure">
            The callabck to execute when the state has not been reached before the frame update limit is
            exhausted.
            </param>
            <param name="update">
            The callback to execute every fixed frame update while waiting. This callabck will be called
            at least once, and the first call happens immediately. The argument tells how many frames the
            method was waiting so far. For the very first call it's <c>0</c>.
            </param>
            <returns>The coroutine instance.</returns>
            <seealso cref="M:KSPDev.ProcessingUtils.AsyncCall.AsyncWaitForPhysics(System.Int32,System.Func{System.Boolean},System.Action,System.Action,System.Action{System.Int32})"/>
            <seealso href="https://docs.unity3d.com/Manual/Coroutines.html">Unity 3D: Coroutines</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/WaitForFixedUpdate.html">
            Unity 3D: WaitForFixedUpdate</seealso>
            <example><code source="Examples/ProcessingUtils/AsyncCall-Examples.cs" region="WaitForPhysics1"/></example>
            <example><code source="Examples/ProcessingUtils/AsyncCall-Examples.cs" region="WaitForPhysics2"/></example>
        </member>
        <member name="M:KSPDev.ProcessingUtils.AsyncCall.AsyncWaitForPhysics(System.Int32,System.Func{System.Boolean},System.Action,System.Action,System.Action{System.Int32})">
            <summary>Async version of <see cref="M:KSPDev.ProcessingUtils.AsyncCall.WaitForPhysics(UnityEngine.MonoBehaviour,System.Int32,System.Func{System.Boolean},System.Action,System.Action,System.Action{System.Int32})"/>.</summary>
            <param name="maxFrames">The number of fixed frame updates to wait before giving up.</param>
            <param name="waitUntilFn">
            The state checking function. It should return <c>true</c> once the target state is reached.
            The very first execution happens immediately on the method call, <i>before</i> exiting from
            the method. If this execution returns <c>true</c>, then the successful callback is also called
            immediately.
            </param>
            <param name="success">
            The callback to execute when the state has been successfully reached.
            </param>
            <param name="failure">
            The callabck to execute when the state has not been reached before the frame update limit is
            exhausted.
            </param>
            <param name="update">
            The callback to execute every fixed frame update while waiting. This callabck will be called
            at least once, and the first call happens immediately. The argument tells how many frames the
            method was waiting so far. For the very first call it's <c>0</c>.
            </param>
            <returns>The enumerator that can be used as a coroutine target.</returns>
            <seealso cref="M:KSPDev.ProcessingUtils.AsyncCall.WaitForPhysics(UnityEngine.MonoBehaviour,System.Int32,System.Func{System.Boolean},System.Action,System.Action,System.Action{System.Int32})"/>
            <example>
            This method is useful when synchronous wait is needed within a coroutine. Instead of
            implementing own loops just return the waiting enumerator. The code below will log 10 waiting
            lines between "Started" and "Ended" records. 
            <code><![CDATA[
            class MyComponent : MonoBehaviour {
              void Awake() {
                StartCoroutine(MyDelayedFn());
              }
              IEnumerator MyDelayedFn() {
                Debug.Log("Started!");
                yield return AsyncCall.AsyncWaitForPhysics(
                   10,
                   () => false,
                   update: frame => Debug.LogFormat("...waiting frame {0}...", frame));
                Debug.Log("Ended!");
              }
            }
            ]]></code>
            </example>
            <seealso cref="M:KSPDev.ProcessingUtils.AsyncCall.WaitForPhysics(UnityEngine.MonoBehaviour,System.Int32,System.Func{System.Boolean},System.Action,System.Action,System.Action{System.Int32})"/>
        </member>
        <member name="T:KSPDev.ProcessingUtils.SimpleStateMachine`1">
            <summary>
            Simple state machine that allows tracking of the states and checking the basic transition
            conditions.
            </summary>
            <remarks>
            If a module has more that two modes (which can be controlled by a simple boolean) it makes sense
            to define each mode as a state, and introduce a definite state transition diagram. Once it's
            done, a state machine can be setup by defining which transitions are allowed. At this point the
            module will be able to just react on the state change events instead of checking multiple
            conditions.
            </remarks>
            <typeparam name="T">The enum to use as the state constants.</typeparam>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachine1"/></example>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.#ctor(System.Boolean)">
            <summary>Constructs a new uninitialized state machine.</summary>
            <param name="strict">Tells if all the transitions must be explicitly declared.</param>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.isStrict"/>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.currentState"/>
            <seealso cref="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.SetTransitionConstraint(`0,`0[])"/>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineStrict"/></example>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineFree"/></example>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.SetTransitionConstraint(`0,`0[])">
            <summary>Defines a state and the allowed target states for it.</summary>
            <remarks>
            In the strict mode it's required that every transition is declared excplicitly.
            </remarks>
            <param name="fromState">The source state.</param>
            <param name="toStates">The list of the states that are allowed as the targets.</param>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.isStrict"/>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.currentState"/>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineStrict"/></example>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.ResetTransitionConstraint(`0)">
            <summary>Clears the transitions for the source state if any.</summary>
            <param name="fromState">The source state to clear the tarnsitions for.</param>
            <seealso cref="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.SetTransitionConstraint(`0,`0[])"/>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.AddStateHandlers(`0,KSPDev.ProcessingUtils.SimpleStateMachine{`0}.OnChange,KSPDev.ProcessingUtils.SimpleStateMachine{`0}.OnChange,System.Boolean,System.Boolean)">
            <summary>Adds a state change event.</summary>
            <remarks>
            <para>
            When the state is changed by setting the <see cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.currentState"/> property, the transition
            callbacks are only called when the state has actually changed.
            </para>
            <para>
            Note, that the code must not expect that the handlers will be called in the same order as they
            were added. Each handler must be independent from the others.
            </para>
            </remarks>
            <param name="state">The state to call a callback on.</param>
            <param name="enterHandler">
            The callback to call when the state machine has switched to a new state. The callback is
            triggered <i>after</i> the state has actually changed. The callback's parameter is the
            <i>old</i> state, from which the machine has switched.
            </param>
            <param name="leaveHandler">
            The callback to call when the state machine is going to leave the current state. The callback
            is triggered <i>before</i> the state has actually changed. The callback's parameter is the
            <i>new</i> state, to which the machine is going to switch. 
            </param>
            <param name="callOnInit">
            Tells if this handler is allowed to be called when the state machine intitates from the
            <c>null</c> state. This usually means the owning object is in process of loading its state.
            Not all functionality can be availabe at this moment.
            </param>
            <param name="callOnShutdown">
            Tells if this handler is allowed to be called when the state machine goes into the <c>null</c>
            state. This usually means execution of the cleanup code, and the state of the owning object
            can be reduced.
            </param>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.currentState"/>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineFree"/></example>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.RemoveHandlers(`0,KSPDev.ProcessingUtils.SimpleStateMachine{`0}.OnChange,KSPDev.ProcessingUtils.SimpleStateMachine{`0}.OnChange)">
            <summary>Removes a state change event handler.</summary>
            <remarks>It's safe to call it for a non-existing handler.</remarks>
            <param name="state">The state to delete a handler for.</param>
            <param name="enterHandler">The enter state handler to delete.</param>
            <param name="leaveHandler">The leave state handler to delete.</param>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.CheckCanSwitchTo(`0)">
            <summary>Verifies if the machine can move into the desired state.</summary>
            <param name="newState">The state to check the transition for.</param>
            <returns><c>true</c> if the transition is allowed.</returns>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.isStrict"/>
            <seealso cref="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.SetTransitionConstraint(`0,`0[])"/>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineStrict"/></example>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.CheckIsStarted">
            <summary>Verifies that the state machine is started.</summary>
            <exception cref="T:System.InvalidOperationException">If state machine is not yet started.</exception>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.CheckIsNotStarted">
            <summary>Verifies that the state machine is <i>not</i> started.</summary>
            <exception cref="T:System.InvalidOperationException">If state machine is already started.</exception>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.SetState(System.Nullable{`0})">
            <summary>
            Changes the machine's state if the current and the new states are different. Checks if the
            transition is allowed before actually changing the state.
            </summary>
            <param name="newState">
            The state to change to. If <c>null</c> then the machine will be stopped.
            </param>
            <seealso cref="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.CheckCanSwitchTo(`0)"/>
            <exception cref="T:System.InvalidOperationException">If the transition is not allowed.</exception>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.FireLeaveState(System.Nullable{`0})">
            <summary>Notifies all the handlers about leaving the current state.</summary>
            <param name="newState">The new state where the machine is going to.</param>
        </member>
        <member name="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.FireEnterState(System.Nullable{`0})">
            <summary>Notifies all the handlers about entering a new state.</summary>
            <param name="oldState">The old state where the machine is going from.</param>
        </member>
        <member name="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.currentState">
            <summary>Current state of the machine.</summary>
            <remarks>
            <para>
            Setting the same state as the current one is a NO-OP. Setting of a new state may throw an
            exception in the strict mode.
            </para>
            <para>
            The initial state is always <c>null</c>, whiсh means <i>STOPPED</i>. The caller must set the
            initial state before starting using the machine. In spite of the other transitions, the
            initial state change is not restricted by the state transition constraints, regardless to the
            <see cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.isStrict"/> setting.
            </para>
            <para>
            To <i>STOP</i> the machine, just set the current state to <c>null</c>. No "enter state"
            handlers will be executed in this case, but all the "leave state" handlers will do their job.
            </para>
            </remarks>
            <value>The current state. It can be <c>null</c>.</value>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.isStrict"/>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineFree"/></example>
        </member>
        <member name="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.isStrict">
            <summary>Tells if all the transitions must be excplicitly declared.</summary>
            <value>The strict mode state.</value>
            <seealso cref="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.SetTransitionConstraint(`0,`0[])"/>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineStrict"/></example>
        </member>
        <member name="E:KSPDev.ProcessingUtils.SimpleStateMachine`1.onBeforeTransition">
            <summary>Event that fires before the state machine has changed its state.</summary>
            <remarks>
            The event is fired <i>before</i> the new state has been applied to the state machine and the
            transition callbacks are called, but <i>after</i> the transition validation is done. I.e. this
            event won't trigger if the transition failed due to the constraints.
            </remarks>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.currentState"/>
            <seealso cref="T:KSPDev.ProcessingUtils.SimpleStateMachine`1.OnStateChangeHandler"/>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineFree"/></example>
        </member>
        <member name="E:KSPDev.ProcessingUtils.SimpleStateMachine`1.onAfterTransition">
            <summary>Event that fires when the state machine has changed its state.</summary>
            <remarks>
            The event is fired <i>after</i> the new state has been applied to the state machine and all
            the transition callbacks are handled.
            </remarks>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.currentState"/>
            <seealso cref="T:KSPDev.ProcessingUtils.SimpleStateMachine`1.OnStateChangeHandler"/>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineFree"/></example>
        </member>
        <member name="T:KSPDev.ProcessingUtils.SimpleStateMachine`1.OnChange">
            <summary>Delegate for a callback which notifies about a state change.</summary>
            <param name="state">
            The state of the machine. Its exact meaning depends on the circumstances under which the
            callback has been called.
            </param>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.currentState"/>
            <seealso cref="M:KSPDev.ProcessingUtils.SimpleStateMachine`1.AddStateHandlers(`0,KSPDev.ProcessingUtils.SimpleStateMachine{`0}.OnChange,KSPDev.ProcessingUtils.SimpleStateMachine{`0}.OnChange,System.Boolean,System.Boolean)"/>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineFree"/></example>
        </member>
        <member name="T:KSPDev.ProcessingUtils.SimpleStateMachine`1.OnStateChangeHandler">
            <summary>Delegate to track an arbitrary state transition.</summary>
            <param name="fromState">The state before the change.</param>
            <param name="toState">The state after the change.</param>
            <seealso cref="P:KSPDev.ProcessingUtils.SimpleStateMachine`1.currentState"/>
            <seealso cref="E:KSPDev.ProcessingUtils.SimpleStateMachine`1.onAfterTransition"/>
            <example><code source="Examples/ProcessingUtils/SimpleStateMachine-Examples.cs" region="SimpleStateMachineFree"/></example>
        </member>
        <member name="T:KSPDev.ResourceUtils.StockResourceNames">
            <summary>
            A helper class that holds string and ID defintions for all the game stock resources. 
            </summary>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Resource">KSP Wiki: Resource</seealso>
            <code source="Examples/ResourceUtils/StockResourceNames-Examples.cs" region="StockResourceNames1"/>
        </member>
        <member name="F:KSPDev.ResourceUtils.StockResourceNames.ElectricCharge">
            <summary>Electric charge resource name.</summary>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Electric_charge">
            KSP Wiki: Electric charge</seealso>
        </member>
        <member name="F:KSPDev.ResourceUtils.StockResourceNames.LiquidFuel">
            <summary>Liquid fuel resource name.</summary>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Liquid_fuel">
            KSP Wiki: Liquid fuel</seealso>
        </member>
        <member name="F:KSPDev.ResourceUtils.StockResourceNames.Oxidizer">
            <summary>Oxidizer resource name.</summary>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Oxidizer">
            KSP Wiki: Oxidizer</seealso>
        </member>
        <member name="F:KSPDev.ResourceUtils.StockResourceNames.IntakeAir">
            <summary>Intake air resource name.</summary>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Intake_air">
            KSP Wiki: Intake air</seealso>
        </member>
        <member name="F:KSPDev.ResourceUtils.StockResourceNames.SolidFuel">
            <summary>Solid fuel resource name.</summary>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Solid_fuel">
            KSP Wiki: Solid fuel</seealso>
        </member>
        <member name="F:KSPDev.ResourceUtils.StockResourceNames.MonoPropellant">
            <summary>Monopropellant resource name.</summary>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Monopropellant">
            KSP Wiki: Monopropellant</seealso>
        </member>
        <member name="F:KSPDev.ResourceUtils.StockResourceNames.EvaPropellant">
            <summary>EVA Propellant resource name.</summary>
            <remarks>It's the fuel that powers the EVA jetpack.</remarks>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Extra-Vehicular_Activity">
            KSP Wiki: Extra-Vehicular Activity</seealso>
        </member>
        <member name="F:KSPDev.ResourceUtils.StockResourceNames.XenonGas">
            <summary>Xenon gas resource name.</summary>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Xenon_gas">
            KSP Wiki: Xenon gas</seealso>
        </member>
        <member name="F:KSPDev.ResourceUtils.StockResourceNames.Ore">
            <summary>Ore resource name.</summary>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Ore">
            KSP Wiki: Ore</seealso>
        </member>
        <member name="F:KSPDev.ResourceUtils.StockResourceNames.Ablator">
            <summary>Ablator resource name.</summary>
            <seealso href="http://wiki.kerbalspaceprogram.com/wiki/Ablator">
            KSP Wiki: Ablator</seealso>
        </member>
        <member name="M:KSPDev.ResourceUtils.StockResourceNames.GetId(System.String)">
            <summary>Returns an ID for the specified resource name.</summary>
            <remarks>This ID can be used in the methods that can only work with IDs.</remarks>
            <param name="resourceName">The name of the stock resource.</param>
            <returns>An ID of the resource.</returns>
            <code source="Examples/ResourceUtils/StockResourceNames-Examples.cs" region="StockResourceNames1"/>
        </member>
        <member name="M:KSPDev.ResourceUtils.StockResourceNames.GetResourceTitle(System.String,System.Boolean)">
            <summary>Returns a user friendly name of the resource.</summary>
            <remarks>
            This could be a rather expensive call. Cach the result if the timing is critical.
            </remarks>
            <param name="resourceName">The resource common name.</param>
            <param name="removeLingoonaTags">
            Specifies if any Lingoona tags on the name must be removed. Keep it default if the name is
            intended to be used 'as-is". If the name is to be used as a parameter to localizable phrase,
            then the tags should be kept.
            </param>
            <returns>A user friendly string that identifies the resource.</returns>
            <code source="Examples/ResourceUtils/StockResourceNames-Examples.cs" region="StockResourceNames1"/>
        </member>
        <member name="M:KSPDev.ResourceUtils.StockResourceNames.GetResourceTitle(System.Int32,System.Boolean)">
            <summary>Returns a user friendly name of the resource.</summary>
            <remarks>
            This could be a rather expensive call. Cach the result if the timing is critical.
            </remarks>
            <param name="resourceId">The resource ID.</param>
            <param name="removeLingoonaTags">
            Specifies if any Lingoona tags on the name must be removed. Keep it default if the name is
            intended to be used 'as-is". If the name is to be used as a parameter to localizable phrase,
            then the tags should be kept.
            </param>
            <returns>A user friendly string that identifies the resource.</returns>
            <code source="Examples/ResourceUtils/StockResourceNames-Examples.cs" region="StockResourceNames1"/>
        </member>
        <member name="M:KSPDev.ResourceUtils.StockResourceNames.GetResourceAbbreviation(System.String,System.Boolean)">
            <summary>Returns a user friendly name of the resource bsort name (abbreviation).</summary>
            <remarks>
            If the abbreviation is not set for the resource, then the first 3 letters of its display name
            are returned.
            </remarks>
            <param name="resourceName">The resource common name.</param>
            <param name="removeLingoonaTags">
            Specifies if any Lingoona tags on the name must be removed. Keep it default if the name is
            intended to be used 'as-is". If the name is to be used as a parameter to localizable phrase,
            then the tags should be kept.
            </param>
            <returns>A user friendly string that identifies the resource.</returns>
            <code source="Examples/ResourceUtils/StockResourceNames-Examples.cs" region="StockResourceNames1"/>
        </member>
        <member name="M:KSPDev.ResourceUtils.StockResourceNames.GetResourceAbbreviation(System.Int32,System.Boolean)">
            <summary>Returns a user friendly name of the resource bsort name (abbreviation).</summary>
            <remarks>
            If the abbreviation is not set for the resource, then the first 3 letters of its display name
            are returned.  This could be a rather expensive call. Cach the result if the timing is
            critical.
            </remarks>
            <param name="resourceId">The resource ID.</param>
            <param name="removeLingoonaTags">
            Specifies if any Lingoona tags on the name must be removed. Keep it default if the name is
            intended to be used 'as-is". If the name is to be used as a parameter to localizable phrase,
            then the tags should be kept.
            </param>
            <returns>A user friendly string that identifies the resource.</returns>
            <code source="Examples/ResourceUtils/StockResourceNames-Examples.cs" region="StockResourceNames1"/>
        </member>
        <member name="T:KSPDev.SoundsUtils.SpatialSounds">
            <summary>Helper class to deal with the sounds attached to a game object.</summary>
        </member>
        <member name="M:KSPDev.SoundsUtils.SpatialSounds.Create3dSound(UnityEngine.GameObject,System.String,System.Boolean,System.Single)">
            <summary>Sets up a sound FX group with an audio clip .</summary>
            <param name="obj">The game object to attach sound to.</param>
            <param name="sndPath">The URL to the audio clip.</param>
            <param name="loop">Specifies if the clip playback shold be looped.</param>
            <param name="maxDistance">The maximum distance at which the sound is hearable.</param>
            <returns>An audio source object attached to the <paramref name="obj"/>.</returns>
        </member>
        <member name="T:KSPDev.Types.PersistentConfigNode">
            <summary>Persistent type to hold bare ConfigNode.</summary>
            <remarks>
            This type can be used if the module needs to do a run-time parsing of the values.
            </remarks>
            <seealso cref="T:KSPDev.ConfigUtils.PersistentFieldAttribute"/>
        </member>
        <member name="M:KSPDev.Types.PersistentConfigNode.Load(ConfigNode)">
            <summary>Copies values from a node.</summary>
            <param name="node">The node to copy from.</param>
        </member>
        <member name="M:KSPDev.Types.PersistentConfigNode.Save(ConfigNode)">
            <summary>Copies values into the node.</summary>
            <param name="node">The node to copy the values into.</param>
        </member>
        <member name="T:KSPDev.Types.PosAndRot">
            <summary>Type to hold position and rotation of a transform. It can be serialized.</summary>
            <remarks>
            The value serializes into 6 numbers separated by a comma. They form two triplets:
            <list type="bullet">
            <item>The first triplet is a position: x, y, z.</item>
            <item>
            The second triplet is a Euler rotaion around each axis: x, y, z.
            </item>
            </list>
            </remarks>
            <example>
            <code source="Examples/Extensions/PosAndRotExtensions-Examples.cs" region="ToLocal"/>
            <code source="Examples/Extensions/PosAndRotExtensions-Examples.cs" region="ToWorld"/>
            </example>
        </member>
        <member name="F:KSPDev.Types.PosAndRot.pos">
            <summary>Position of the transform.</summary>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.#ctor">
            <summary>Constructs a default instance.</summary>
            <remarks>Required for the persistence to work correctly.</remarks>
            <para>
            By default position is <c>(0,0,0)</c>, Euler angles are <c>(0,0,0)</c>, and the rotation is
            <c>Quaternion.identity</c>.  
            </para>
            <seealso href="https://docs.unity3d.com/ScriptReference/Vector3.html">
            Unity3D: Vector3</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/Quaternion-identity.html">
            Unity3D: Quaternion</seealso>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.#ctor(KSPDev.Types.PosAndRot)">
            <summary>Constructs a copy of an object of the same type.</summary>
            <param name="from">Source object.</param>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Constructs an object from a transform properties.</summary>
            <param name="pos">Position of the transform.</param>
            <param name="euler">Euler rotation of the transform.</param>
            <seealso href="https://docs.unity3d.com/ScriptReference/Vector3.html">
            Unity3D: Vector3</seealso>
            <seealso href="https://docs.unity3d.com/ScriptReference/Transform.html">
            Unity3D: Transform</seealso>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.Clone">
            <summary>Gives a deep copy of the object.</summary>
            <returns>New object.</returns>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.SerializeToString">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.ParseFromString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.ToString">
            <summary>Shows a human readable representation.</summary>
            <returns>String value.</returns>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.FromString(System.String,System.Boolean)">
            <summary>Creates a new instance from the provided string.</summary>
            <param name="strValue">The value to parse.</param>
            <param name="failOnError">
            If <c>true</c> then a parsing error will fail the creation. Otherwise, a default instance will
            be returned.
            </param>
            <returns>An instance, intialized from the string.</returns>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.Transform(UnityEngine.Transform)">
            <summary>
            Transforms the object from the world space to the local space of a reference transform.
            </summary>
            <param name="parent">The transfrom to assume as a parent.</param>
            <returns>A new object in the world space of <paramref name="parent"/>.</returns>
            <example>
            <code source="Examples/Extensions/PosAndRotExtensions-Examples.cs" region="ToWorld"/>
            </example>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.InverseTransform(UnityEngine.Transform)">
            <summary>
            Transforms the object from world space to local space of a reference transform.
            </summary>
            <param name="parent">The transfrom to assume as a parent.</param>
            <returns>A new object in the local space of <paramref name="parent"/>.</returns>
            <example>
            <code source="Examples/Extensions/PosAndRotExtensions-Examples.cs" region="ToLocal"/>
            </example>
        </member>
        <member name="M:KSPDev.Types.PosAndRot.NormlizeAngles">
            <summary>
            Ensures that all the angles are in the range of <c>[0; 360)</c>. 
            </summary>
        </member>
        <member name="P:KSPDev.Types.PosAndRot.euler">
            <summary>Euler rotation.</summary>
            <remarks>
            The rotation angles are automatically adjusted to stay within the [0; 360) range.
            </remarks>
            <value>The Euler angles of the rotation.</value>
        </member>
        <member name="P:KSPDev.Types.PosAndRot.rot">
            <summary>Orientation of the transform.</summary>
            <value>The rotation of the transfrom.</value>
        </member>
    </members>
</doc>
